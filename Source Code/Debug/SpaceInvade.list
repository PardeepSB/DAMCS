
SpaceInvade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d040  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800d1d0  0800d1d0  0001d1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4c0  0800d4c0  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4c0  0800d4c0  0001d4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4c8  0800d4c8  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4c8  0800d4c8  0001d4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4cc  0800d4cc  0001d4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800d4d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          000021a0  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002300  20002300  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019fe0  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f7d  00000000  00000000  0003a1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017c0  00000000  00000000  0003e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001250  00000000  00000000  0003f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025569  00000000  00000000  00040b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e5db  00000000  00000000  000660a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d33e8  00000000  00000000  00084684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006eb4  00000000  00000000  00157a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0015e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1b8 	.word	0x0800d1b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800d1b8 	.word	0x0800d1b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <SPI1_WriteRead>:

static uint8_t SPI1_WriteRead(uint8_t pTxData);

/* Global function definitions -----------------------------------------------------------*/

static uint8_t SPI1_WriteRead(uint8_t pTxData) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]

	// Initalize variables
	uint8_t pRxData = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	737b      	strb	r3, [r7, #13]
	uint16_t txSize = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	81fb      	strh	r3, [r7, #14]

	// Transmit and receive data from LIS3DSH accelerometer
	if (HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&pTxData, (uint8_t *)&pRxData, txSize, HAL_MAX_DELAY) != HAL_OK) {
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	f107 020d 	add.w	r2, r7, #13
 8000efc:	1df9      	adds	r1, r7, #7
 8000efe:	f04f 30ff 	mov.w	r0, #4294967295
 8000f02:	9000      	str	r0, [sp, #0]
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <SPI1_WriteRead+0x44>)
 8000f06:	f004 fcac 	bl	8005862 <HAL_SPI_TransmitReceive>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <SPI1_WriteRead+0x38>
		HAL_SPI_DeInit(&hspi1);
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <SPI1_WriteRead+0x44>)
 8000f12:	f004 fc7e 	bl	8005812 <HAL_SPI_DeInit>
		HAL_SPI_Init(&hspi1);
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <SPI1_WriteRead+0x44>)
 8000f18:	f004 fbf2 	bl	8005700 <HAL_SPI_Init>
	}

	// return received data
	return pRxData;
 8000f1c:	7b7b      	ldrb	r3, [r7, #13]

}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000254 	.word	0x20000254

08000f2c <ACCELERO_IO_Read>:


void ACCELERO_IO_Read(uint8_t* pRxData, uint8_t u8Addr, uint16_t dataSize){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	803b      	strh	r3, [r7, #0]

	// Transmit Read bit, MS bit, and Address
	uint8_t pTxData = READ_COMMAND | u8Addr;
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f42:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);	//set CS low
 8000f44:	2200      	movs	r2, #0
 8000f46:	2108      	movs	r1, #8
 8000f48:	480e      	ldr	r0, [pc, #56]	; (8000f84 <ACCELERO_IO_Read+0x58>)
 8000f4a:	f002 fb79 	bl	8003640 <HAL_GPIO_WritePin>

	// Transmit read command and address of read location
	SPI1_WriteRead(pTxData);
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ffc7 	bl	8000ee4 <SPI1_WriteRead>

	/* Receive the data that will be read from the device (MSB First) */
	*pRxData = SPI1_WriteRead(FIRST_8_SDO);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ffc4 	bl	8000ee4 <SPI1_WriteRead>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	701a      	strb	r2, [r3, #0]
	dataSize--;
 8000f64:	883b      	ldrh	r3, [r7, #0]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	803b      	strh	r3, [r7, #0]
	pRxData++;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET); 		//set CS high
 8000f70:	2201      	movs	r2, #1
 8000f72:	2108      	movs	r1, #8
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <ACCELERO_IO_Read+0x58>)
 8000f76:	f002 fb63 	bl	8003640 <HAL_GPIO_WritePin>

}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <ACCELERO_IO_Write>:


void ACCELERO_IO_Write(uint8_t *pTxData, uint8_t u8Addr, uint16_t dataSize){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
 8000f94:	4613      	mov	r3, r2
 8000f96:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET); 	//set CS low
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <ACCELERO_IO_Write+0x4c>)
 8000f9e:	f002 fb4f 	bl	8003640 <HAL_GPIO_WritePin>

	// Transmit write command and address of write location
	SPI1_WriteRead(u8Addr);
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff9d 	bl	8000ee4 <SPI1_WriteRead>

	/* Receive the data that will be read from the device (MSB First) */
	SPI1_WriteRead(*pTxData);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff98 	bl	8000ee4 <SPI1_WriteRead>
	dataSize--;
 8000fb4:	883b      	ldrh	r3, [r7, #0]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	803b      	strh	r3, [r7, #0]
	pTxData++;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET); 		//set CS high
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2108      	movs	r1, #8
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <ACCELERO_IO_Write+0x4c>)
 8000fc6:	f002 fb3b 	bl	8003640 <HAL_GPIO_WritePin>

}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <ACCELERO_Init>:


void ACCELERO_Init(){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

	// Initialize Variables
	uint8_t regWHO = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl = 0x67;
 8000fe2:	2367      	movs	r3, #103	; 0x67
 8000fe4:	71bb      	strb	r3, [r7, #6]

	// Read WHO_AM_I register
	ACCELERO_IO_Read(&regWHO, WHO_AM_I, 1);
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	2201      	movs	r2, #1
 8000fea:	210f      	movs	r1, #15
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff9d 	bl	8000f2c <ACCELERO_IO_Read>

	// Configure MEMS: power mode(ODR) and axes enable
	ACCELERO_IO_Write(&ctrl, CTRL_REG4, 1);
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ffc5 	bl	8000f88 <ACCELERO_IO_Write>

	// Calibration of values read
	ACCELERO_GetXYZ(pTest);
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <ACCELERO_Init+0x6c>)
 8001000:	f000 f828 	bl	8001054 <ACCELERO_GetXYZ>
	offsetX = pTest[0] * -1;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <ACCELERO_Init+0x6c>)
 8001006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100a:	b29b      	uxth	r3, r3
 800100c:	425b      	negs	r3, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <ACCELERO_Init+0x70>)
 8001014:	801a      	strh	r2, [r3, #0]
	offsetY = pTest[1] * -1;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <ACCELERO_Init+0x6c>)
 8001018:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800101c:	b29b      	uxth	r3, r3
 800101e:	425b      	negs	r3, r3
 8001020:	b29b      	uxth	r3, r3
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <ACCELERO_Init+0x74>)
 8001026:	801a      	strh	r2, [r3, #0]
	offsetZ = (pTest[2] - 1000) * -1;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <ACCELERO_Init+0x6c>)
 800102a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800102e:	b29b      	uxth	r3, r3
 8001030:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001034:	b29b      	uxth	r3, r3
 8001036:	b21a      	sxth	r2, r3
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <ACCELERO_Init+0x78>)
 800103a:	801a      	strh	r2, [r3, #0]

}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000184 	.word	0x20000184
 8001048:	2000017c 	.word	0x2000017c
 800104c:	2000017e 	.word	0x2000017e
 8001050:	20000180 	.word	0x20000180

08001054 <ACCELERO_GetXYZ>:


void ACCELERO_GetXYZ(int16_t *pData){
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

	// Initialize Variables
	int8_t pRxData[6];
	float sensitivity = sens_0_06;
 800105c:	4b41      	ldr	r3, [pc, #260]	; (8001164 <ACCELERO_GetXYZ+0x110>)
 800105e:	61bb      	str	r3, [r7, #24]
	float value = 0;
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	617b      	str	r3, [r7, #20]

	// Read from all high and low output registers
	ACCELERO_IO_Read((uint8_t *)&pRxData[0], OUT_X_L, 1);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	2201      	movs	r2, #1
 800106c:	2128      	movs	r1, #40	; 0x28
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff5c 	bl	8000f2c <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t *)&pRxData[1], OUT_X_H, 1);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	3301      	adds	r3, #1
 800107a:	2201      	movs	r2, #1
 800107c:	2129      	movs	r1, #41	; 0x29
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff54 	bl	8000f2c <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t *)&pRxData[2], OUT_Y_L, 1);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	212a      	movs	r1, #42	; 0x2a
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff4c 	bl	8000f2c <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t *)&pRxData[3], OUT_Y_H, 1);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	3303      	adds	r3, #3
 800109a:	2201      	movs	r2, #1
 800109c:	212b      	movs	r1, #43	; 0x2b
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff44 	bl	8000f2c <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t *)&pRxData[4], OUT_Z_L, 1);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	3304      	adds	r3, #4
 80010aa:	2201      	movs	r2, #1
 80010ac:	212c      	movs	r1, #44	; 0x2c
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff3c 	bl	8000f2c <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t *)&pRxData[5], OUT_Z_H, 1);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	3305      	adds	r3, #5
 80010ba:	2201      	movs	r2, #1
 80010bc:	212d      	movs	r1, #45	; 0x2d
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff34 	bl	8000f2c <ACCELERO_IO_Read>

	// Scale output accelerometer values base don sensitivity of system
	for(int i = 0; i < 3; i++){
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	e043      	b.n	8001152 <ACCELERO_GetXYZ+0xfe>
		int16_t offset = (i == 0) ? offsetX : (i == 1) ? offsetY : (i == 2) ? offsetZ : 0;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00f      	beq.n	80010f0 <ACCELERO_GetXYZ+0x9c>
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d008      	beq.n	80010e8 <ACCELERO_GetXYZ+0x94>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d103      	bne.n	80010e4 <ACCELERO_GetXYZ+0x90>
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <ACCELERO_GetXYZ+0x114>)
 80010de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e2:	e008      	b.n	80010f6 <ACCELERO_GetXYZ+0xa2>
 80010e4:	2300      	movs	r3, #0
 80010e6:	e006      	b.n	80010f6 <ACCELERO_GetXYZ+0xa2>
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <ACCELERO_GetXYZ+0x118>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	e002      	b.n	80010f6 <ACCELERO_GetXYZ+0xa2>
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <ACCELERO_GetXYZ+0x11c>)
 80010f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f6:	827b      	strh	r3, [r7, #18]
		value = ((pRxData[2*i+1] << 8) + pRxData[2*i]) * sensitivity;
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	3301      	adds	r3, #1
 80010fe:	3320      	adds	r3, #32
 8001100:	443b      	add	r3, r7
 8001102:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	0052      	lsls	r2, r2, #1
 800110c:	3220      	adds	r2, #32
 800110e:	443a      	add	r2, r7
 8001110:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8001114:	4413      	add	r3, r2
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001126:	edc7 7a05 	vstr	s15, [r7, #20]
		pData[i] = (int16_t)value + offset;
 800112a:	edd7 7a05 	vldr	s15, [r7, #20]
 800112e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001132:	ee17 3a90 	vmov	r3, s15
 8001136:	b21b      	sxth	r3, r3
 8001138:	b29a      	uxth	r2, r3
 800113a:	8a7b      	ldrh	r3, [r7, #18]
 800113c:	4413      	add	r3, r2
 800113e:	b299      	uxth	r1, r3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	b20a      	sxth	r2, r1
 800114a:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3301      	adds	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	2b02      	cmp	r3, #2
 8001156:	ddb8      	ble.n	80010ca <ACCELERO_GetXYZ+0x76>
	}

}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	3d75c28f 	.word	0x3d75c28f
 8001168:	20000180 	.word	0x20000180
 800116c:	2000017e 	.word	0x2000017e
 8001170:	2000017c 	.word	0x2000017c
 8001174:	00000000 	.word	0x00000000

08001178 <calcAngles>:


void calcAngles(int16_t *pData, int8_t* pAngles) {
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	// Initialize Variables
	int8_t pitch;
	int8_t roll;

	// Scale accelerometer XYZ values
	double accelX = (double)pData[0]/1000;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9cb 	bl	8000524 <__aeabi_i2d>
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <calcAngles+0x198>)
 8001194:	f7ff fb5a 	bl	800084c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double accelY = (double)pData[1]/1000;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3302      	adds	r3, #2
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9bb 	bl	8000524 <__aeabi_i2d>
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b57      	ldr	r3, [pc, #348]	; (8001310 <calcAngles+0x198>)
 80011b4:	f7ff fb4a 	bl	800084c <__aeabi_ddiv>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double accelZ = (double)pData[2]/1000;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3304      	adds	r3, #4
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9ab 	bl	8000524 <__aeabi_i2d>
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b4f      	ldr	r3, [pc, #316]	; (8001310 <calcAngles+0x198>)
 80011d4:	f7ff fb3a 	bl	800084c <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Calculate pitch and roll with incoming accelerometer data
	pitch = 180 * atan2(accelX, sqrt(accelY*accelY + accelZ*accelZ))/M_PI;
 80011e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011e8:	f7ff fa06 	bl	80005f8 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4614      	mov	r4, r2
 80011f2:	461d      	mov	r5, r3
 80011f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011fc:	f7ff f9fc 	bl	80005f8 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f840 	bl	800028c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	ec43 2b17 	vmov	d7, r2, r3
 8001214:	eeb0 0a47 	vmov.f32	s0, s14
 8001218:	eef0 0a67 	vmov.f32	s1, s15
 800121c:	f00a fc15 	bl	800ba4a <sqrt>
 8001220:	eeb0 7a40 	vmov.f32	s14, s0
 8001224:	eef0 7a60 	vmov.f32	s15, s1
 8001228:	eeb0 1a47 	vmov.f32	s2, s14
 800122c:	eef0 1a67 	vmov.f32	s3, s15
 8001230:	ed97 0b08 	vldr	d0, [r7, #32]
 8001234:	f00a fc07 	bl	800ba46 <atan2>
 8001238:	ec51 0b10 	vmov	r0, r1, d0
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <calcAngles+0x19c>)
 8001242:	f7ff f9d9 	bl	80005f8 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a32e      	add	r3, pc, #184	; (adr r3, 8001308 <calcAngles+0x190>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff fafa 	bl	800084c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc7a 	bl	8000b58 <__aeabi_d2iz>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
	roll = 180 * atan2(accelY, sqrt(accelX*accelX + accelZ*accelZ))/M_PI;
 8001268:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800126c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001270:	f7ff f9c2 	bl	80005f8 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4614      	mov	r4, r2
 800127a:	461d      	mov	r5, r3
 800127c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001280:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001284:	f7ff f9b8 	bl	80005f8 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4620      	mov	r0, r4
 800128e:	4629      	mov	r1, r5
 8001290:	f7fe fffc 	bl	800028c <__adddf3>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	ec43 2b17 	vmov	d7, r2, r3
 800129c:	eeb0 0a47 	vmov.f32	s0, s14
 80012a0:	eef0 0a67 	vmov.f32	s1, s15
 80012a4:	f00a fbd1 	bl	800ba4a <sqrt>
 80012a8:	eeb0 7a40 	vmov.f32	s14, s0
 80012ac:	eef0 7a60 	vmov.f32	s15, s1
 80012b0:	eeb0 1a47 	vmov.f32	s2, s14
 80012b4:	eef0 1a67 	vmov.f32	s3, s15
 80012b8:	ed97 0b06 	vldr	d0, [r7, #24]
 80012bc:	f00a fbc3 	bl	800ba46 <atan2>
 80012c0:	ec51 0b10 	vmov	r0, r1, d0
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <calcAngles+0x19c>)
 80012ca:	f7ff f995 	bl	80005f8 <__aeabi_dmul>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	a30c      	add	r3, pc, #48	; (adr r3, 8001308 <calcAngles+0x190>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fab6 	bl	800084c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc36 	bl	8000b58 <__aeabi_d2iz>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73bb      	strb	r3, [r7, #14]

	pAngles[0] = pitch;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	701a      	strb	r2, [r3, #0]
	pAngles[1] = roll;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	7bba      	ldrb	r2, [r7, #14]
 80012fc:	701a      	strb	r2, [r3, #0]

}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bdb0      	pop	{r4, r5, r7, pc}
 8001306:	bf00      	nop
 8001308:	54442d18 	.word	0x54442d18
 800130c:	400921fb 	.word	0x400921fb
 8001310:	408f4000 	.word	0x408f4000
 8001314:	40668000 	.word	0x40668000

08001318 <setSineData>:
uint16_t rollFwdPWM = 0;
uint16_t rollBackPWM = 0;
uint16_t pitchRightPWM = 0;
uint16_t pitchLeftPWM = 0;

void setSineData(int8_t pitch, int8_t roll){
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	71bb      	strb	r3, [r7, #6]

	// Calculate frequency and amplitude proportional to pitch and roll
	uint8_t frequency = (uint8_t)(pitch < 0 ? -1*pitch : pitch);
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	da03      	bge.n	8001338 <setSineData+0x20>
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	425b      	negs	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	e000      	b.n	800133a <setSineData+0x22>
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	75bb      	strb	r3, [r7, #22]
	float amplitude = (fabsf(roll)+1) / 90.0;
 800133c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001348:	eef0 7ae7 	vabs.f32	s15, s15
 800134c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001350:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001354:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001420 <setSineData+0x108>
 8001358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135c:	edc7 7a04 	vstr	s15, [r7, #16]

    for (uint8_t i = 0; i < Ns; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	75fb      	strb	r3, [r7, #23]
 8001364:	e044      	b.n	80013f0 <setSineData+0xd8>
    {
        // Calculate the amplitude of the sine wave (scaled to DAC's 12-bit resolution)
        // Adjust the amplitude proportionally to the roll value
    	pSineData[i] = ((uint32_t)((sin(2 * 3.1415 * i / Ns) + 1) * (4096 / 2))) * amplitude;
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8db 	bl	8000524 <__aeabi_i2d>
 800136e:	a32a      	add	r3, pc, #168	; (adr r3, 8001418 <setSineData+0x100>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f940 	bl	80005f8 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <setSineData+0x10c>)
 8001386:	f7ff fa61 	bl	800084c <__aeabi_ddiv>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	ec43 2b17 	vmov	d7, r2, r3
 8001392:	eeb0 0a47 	vmov.f32	s0, s14
 8001396:	eef0 0a67 	vmov.f32	s1, s15
 800139a:	f00a fb85 	bl	800baa8 <sin>
 800139e:	ec51 0b10 	vmov	r0, r1, d0
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <setSineData+0x110>)
 80013a8:	f7fe ff70 	bl	800028c <__adddf3>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <setSineData+0x114>)
 80013ba:	f7ff f91d 	bl	80005f8 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fbef 	bl	8000ba8 <__aeabi_d2uiz>
 80013ca:	ee07 0a90 	vmov	s15, r0
 80013ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e0:	ee17 1a90 	vmov	r1, s15
 80013e4:	4a12      	ldr	r2, [pc, #72]	; (8001430 <setSineData+0x118>)
 80013e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < Ns; i++)
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	3301      	adds	r3, #1
 80013ee:	75fb      	strb	r3, [r7, #23]
 80013f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	dab6      	bge.n	8001366 <setSineData+0x4e>
    }

    // Adjust the frequency of the sine wave proportionally to the pitch value
    uint16_t new_ARR = 90 - frequency; // Modify the value as needed based on the desired range for pitch
 80013f8:	7dbb      	ldrb	r3, [r7, #22]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001400:	81fb      	strh	r3, [r7, #14]
    htim2.Instance->ARR = new_ARR;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <setSineData+0x11c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	c083126f 	.word	0xc083126f
 800141c:	401921ca 	.word	0x401921ca
 8001420:	42b40000 	.word	0x42b40000
 8001424:	40600000 	.word	0x40600000
 8001428:	3ff00000 	.word	0x3ff00000
 800142c:	40a00000 	.word	0x40a00000
 8001430:	2000039c 	.word	0x2000039c
 8001434:	200002ac 	.word	0x200002ac

08001438 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	// Execute the following for timer 6
	if(htim == &htim6){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d11a      	bne.n	800147e <HAL_TIM_PeriodElapsedCallback+0x46>

		// Get accelerometer XYZ coordinates and calculate pitch and roll
		ACCELERO_GetXYZ(pData);
 8001448:	4810      	ldr	r0, [pc, #64]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800144a:	f7ff fe03 	bl	8001054 <ACCELERO_GetXYZ>
		calcAngles(pData, pAngles);
 800144e:	4910      	ldr	r1, [pc, #64]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001452:	f7ff fe91 	bl	8001178 <calcAngles>

		// Convert pitch and roll to string format
		sprintf(txBuffer, "%d,%d\r\n", pAngles[0], pAngles[1]);
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001458:	f993 3000 	ldrsb.w	r3, [r3]
 800145c:	461a      	mov	r2, r3
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001460:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001464:	490b      	ldr	r1, [pc, #44]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001466:	480c      	ldr	r0, [pc, #48]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001468:	f009 fe4a 	bl	800b100 <siprintf>

		// Transmit pitch and roll values over USB_OTG_FS
		CDC_Transmit_FS((uint8_t*)txBuffer, strlen(txBuffer));
 800146c:	480a      	ldr	r0, [pc, #40]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800146e:	f7fe feaf 	bl	80001d0 <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	b29b      	uxth	r3, r3
 8001476:	4619      	mov	r1, r3
 8001478:	4807      	ldr	r0, [pc, #28]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800147a:	f009 f9d7 	bl	800a82c <CDC_Transmit_FS>
	}
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000033c 	.word	0x2000033c
 800148c:	20000384 	.word	0x20000384
 8001490:	2000038c 	.word	0x2000038c
 8001494:	0800d1d0 	.word	0x0800d1d0
 8001498:	20000390 	.word	0x20000390

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a2:	f000 fec7 	bl	8002234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a6:	f000 f8cf 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014aa:	f000 faff 	bl	8001aac <MX_GPIO_Init>
  MX_DMA_Init();
 80014ae:	f000 fadd 	bl	8001a6c <MX_DMA_Init>
  MX_I2C1_Init();
 80014b2:	f000 f95d 	bl	8001770 <MX_I2C1_Init>
  MX_SPI1_Init();
 80014b6:	f000 f989 	bl	80017cc <MX_SPI1_Init>
  MX_TIM6_Init();
 80014ba:	f000 faa1 	bl	8001a00 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80014be:	f009 f8f7 	bl	800a6b0 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80014c2:	f000 fa05 	bl	80018d0 <MX_TIM4_Init>
  MX_DAC_Init();
 80014c6:	f000 f929 	bl	800171c <MX_DAC_Init>
  MX_TIM2_Init();
 80014ca:	f000 f9b5 	bl	8001838 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the accelerometer
  ACCELERO_Init();
 80014ce:	f7ff fd83 	bl	8000fd8 <ACCELERO_Init>

  // Start the timer 6 in interrupt mode to generate periodic interrupts.
  HAL_TIM_Base_Start_IT(&htim6);
 80014d2:	4852      	ldr	r0, [pc, #328]	; (800161c <main+0x180>)
 80014d4:	f004 fcea 	bl	8005eac <HAL_TIM_Base_Start_IT>

  // Start the PWM output on timer 4 for channels 1, 2, 3, and 4. This enables the PWM output for LEDS
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014d8:	2100      	movs	r1, #0
 80014da:	4851      	ldr	r0, [pc, #324]	; (8001620 <main+0x184>)
 80014dc:	f004 fdb0 	bl	8006040 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80014e0:	2104      	movs	r1, #4
 80014e2:	484f      	ldr	r0, [pc, #316]	; (8001620 <main+0x184>)
 80014e4:	f004 fdac 	bl	8006040 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80014e8:	2108      	movs	r1, #8
 80014ea:	484d      	ldr	r0, [pc, #308]	; (8001620 <main+0x184>)
 80014ec:	f004 fda8 	bl	8006040 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80014f0:	210c      	movs	r1, #12
 80014f2:	484b      	ldr	r0, [pc, #300]	; (8001620 <main+0x184>)
 80014f4:	f004 fda4 	bl	8006040 <HAL_TIM_PWM_Start>

  // Start the timer 2 in normal mode
  HAL_TIM_Base_Start(&htim2);
 80014f8:	484a      	ldr	r0, [pc, #296]	; (8001624 <main+0x188>)
 80014fa:	f004 fc6f 	bl	8005ddc <HAL_TIM_Base_Start>

  // Set amplitude and frequency for DAC sinewave output
  setSineData(pAngles[0], pAngles[1]);
 80014fe:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <main+0x18c>)
 8001500:	f993 3000 	ldrsb.w	r3, [r3]
 8001504:	4a48      	ldr	r2, [pc, #288]	; (8001628 <main+0x18c>)
 8001506:	f992 2001 	ldrsb.w	r2, [r2, #1]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff03 	bl	8001318 <setSineData>

  // Start the DMA (Direct Memory Access) transfer to DAC (Digital-to-Analog Converter) channel 1 in 12-bit right alignment.
  // pSineData is the buffer containing sine wave data, and Ns is the number of data points in the buffer.
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, pSineData, Ns, DAC_ALIGN_12B_R);
 8001512:	2300      	movs	r3, #0
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	4a44      	ldr	r2, [pc, #272]	; (800162c <main+0x190>)
 800151a:	2100      	movs	r1, #0
 800151c:	4844      	ldr	r0, [pc, #272]	; (8001630 <main+0x194>)
 800151e:	f001 f853 	bl	80025c8 <HAL_DAC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Calculate pitchLeftPWM and pitchRightPWM based on pAngles[0]
	pitchLeftPWM = (pAngles[0] < 0) ? -pAngles[0] * 100 / 9 : 0;
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <main+0x18c>)
 8001524:	f993 3000 	ldrsb.w	r3, [r3]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da0f      	bge.n	800154c <main+0xb0>
 800152c:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <main+0x18c>)
 800152e:	f993 3000 	ldrsb.w	r3, [r3]
 8001532:	461a      	mov	r2, r3
 8001534:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	4a3d      	ldr	r2, [pc, #244]	; (8001634 <main+0x198>)
 800153e:	fb82 1203 	smull	r1, r2, r2, r3
 8001542:	1052      	asrs	r2, r2, #1
 8001544:	17db      	asrs	r3, r3, #31
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	b29b      	uxth	r3, r3
 800154a:	e000      	b.n	800154e <main+0xb2>
 800154c:	2300      	movs	r3, #0
 800154e:	4a3a      	ldr	r2, [pc, #232]	; (8001638 <main+0x19c>)
 8001550:	8013      	strh	r3, [r2, #0]
	pitchRightPWM = (pAngles[0] >= 0) ? pAngles[0] * 100 / 9 : 0;
 8001552:	4b35      	ldr	r3, [pc, #212]	; (8001628 <main+0x18c>)
 8001554:	f993 3000 	ldrsb.w	r3, [r3]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0e      	blt.n	800157a <main+0xde>
 800155c:	4b32      	ldr	r3, [pc, #200]	; (8001628 <main+0x18c>)
 800155e:	f993 3000 	ldrsb.w	r3, [r3]
 8001562:	461a      	mov	r2, r3
 8001564:	2364      	movs	r3, #100	; 0x64
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a32      	ldr	r2, [pc, #200]	; (8001634 <main+0x198>)
 800156c:	fb82 1203 	smull	r1, r2, r2, r3
 8001570:	1052      	asrs	r2, r2, #1
 8001572:	17db      	asrs	r3, r3, #31
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	e000      	b.n	800157c <main+0xe0>
 800157a:	2300      	movs	r3, #0
 800157c:	4a2f      	ldr	r2, [pc, #188]	; (800163c <main+0x1a0>)
 800157e:	8013      	strh	r3, [r2, #0]

	// Calculate rollBackPWM and rollFwdPWM based on pAngles[1]
	rollBackPWM = (pAngles[1] < 0) ? -pAngles[1] * 100 / 9 : 0;
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <main+0x18c>)
 8001582:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	da0f      	bge.n	80015aa <main+0x10e>
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <main+0x18c>)
 800158c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001590:	461a      	mov	r2, r3
 8001592:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4a26      	ldr	r2, [pc, #152]	; (8001634 <main+0x198>)
 800159c:	fb82 1203 	smull	r1, r2, r2, r3
 80015a0:	1052      	asrs	r2, r2, #1
 80015a2:	17db      	asrs	r3, r3, #31
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	e000      	b.n	80015ac <main+0x110>
 80015aa:	2300      	movs	r3, #0
 80015ac:	4a24      	ldr	r2, [pc, #144]	; (8001640 <main+0x1a4>)
 80015ae:	8013      	strh	r3, [r2, #0]
	rollFwdPWM = (pAngles[1] >= 0) ? pAngles[1] * 100 / 9 : 0;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <main+0x18c>)
 80015b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0e      	blt.n	80015d8 <main+0x13c>
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <main+0x18c>)
 80015bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80015c0:	461a      	mov	r2, r3
 80015c2:	2364      	movs	r3, #100	; 0x64
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <main+0x198>)
 80015ca:	fb82 1203 	smull	r1, r2, r2, r3
 80015ce:	1052      	asrs	r2, r2, #1
 80015d0:	17db      	asrs	r3, r3, #31
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	e000      	b.n	80015da <main+0x13e>
 80015d8:	2300      	movs	r3, #0
 80015da:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <main+0x1a8>)
 80015dc:	8013      	strh	r3, [r2, #0]

	// Set the compare registers of TIM4 to control the PWM output of LEDs
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pitchLeftPWM);
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <main+0x19c>)
 80015e0:	881a      	ldrh	r2, [r3, #0]
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <main+0x184>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rollFwdPWM);
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <main+0x1a8>)
 80015ea:	881a      	ldrh	r2, [r3, #0]
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <main+0x184>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pitchRightPWM);
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <main+0x1a0>)
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <main+0x184>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, rollBackPWM);
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <main+0x1a4>)
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <main+0x184>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	641a      	str	r2, [r3, #64]	; 0x40

	// Set new amplitude and frequency for DAC sinewave output
	setSineData(pAngles[0], pAngles[1]);
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <main+0x18c>)
 8001608:	f993 3000 	ldrsb.w	r3, [r3]
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <main+0x18c>)
 800160e:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe7f 	bl	8001318 <setSineData>
	pitchLeftPWM = (pAngles[0] < 0) ? -pAngles[0] * 100 / 9 : 0;
 800161a:	e782      	b.n	8001522 <main+0x86>
 800161c:	2000033c 	.word	0x2000033c
 8001620:	200002f4 	.word	0x200002f4
 8001624:	200002ac 	.word	0x200002ac
 8001628:	2000038c 	.word	0x2000038c
 800162c:	2000039c 	.word	0x2000039c
 8001630:	2000018c 	.word	0x2000018c
 8001634:	38e38e39 	.word	0x38e38e39
 8001638:	200005a2 	.word	0x200005a2
 800163c:	200005a0 	.word	0x200005a0
 8001640:	2000059e 	.word	0x2000059e
 8001644:	2000059c 	.word	0x2000059c

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	; 0x50
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	2230      	movs	r2, #48	; 0x30
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f009 fd72 	bl	800b140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <SystemClock_Config+0xcc>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a27      	ldr	r2, [pc, #156]	; (8001714 <SystemClock_Config+0xcc>)
 8001676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <SystemClock_Config+0xcc>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <SystemClock_Config+0xd0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a21      	ldr	r2, [pc, #132]	; (8001718 <SystemClock_Config+0xd0>)
 8001692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <SystemClock_Config+0xd0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016b8:	2308      	movs	r3, #8
 80016ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016c6:	2307      	movs	r3, #7
 80016c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 fb92 	bl	8004df8 <HAL_RCC_OscConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016da:	f000 faf3 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016de:	230f      	movs	r3, #15
 80016e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e2:	2302      	movs	r3, #2
 80016e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	2105      	movs	r1, #5
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fdf3 	bl	80052e8 <HAL_RCC_ClockConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001708:	f000 fadc 	bl	8001cc4 <Error_Handler>
  }
}
 800170c:	bf00      	nop
 800170e:	3750      	adds	r7, #80	; 0x50
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	40007000 	.word	0x40007000

0800171c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_DAC_Init+0x4c>)
 800172c:	4a0f      	ldr	r2, [pc, #60]	; (800176c <MX_DAC_Init+0x50>)
 800172e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_DAC_Init+0x4c>)
 8001732:	f000 ff26 	bl	8002582 <HAL_DAC_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800173c:	f000 fac2 	bl	8001cc4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001740:	2324      	movs	r3, #36	; 0x24
 8001742:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001748:	463b      	mov	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_DAC_Init+0x4c>)
 8001750:	f001 f88a 	bl	8002868 <HAL_DAC_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800175a:	f000 fab3 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000018c 	.word	0x2000018c
 800176c:	40007400 	.word	0x40007400

08001770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_I2C1_Init+0x50>)
 8001776:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <MX_I2C1_Init+0x54>)
 8001778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_I2C1_Init+0x50>)
 800177c:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <MX_I2C1_Init+0x58>)
 800177e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_I2C1_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_I2C1_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_I2C1_Init+0x50>)
 800178e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <MX_I2C1_Init+0x50>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_I2C1_Init+0x50>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <MX_I2C1_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_I2C1_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_I2C1_Init+0x50>)
 80017ae:	f001 ff61 	bl	8003674 <HAL_I2C_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017b8:	f000 fa84 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000200 	.word	0x20000200
 80017c4:	40005400 	.word	0x40005400
 80017c8:	000186a0 	.word	0x000186a0

080017cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_SPI1_Init+0x64>)
 80017d2:	4a18      	ldr	r2, [pc, #96]	; (8001834 <MX_SPI1_Init+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_SPI1_Init+0x64>)
 80017d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_SPI1_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_SPI1_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_SPI1_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_SPI1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_SPI1_Init+0x64>)
 80017f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_SPI1_Init+0x64>)
 8001800:	2218      	movs	r2, #24
 8001802:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <MX_SPI1_Init+0x64>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_SPI1_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <MX_SPI1_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_SPI1_Init+0x64>)
 8001818:	220a      	movs	r2, #10
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_SPI1_Init+0x64>)
 800181e:	f003 ff6f 	bl	8005700 <HAL_SPI_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001828:	f000 fa4c 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000254 	.word	0x20000254
 8001834:	40013000 	.word	0x40013000

08001838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_TIM2_Init+0x94>)
 8001856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MX_TIM2_Init+0x94>)
 800185e:	2209      	movs	r2, #9
 8001860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_TIM2_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_TIM2_Init+0x94>)
 800186a:	2263      	movs	r2, #99	; 0x63
 800186c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_TIM2_Init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_TIM2_Init+0x94>)
 8001876:	2280      	movs	r2, #128	; 0x80
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800187a:	4814      	ldr	r0, [pc, #80]	; (80018cc <MX_TIM2_Init+0x94>)
 800187c:	f004 fa5e 	bl	8005d3c <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001886:	f000 fa1d 	bl	8001cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4619      	mov	r1, r3
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_TIM2_Init+0x94>)
 8001898:	f004 fe64 	bl	8006564 <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 fa0f 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018a6:	2320      	movs	r3, #32
 80018a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ae:	463b      	mov	r3, r7
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <MX_TIM2_Init+0x94>)
 80018b4:	f005 fa56 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80018be:	f000 fa01 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200002ac 	.word	0x200002ac

080018d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001900:	4b3d      	ldr	r3, [pc, #244]	; (80019f8 <MX_TIM4_Init+0x128>)
 8001902:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <MX_TIM4_Init+0x12c>)
 8001904:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168-1;
 8001906:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <MX_TIM4_Init+0x128>)
 8001908:	22a7      	movs	r2, #167	; 0xa7
 800190a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <MX_TIM4_Init+0x128>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001912:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <MX_TIM4_Init+0x128>)
 8001914:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001918:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <MX_TIM4_Init+0x128>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001920:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <MX_TIM4_Init+0x128>)
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001926:	4834      	ldr	r0, [pc, #208]	; (80019f8 <MX_TIM4_Init+0x128>)
 8001928:	f004 fa08 	bl	8005d3c <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001932:	f000 f9c7 	bl	8001cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800193c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001940:	4619      	mov	r1, r3
 8001942:	482d      	ldr	r0, [pc, #180]	; (80019f8 <MX_TIM4_Init+0x128>)
 8001944:	f004 fe0e 	bl	8006564 <HAL_TIM_ConfigClockSource>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800194e:	f000 f9b9 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001952:	4829      	ldr	r0, [pc, #164]	; (80019f8 <MX_TIM4_Init+0x128>)
 8001954:	f004 fb1a 	bl	8005f8c <HAL_TIM_PWM_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800195e:	f000 f9b1 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	4619      	mov	r1, r3
 8001970:	4821      	ldr	r0, [pc, #132]	; (80019f8 <MX_TIM4_Init+0x128>)
 8001972:	f005 f9f7 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800197c:	f000 f9a2 	bl	8001cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001980:	2360      	movs	r3, #96	; 0x60
 8001982:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	4818      	ldr	r0, [pc, #96]	; (80019f8 <MX_TIM4_Init+0x128>)
 8001998:	f004 fd22 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80019a2:	f000 f98f 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2204      	movs	r2, #4
 80019aa:	4619      	mov	r1, r3
 80019ac:	4812      	ldr	r0, [pc, #72]	; (80019f8 <MX_TIM4_Init+0x128>)
 80019ae:	f004 fd17 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80019b8:	f000 f984 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2208      	movs	r2, #8
 80019c0:	4619      	mov	r1, r3
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <MX_TIM4_Init+0x128>)
 80019c4:	f004 fd0c 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80019ce:	f000 f979 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	220c      	movs	r2, #12
 80019d6:	4619      	mov	r1, r3
 80019d8:	4807      	ldr	r0, [pc, #28]	; (80019f8 <MX_TIM4_Init+0x128>)
 80019da:	f004 fd01 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80019e4:	f000 f96e 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <MX_TIM4_Init+0x128>)
 80019ea:	f000 fb21 	bl	8002030 <HAL_TIM_MspPostInit>

}
 80019ee:	bf00      	nop
 80019f0:	3738      	adds	r7, #56	; 0x38
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200002f4 	.word	0x200002f4
 80019fc:	40000800 	.word	0x40000800

08001a00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	463b      	mov	r3, r7
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a10:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <MX_TIM6_Init+0x68>)
 8001a12:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 168-1;
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a16:	22a7      	movs	r2, #167	; 0xa7
 8001a18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a22:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a2e:	480d      	ldr	r0, [pc, #52]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a30:	f004 f984 	bl	8005d3c <HAL_TIM_Base_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a3a:	f000 f943 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a4c:	f005 f98a 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a56:	f000 f935 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000033c 	.word	0x2000033c
 8001a68:	40001000 	.word	0x40001000

08001a6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_DMA_Init+0x3c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <MX_DMA_Init+0x3c>)
 8001a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_DMA_Init+0x3c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2010      	movs	r0, #16
 8001a94:	f000 fd3f 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a98:	2010      	movs	r0, #16
 8001a9a:	f000 fd58 	bl	800254e <HAL_NVIC_EnableIRQ>

}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	4b79      	ldr	r3, [pc, #484]	; (8001cac <MX_GPIO_Init+0x200>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a78      	ldr	r2, [pc, #480]	; (8001cac <MX_GPIO_Init+0x200>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b76      	ldr	r3, [pc, #472]	; (8001cac <MX_GPIO_Init+0x200>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	4b72      	ldr	r3, [pc, #456]	; (8001cac <MX_GPIO_Init+0x200>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a71      	ldr	r2, [pc, #452]	; (8001cac <MX_GPIO_Init+0x200>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <MX_GPIO_Init+0x200>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b6b      	ldr	r3, [pc, #428]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a6a      	ldr	r2, [pc, #424]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b68      	ldr	r3, [pc, #416]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b64      	ldr	r3, [pc, #400]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a63      	ldr	r2, [pc, #396]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b61      	ldr	r3, [pc, #388]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a5c      	ldr	r2, [pc, #368]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b5a      	ldr	r3, [pc, #360]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b56      	ldr	r3, [pc, #344]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a55      	ldr	r2, [pc, #340]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b53      	ldr	r3, [pc, #332]	; (8001cac <MX_GPIO_Init+0x200>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	4850      	ldr	r0, [pc, #320]	; (8001cb0 <MX_GPIO_Init+0x204>)
 8001b70:	f001 fd66 	bl	8003640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	2101      	movs	r1, #1
 8001b78:	484e      	ldr	r0, [pc, #312]	; (8001cb4 <MX_GPIO_Init+0x208>)
 8001b7a:	f001 fd61 	bl	8003640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2110      	movs	r1, #16
 8001b82:	484d      	ldr	r0, [pc, #308]	; (8001cb8 <MX_GPIO_Init+0x20c>)
 8001b84:	f001 fd5c 	bl	8003640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4844      	ldr	r0, [pc, #272]	; (8001cb0 <MX_GPIO_Init+0x204>)
 8001ba0:	f001 fab6 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	483e      	ldr	r0, [pc, #248]	; (8001cb4 <MX_GPIO_Init+0x208>)
 8001bbc:	f001 faa8 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bd0:	2305      	movs	r3, #5
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4836      	ldr	r0, [pc, #216]	; (8001cb4 <MX_GPIO_Init+0x208>)
 8001bdc:	f001 fa98 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001be0:	2301      	movs	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001be4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4831      	ldr	r0, [pc, #196]	; (8001cbc <MX_GPIO_Init+0x210>)
 8001bf6:	f001 fa8b 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	482c      	ldr	r0, [pc, #176]	; (8001cc0 <MX_GPIO_Init+0x214>)
 8001c0e:	f001 fa7f 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c24:	2305      	movs	r3, #5
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4824      	ldr	r0, [pc, #144]	; (8001cc0 <MX_GPIO_Init+0x214>)
 8001c30:	f001 fa6e 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001c34:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c46:	2306      	movs	r3, #6
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4818      	ldr	r0, [pc, #96]	; (8001cb4 <MX_GPIO_Init+0x208>)
 8001c52:	f001 fa5d 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001c56:	2310      	movs	r3, #16
 8001c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <MX_GPIO_Init+0x20c>)
 8001c6e:	f001 fa4f 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c72:	2320      	movs	r3, #32
 8001c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <MX_GPIO_Init+0x20c>)
 8001c86:	f001 fa43 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <MX_GPIO_Init+0x204>)
 8001ca0:	f001 fa36 	bl	8003110 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ca4:	bf00      	nop
 8001ca6:	3730      	adds	r7, #48	; 0x30
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x8>
	...

08001cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <HAL_MspInit+0x4c>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d0e:	2007      	movs	r0, #7
 8001d10:	f000 fbf6 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a33      	ldr	r2, [pc, #204]	; (8001e0c <HAL_DAC_MspInit+0xec>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d160      	bne.n	8001e04 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_DAC_MspInit+0xf0>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <HAL_DAC_MspInit+0xf0>)
 8001d4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_DAC_MspInit+0xf0>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_DAC_MspInit+0xf0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a2a      	ldr	r2, [pc, #168]	; (8001e10 <HAL_DAC_MspInit+0xf0>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_DAC_MspInit+0xf0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d7a:	2310      	movs	r3, #16
 8001d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4821      	ldr	r0, [pc, #132]	; (8001e14 <HAL_DAC_MspInit+0xf4>)
 8001d8e:	f001 f9bf 	bl	8003110 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <HAL_DAC_MspInit+0xfc>)
 8001d96:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001d9a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001d9e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001db6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dba:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dc2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dca:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001dd8:	480f      	ldr	r0, [pc, #60]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001dda:	f000 fe29 	bl	8002a30 <HAL_DMA_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001de4:	f7ff ff6e 	bl	8001cc4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_DAC_MspInit+0xf8>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2036      	movs	r0, #54	; 0x36
 8001dfa:	f000 fb8c 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dfe:	2036      	movs	r0, #54	; 0x36
 8001e00:	f000 fba5 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40007400 	.word	0x40007400
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	200001a0 	.word	0x200001a0
 8001e1c:	40026088 	.word	0x40026088

08001e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_I2C_MspInit+0x84>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d12c      	bne.n	8001e9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e64:	2312      	movs	r3, #18
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e70:	2304      	movs	r3, #4
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480c      	ldr	r0, [pc, #48]	; (8001eac <HAL_I2C_MspInit+0x8c>)
 8001e7c:	f001 f948 	bl	8003110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020400 	.word	0x40020400

08001eb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_SPI_MspInit+0x84>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d12b      	bne.n	8001f2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_SPI_MspInit+0x88>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_SPI_MspInit+0x88>)
 8001edc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_SPI_MspInit+0x88>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_SPI_MspInit+0x88>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_SPI_MspInit+0x88>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_SPI_MspInit+0x88>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001f0a:	23e0      	movs	r3, #224	; 0xe0
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f1a:	2305      	movs	r3, #5
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <HAL_SPI_MspInit+0x8c>)
 8001f26:	f001 f8f3 	bl	8003110 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40013000 	.word	0x40013000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000

08001f40 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_SPI_MspDeInit+0x30>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d109      	bne.n	8001f66 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_SPI_MspDeInit+0x34>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_SPI_MspDeInit+0x34>)
 8001f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8001f5e:	21e0      	movs	r1, #224	; 0xe0
 8001f60:	4805      	ldr	r0, [pc, #20]	; (8001f78 <HAL_SPI_MspDeInit+0x38>)
 8001f62:	f001 fa71 	bl	8003448 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40013000 	.word	0x40013000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020000 	.word	0x40020000

08001f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8c:	d116      	bne.n	8001fbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_TIM_Base_MspInit+0xa8>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_TIM_Base_MspInit+0xa8>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_TIM_Base_MspInit+0xa8>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	201c      	movs	r0, #28
 8001fb0:	f000 fab1 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fb4:	201c      	movs	r0, #28
 8001fb6:	f000 faca 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001fba:	e02e      	b.n	800201a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <HAL_TIM_Base_MspInit+0xac>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_TIM_Base_MspInit+0xa8>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_TIM_Base_MspInit+0xa8>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_TIM_Base_MspInit+0xa8>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
}
 8001fe2:	e01a      	b.n	800201a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_TIM_Base_MspInit+0xb0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d115      	bne.n	800201a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_TIM_Base_MspInit+0xa8>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <HAL_TIM_Base_MspInit+0xa8>)
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_TIM_Base_MspInit+0xa8>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2036      	movs	r0, #54	; 0x36
 8002010:	f000 fa81 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002014:	2036      	movs	r0, #54	; 0x36
 8002016:	f000 fa9a 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40000800 	.word	0x40000800
 800202c:	40001000 	.word	0x40001000

08002030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_TIM_MspPostInit+0x68>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11e      	bne.n	8002090 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a10      	ldr	r2, [pc, #64]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800206e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002072:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002080:	2302      	movs	r3, #2
 8002082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4619      	mov	r1, r3
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <HAL_TIM_MspPostInit+0x70>)
 800208c:	f001 f840 	bl	8003110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40000800 	.word	0x40000800
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020c00 	.word	0x40020c00

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <NMI_Handler+0x4>

080020aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <MemManage_Handler+0x4>

080020b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f0:	f000 f8f2 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <DMA1_Stream5_IRQHandler+0x10>)
 80020fe:	f000 fd9d 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200001a0 	.word	0x200001a0

0800210c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <TIM2_IRQHandler+0x10>)
 8002112:	f004 f85d 	bl	80061d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200002ac 	.word	0x200002ac

08002120 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002124:	4803      	ldr	r0, [pc, #12]	; (8002134 <TIM6_DAC_IRQHandler+0x14>)
 8002126:	f000 fb1d 	bl	8002764 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800212a:	4803      	ldr	r0, [pc, #12]	; (8002138 <TIM6_DAC_IRQHandler+0x18>)
 800212c:	f004 f850 	bl	80061d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000018c 	.word	0x2000018c
 8002138:	2000033c 	.word	0x2000033c

0800213c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <OTG_FS_IRQHandler+0x10>)
 8002142:	f001 fd2b 	bl	8003b9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20001a8c 	.word	0x20001a8c

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f008 ffe6 	bl	800b150 <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20020000 	.word	0x20020000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	200005a4 	.word	0x200005a4
 80021b8:	20002300 	.word	0x20002300

080021bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e4:	480d      	ldr	r0, [pc, #52]	; (800221c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021e6:	490e      	ldr	r1, [pc, #56]	; (8002220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021fc:	4c0b      	ldr	r4, [pc, #44]	; (800222c <LoopFillZerobss+0x26>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800220a:	f7ff ffd7 	bl	80021bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800220e:	f008 ffa5 	bl	800b15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002212:	f7ff f943 	bl	800149c <main>
  bx  lr    
 8002216:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002220:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002224:	0800d4d0 	.word	0x0800d4d0
  ldr r2, =_sbss
 8002228:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800222c:	20002300 	.word	0x20002300

08002230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC_IRQHandler>
	...

08002234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <HAL_Init+0x40>)
 800223e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <HAL_Init+0x40>)
 800224a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_Init+0x40>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_Init+0x40>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f000 f94f 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002262:	2000      	movs	r0, #0
 8002264:	f000 f808 	bl	8002278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002268:	f7ff fd32 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x54>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x58>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f967 	bl	800256a <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f000 f92f 	bl	8002516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_InitTick+0x5c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000000 	.word	0x20000000
 80022d0:	20000008 	.word	0x20000008
 80022d4:	20000004 	.word	0x20000004

080022d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x20>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x24>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_IncTick+0x24>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000008 	.word	0x20000008
 80022fc:	200005a8 	.word	0x200005a8

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_GetTick+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	200005a8 	.word	0x200005a8

08002318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff ffee 	bl	8002300 <HAL_GetTick>
 8002324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d005      	beq.n	800233e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_Delay+0x44>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800233e:	bf00      	nop
 8002340:	f7ff ffde 	bl	8002300 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d8f7      	bhi.n	8002340 <HAL_Delay+0x28>
  {
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000008 	.word	0x20000008

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f7ff ff8e 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff29 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff3e 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff8e 	bl	8002454 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5d 	bl	8002400 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff31 	bl	80023c4 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa2 	bl	80024bc <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e014      	b.n	80025be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	791b      	ldrb	r3, [r3, #4]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff fbbb 	bl	8001d20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	795b      	ldrb	r3, [r3, #5]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_DAC_Start_DMA+0x22>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e0ab      	b.n	8002742 <HAL_DAC_Start_DMA+0x17a>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2202      	movs	r2, #2
 80025f4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d12f      	bne.n	800265c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_DAC_Start_DMA+0x184>)
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a51      	ldr	r2, [pc, #324]	; (8002750 <HAL_DAC_Start_DMA+0x188>)
 800260a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a50      	ldr	r2, [pc, #320]	; (8002754 <HAL_DAC_Start_DMA+0x18c>)
 8002612:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002622:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	2b08      	cmp	r3, #8
 8002628:	d013      	beq.n	8002652 <HAL_DAC_Start_DMA+0x8a>
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d845      	bhi.n	80026bc <HAL_DAC_Start_DMA+0xf4>
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_DAC_Start_DMA+0x76>
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	2b04      	cmp	r3, #4
 800263a:	d005      	beq.n	8002648 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800263c:	e03e      	b.n	80026bc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3308      	adds	r3, #8
 8002644:	613b      	str	r3, [r7, #16]
        break;
 8002646:	e03c      	b.n	80026c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	613b      	str	r3, [r7, #16]
        break;
 8002650:	e037      	b.n	80026c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3310      	adds	r3, #16
 8002658:	613b      	str	r3, [r7, #16]
        break;
 800265a:	e032      	b.n	80026c2 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a3d      	ldr	r2, [pc, #244]	; (8002758 <HAL_DAC_Start_DMA+0x190>)
 8002662:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a3c      	ldr	r2, [pc, #240]	; (800275c <HAL_DAC_Start_DMA+0x194>)
 800266a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <HAL_DAC_Start_DMA+0x198>)
 8002672:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002682:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	2b08      	cmp	r3, #8
 8002688:	d013      	beq.n	80026b2 <HAL_DAC_Start_DMA+0xea>
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2b08      	cmp	r3, #8
 800268e:	d817      	bhi.n	80026c0 <HAL_DAC_Start_DMA+0xf8>
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_DAC_Start_DMA+0xd6>
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d005      	beq.n	80026a8 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800269c:	e010      	b.n	80026c0 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3314      	adds	r3, #20
 80026a4:	613b      	str	r3, [r7, #16]
        break;
 80026a6:	e00c      	b.n	80026c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3318      	adds	r3, #24
 80026ae:	613b      	str	r3, [r7, #16]
        break;
 80026b0:	e007      	b.n	80026c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	331c      	adds	r3, #28
 80026b8:	613b      	str	r3, [r7, #16]
        break;
 80026ba:	e002      	b.n	80026c2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80026bc:	bf00      	nop
 80026be:	e000      	b.n	80026c2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80026c0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d111      	bne.n	80026ec <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6898      	ldr	r0, [r3, #8]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	f000 fa53 	bl	8002b8c <HAL_DMA_Start_IT>
 80026e6:	4603      	mov	r3, r0
 80026e8:	75fb      	strb	r3, [r7, #23]
 80026ea:	e010      	b.n	800270e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80026fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68d8      	ldr	r0, [r3, #12]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	f000 fa41 	bl	8002b8c <HAL_DMA_Start_IT>
 800270a:	4603      	mov	r3, r0
 800270c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2201      	movs	r2, #1
 8002728:	409a      	lsls	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e005      	b.n	8002740 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f043 0204 	orr.w	r2, r3, #4
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002740:	7dfb      	ldrb	r3, [r7, #23]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	08002907 	.word	0x08002907
 8002750:	08002929 	.word	0x08002929
 8002754:	08002945 	.word	0x08002945
 8002758:	080029c3 	.word	0x080029c3
 800275c:	080029e5 	.word	0x080029e5
 8002760:	08002a01 	.word	0x08002a01

08002764 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277a:	d120      	bne.n	80027be <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d118      	bne.n	80027be <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2204      	movs	r2, #4
 8002790:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f043 0201 	orr.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027b6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f84b 	bl	8002854 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027cc:	d120      	bne.n	8002810 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027dc:	d118      	bne.n	8002810 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2204      	movs	r2, #4
 80027e2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f043 0202 	orr.w	r2, r3, #2
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002808:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8cf 	bl	80029ae <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	795b      	ldrb	r3, [r3, #5]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_DAC_ConfigChannel+0x18>
 800287c:	2302      	movs	r3, #2
 800287e:	e03c      	b.n	80028fa <HAL_DAC_ConfigChannel+0x92>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2202      	movs	r2, #2
 800288a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4013      	ands	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6819      	ldr	r1, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	22c0      	movs	r2, #192	; 0xc0
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	400a      	ands	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f7ff ff7f 	bl	8002818 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	711a      	strb	r2, [r3, #4]
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7ff ff78 	bl	800282c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f043 0204 	orr.w	r2, r3, #4
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff ff6e 	bl	8002840 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	711a      	strb	r2, [r3, #4]
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7ff ffce 	bl	8002972 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	711a      	strb	r2, [r3, #4]
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff ffc7 	bl	8002986 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f7ff ffbd 	bl	800299a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	711a      	strb	r2, [r3, #4]
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a3c:	f7ff fc60 	bl	8002300 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e099      	b.n	8002b80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6c:	e00f      	b.n	8002a8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a6e:	f7ff fc47 	bl	8002300 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d908      	bls.n	8002a8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2203      	movs	r2, #3
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e078      	b.n	8002b80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e8      	bne.n	8002a6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_DMA_Init+0x158>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d107      	bne.n	8002af8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4313      	orrs	r3, r2
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0307 	bic.w	r3, r3, #7
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d117      	bne.n	8002b52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00e      	beq.n	8002b52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fa6f 	bl	8003018 <DMA_CheckFifoParam>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e016      	b.n	8002b80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa26 	bl	8002fac <DMA_CalcBaseAndBitshift>
 8002b60:	4603      	mov	r3, r0
 8002b62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	223f      	movs	r2, #63	; 0x3f
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	f010803f 	.word	0xf010803f

08002b8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_DMA_Start_IT+0x26>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e040      	b.n	8002c34 <HAL_DMA_Start_IT+0xa8>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d12f      	bne.n	8002c26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f9b8 	bl	8002f50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	223f      	movs	r2, #63	; 0x3f
 8002be6:	409a      	lsls	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0216 	orr.w	r2, r2, #22
 8002bfa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0208 	orr.w	r2, r2, #8
 8002c12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e005      	b.n	8002c32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c48:	4b8e      	ldr	r3, [pc, #568]	; (8002e84 <HAL_DMA_IRQHandler+0x248>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a8e      	ldr	r2, [pc, #568]	; (8002e88 <HAL_DMA_IRQHandler+0x24c>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0a9b      	lsrs	r3, r3, #10
 8002c54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	2208      	movs	r2, #8
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01a      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0204 	bic.w	r2, r2, #4
 8002c8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	2208      	movs	r2, #8
 8002c96:	409a      	lsls	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	2201      	movs	r2, #1
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d012      	beq.n	8002cde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	2201      	movs	r2, #1
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f043 0202 	orr.w	r2, r3, #2
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d012      	beq.n	8002d14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	2204      	movs	r2, #4
 8002d02:	409a      	lsls	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f043 0204 	orr.w	r2, r3, #4
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	2210      	movs	r2, #16
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d043      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d03c      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d36:	2210      	movs	r2, #16
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d018      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d108      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d024      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
 8002d6a:	e01f      	b.n	8002dac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01b      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
 8002d7c:	e016      	b.n	8002dac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0208 	bic.w	r2, r2, #8
 8002d9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2220      	movs	r2, #32
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 808f 	beq.w	8002edc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8087 	beq.w	8002edc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d136      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0216 	bic.w	r2, r2, #22
 8002df4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x1da>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0208 	bic.w	r2, r2, #8
 8002e24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	223f      	movs	r2, #63	; 0x3f
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d07e      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
        }
        return;
 8002e52:	e079      	b.n	8002f48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d031      	beq.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
 8002e80:	e02c      	b.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000
 8002e88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d023      	beq.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
 8002e9c:	e01e      	b.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10f      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0210 	bic.w	r2, r2, #16
 8002eba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d032      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d022      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2205      	movs	r2, #5
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d307      	bcc.n	8002f24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f2      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x2cc>
 8002f22:	e000      	b.n	8002f26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
 8002f46:	e000      	b.n	8002f4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f48:	bf00      	nop
    }
  }
}
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b40      	cmp	r3, #64	; 0x40
 8002f7c:	d108      	bne.n	8002f90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f8e:	e007      	b.n	8002fa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	60da      	str	r2, [r3, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3b10      	subs	r3, #16
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <DMA_CalcBaseAndBitshift+0x64>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fc6:	4a13      	ldr	r2, [pc, #76]	; (8003014 <DMA_CalcBaseAndBitshift+0x68>)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d909      	bls.n	8002fee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	1d1a      	adds	r2, r3, #4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	659a      	str	r2, [r3, #88]	; 0x58
 8002fec:	e007      	b.n	8002ffe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	aaaaaaab 	.word	0xaaaaaaab
 8003014:	0800d238 	.word	0x0800d238

08003018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11f      	bne.n	8003072 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d856      	bhi.n	80030e6 <DMA_CheckFifoParam+0xce>
 8003038:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <DMA_CheckFifoParam+0x28>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	08003051 	.word	0x08003051
 8003044:	08003063 	.word	0x08003063
 8003048:	08003051 	.word	0x08003051
 800304c:	080030e7 	.word	0x080030e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d046      	beq.n	80030ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003060:	e043      	b.n	80030ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800306a:	d140      	bne.n	80030ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003070:	e03d      	b.n	80030ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307a:	d121      	bne.n	80030c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d837      	bhi.n	80030f2 <DMA_CheckFifoParam+0xda>
 8003082:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <DMA_CheckFifoParam+0x70>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	08003099 	.word	0x08003099
 800308c:	0800309f 	.word	0x0800309f
 8003090:	08003099 	.word	0x08003099
 8003094:	080030b1 	.word	0x080030b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
      break;
 800309c:	e030      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d025      	beq.n	80030f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ae:	e022      	b.n	80030f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b8:	d11f      	bne.n	80030fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030be:	e01c      	b.n	80030fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d903      	bls.n	80030ce <DMA_CheckFifoParam+0xb6>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d003      	beq.n	80030d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030cc:	e018      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      break;
 80030d2:	e015      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00e      	beq.n	80030fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      break;
 80030e4:	e00b      	b.n	80030fe <DMA_CheckFifoParam+0xe6>
      break;
 80030e6:	bf00      	nop
 80030e8:	e00a      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030ea:	bf00      	nop
 80030ec:	e008      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030ee:	bf00      	nop
 80030f0:	e006      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030f2:	bf00      	nop
 80030f4:	e004      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;   
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop

08003110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	e16b      	b.n	8003404 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800312c:	2201      	movs	r2, #1
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	429a      	cmp	r2, r3
 8003146:	f040 815a 	bne.w	80033fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d005      	beq.n	8003162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800315e:	2b02      	cmp	r3, #2
 8003160:	d130      	bne.n	80031c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003198:	2201      	movs	r2, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 0201 	and.w	r2, r3, #1
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d017      	beq.n	8003200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d123      	bne.n	8003254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	08da      	lsrs	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3208      	adds	r2, #8
 8003214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	220f      	movs	r2, #15
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	08da      	lsrs	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3208      	adds	r2, #8
 800324e:	69b9      	ldr	r1, [r7, #24]
 8003250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	2203      	movs	r2, #3
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0203 	and.w	r2, r3, #3
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80b4 	beq.w	80033fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	4b60      	ldr	r3, [pc, #384]	; (800341c <HAL_GPIO_Init+0x30c>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	4a5f      	ldr	r2, [pc, #380]	; (800341c <HAL_GPIO_Init+0x30c>)
 80032a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a4:	6453      	str	r3, [r2, #68]	; 0x44
 80032a6:	4b5d      	ldr	r3, [pc, #372]	; (800341c <HAL_GPIO_Init+0x30c>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032b2:	4a5b      	ldr	r2, [pc, #364]	; (8003420 <HAL_GPIO_Init+0x310>)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	3302      	adds	r3, #2
 80032ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	220f      	movs	r2, #15
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_GPIO_Init+0x314>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d02b      	beq.n	8003336 <HAL_GPIO_Init+0x226>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a51      	ldr	r2, [pc, #324]	; (8003428 <HAL_GPIO_Init+0x318>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d025      	beq.n	8003332 <HAL_GPIO_Init+0x222>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a50      	ldr	r2, [pc, #320]	; (800342c <HAL_GPIO_Init+0x31c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01f      	beq.n	800332e <HAL_GPIO_Init+0x21e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4f      	ldr	r2, [pc, #316]	; (8003430 <HAL_GPIO_Init+0x320>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d019      	beq.n	800332a <HAL_GPIO_Init+0x21a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4e      	ldr	r2, [pc, #312]	; (8003434 <HAL_GPIO_Init+0x324>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_GPIO_Init+0x216>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4d      	ldr	r2, [pc, #308]	; (8003438 <HAL_GPIO_Init+0x328>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00d      	beq.n	8003322 <HAL_GPIO_Init+0x212>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a4c      	ldr	r2, [pc, #304]	; (800343c <HAL_GPIO_Init+0x32c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <HAL_GPIO_Init+0x20e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a4b      	ldr	r2, [pc, #300]	; (8003440 <HAL_GPIO_Init+0x330>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d101      	bne.n	800331a <HAL_GPIO_Init+0x20a>
 8003316:	2307      	movs	r3, #7
 8003318:	e00e      	b.n	8003338 <HAL_GPIO_Init+0x228>
 800331a:	2308      	movs	r3, #8
 800331c:	e00c      	b.n	8003338 <HAL_GPIO_Init+0x228>
 800331e:	2306      	movs	r3, #6
 8003320:	e00a      	b.n	8003338 <HAL_GPIO_Init+0x228>
 8003322:	2305      	movs	r3, #5
 8003324:	e008      	b.n	8003338 <HAL_GPIO_Init+0x228>
 8003326:	2304      	movs	r3, #4
 8003328:	e006      	b.n	8003338 <HAL_GPIO_Init+0x228>
 800332a:	2303      	movs	r3, #3
 800332c:	e004      	b.n	8003338 <HAL_GPIO_Init+0x228>
 800332e:	2302      	movs	r3, #2
 8003330:	e002      	b.n	8003338 <HAL_GPIO_Init+0x228>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_GPIO_Init+0x228>
 8003336:	2300      	movs	r3, #0
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	f002 0203 	and.w	r2, r2, #3
 800333e:	0092      	lsls	r2, r2, #2
 8003340:	4093      	lsls	r3, r2
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003348:	4935      	ldr	r1, [pc, #212]	; (8003420 <HAL_GPIO_Init+0x310>)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3302      	adds	r3, #2
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_GPIO_Init+0x334>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800337a:	4a32      	ldr	r2, [pc, #200]	; (8003444 <HAL_GPIO_Init+0x334>)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003380:	4b30      	ldr	r3, [pc, #192]	; (8003444 <HAL_GPIO_Init+0x334>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033a4:	4a27      	ldr	r2, [pc, #156]	; (8003444 <HAL_GPIO_Init+0x334>)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <HAL_GPIO_Init+0x334>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ce:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <HAL_GPIO_Init+0x334>)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_GPIO_Init+0x334>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033f8:	4a12      	ldr	r2, [pc, #72]	; (8003444 <HAL_GPIO_Init+0x334>)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3301      	adds	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	f67f ae90 	bls.w	800312c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3724      	adds	r7, #36	; 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	40013800 	.word	0x40013800
 8003424:	40020000 	.word	0x40020000
 8003428:	40020400 	.word	0x40020400
 800342c:	40020800 	.word	0x40020800
 8003430:	40020c00 	.word	0x40020c00
 8003434:	40021000 	.word	0x40021000
 8003438:	40021400 	.word	0x40021400
 800343c:	40021800 	.word	0x40021800
 8003440:	40021c00 	.word	0x40021c00
 8003444:	40013c00 	.word	0x40013c00

08003448 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e0cd      	b.n	8003600 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003464:	2201      	movs	r2, #1
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	429a      	cmp	r2, r3
 800347c:	f040 80bd 	bne.w	80035fa <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003480:	4a65      	ldr	r2, [pc, #404]	; (8003618 <HAL_GPIO_DeInit+0x1d0>)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3302      	adds	r3, #2
 8003488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	220f      	movs	r2, #15
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a5d      	ldr	r2, [pc, #372]	; (800361c <HAL_GPIO_DeInit+0x1d4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d02b      	beq.n	8003502 <HAL_GPIO_DeInit+0xba>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a5c      	ldr	r2, [pc, #368]	; (8003620 <HAL_GPIO_DeInit+0x1d8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d025      	beq.n	80034fe <HAL_GPIO_DeInit+0xb6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a5b      	ldr	r2, [pc, #364]	; (8003624 <HAL_GPIO_DeInit+0x1dc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01f      	beq.n	80034fa <HAL_GPIO_DeInit+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a5a      	ldr	r2, [pc, #360]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d019      	beq.n	80034f6 <HAL_GPIO_DeInit+0xae>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a59      	ldr	r2, [pc, #356]	; (800362c <HAL_GPIO_DeInit+0x1e4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_GPIO_DeInit+0x1e8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00d      	beq.n	80034ee <HAL_GPIO_DeInit+0xa6>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a57      	ldr	r2, [pc, #348]	; (8003634 <HAL_GPIO_DeInit+0x1ec>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <HAL_GPIO_DeInit+0xa2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a56      	ldr	r2, [pc, #344]	; (8003638 <HAL_GPIO_DeInit+0x1f0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <HAL_GPIO_DeInit+0x9e>
 80034e2:	2307      	movs	r3, #7
 80034e4:	e00e      	b.n	8003504 <HAL_GPIO_DeInit+0xbc>
 80034e6:	2308      	movs	r3, #8
 80034e8:	e00c      	b.n	8003504 <HAL_GPIO_DeInit+0xbc>
 80034ea:	2306      	movs	r3, #6
 80034ec:	e00a      	b.n	8003504 <HAL_GPIO_DeInit+0xbc>
 80034ee:	2305      	movs	r3, #5
 80034f0:	e008      	b.n	8003504 <HAL_GPIO_DeInit+0xbc>
 80034f2:	2304      	movs	r3, #4
 80034f4:	e006      	b.n	8003504 <HAL_GPIO_DeInit+0xbc>
 80034f6:	2303      	movs	r3, #3
 80034f8:	e004      	b.n	8003504 <HAL_GPIO_DeInit+0xbc>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e002      	b.n	8003504 <HAL_GPIO_DeInit+0xbc>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_GPIO_DeInit+0xbc>
 8003502:	2300      	movs	r3, #0
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	f002 0203 	and.w	r2, r2, #3
 800350a:	0092      	lsls	r2, r2, #2
 800350c:	4093      	lsls	r3, r2
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	d132      	bne.n	800357a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003514:	4b49      	ldr	r3, [pc, #292]	; (800363c <HAL_GPIO_DeInit+0x1f4>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43db      	mvns	r3, r3
 800351c:	4947      	ldr	r1, [pc, #284]	; (800363c <HAL_GPIO_DeInit+0x1f4>)
 800351e:	4013      	ands	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003522:	4b46      	ldr	r3, [pc, #280]	; (800363c <HAL_GPIO_DeInit+0x1f4>)
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43db      	mvns	r3, r3
 800352a:	4944      	ldr	r1, [pc, #272]	; (800363c <HAL_GPIO_DeInit+0x1f4>)
 800352c:	4013      	ands	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003530:	4b42      	ldr	r3, [pc, #264]	; (800363c <HAL_GPIO_DeInit+0x1f4>)
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43db      	mvns	r3, r3
 8003538:	4940      	ldr	r1, [pc, #256]	; (800363c <HAL_GPIO_DeInit+0x1f4>)
 800353a:	4013      	ands	r3, r2
 800353c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800353e:	4b3f      	ldr	r3, [pc, #252]	; (800363c <HAL_GPIO_DeInit+0x1f4>)
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	43db      	mvns	r3, r3
 8003546:	493d      	ldr	r1, [pc, #244]	; (800363c <HAL_GPIO_DeInit+0x1f4>)
 8003548:	4013      	ands	r3, r2
 800354a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800355c:	4a2e      	ldr	r2, [pc, #184]	; (8003618 <HAL_GPIO_DeInit+0x1d0>)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	43da      	mvns	r2, r3
 800356c:	482a      	ldr	r0, [pc, #168]	; (8003618 <HAL_GPIO_DeInit+0x1d0>)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	400a      	ands	r2, r1
 8003574:	3302      	adds	r3, #2
 8003576:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2103      	movs	r1, #3
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	401a      	ands	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	08da      	lsrs	r2, r3, #3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3208      	adds	r2, #8
 8003598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	08d2      	lsrs	r2, r2, #3
 80035b0:	4019      	ands	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3208      	adds	r2, #8
 80035b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2103      	movs	r1, #3
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	401a      	ands	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	2101      	movs	r1, #1
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	401a      	ands	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	2103      	movs	r1, #3
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	401a      	ands	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3301      	adds	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b0f      	cmp	r3, #15
 8003604:	f67f af2e 	bls.w	8003464 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40013800 	.word	0x40013800
 800361c:	40020000 	.word	0x40020000
 8003620:	40020400 	.word	0x40020400
 8003624:	40020800 	.word	0x40020800
 8003628:	40020c00 	.word	0x40020c00
 800362c:	40021000 	.word	0x40021000
 8003630:	40021400 	.word	0x40021400
 8003634:	40021800 	.word	0x40021800
 8003638:	40021c00 	.word	0x40021c00
 800363c:	40013c00 	.word	0x40013c00

08003640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
 800364c:	4613      	mov	r3, r2
 800364e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003650:	787b      	ldrb	r3, [r7, #1]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003656:	887a      	ldrh	r2, [r7, #2]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800365c:	e003      	b.n	8003666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800365e:	887b      	ldrh	r3, [r7, #2]
 8003660:	041a      	lsls	r2, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	619a      	str	r2, [r3, #24]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e12b      	b.n	80038de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe fbc0 	bl	8001e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	; 0x24
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d8:	f001 fffe 	bl	80056d8 <HAL_RCC_GetPCLK1Freq>
 80036dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4a81      	ldr	r2, [pc, #516]	; (80038e8 <HAL_I2C_Init+0x274>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d807      	bhi.n	80036f8 <HAL_I2C_Init+0x84>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a80      	ldr	r2, [pc, #512]	; (80038ec <HAL_I2C_Init+0x278>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	bf94      	ite	ls
 80036f0:	2301      	movls	r3, #1
 80036f2:	2300      	movhi	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e006      	b.n	8003706 <HAL_I2C_Init+0x92>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a7d      	ldr	r2, [pc, #500]	; (80038f0 <HAL_I2C_Init+0x27c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bf94      	ite	ls
 8003700:	2301      	movls	r3, #1
 8003702:	2300      	movhi	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0e7      	b.n	80038de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a78      	ldr	r2, [pc, #480]	; (80038f4 <HAL_I2C_Init+0x280>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9b      	lsrs	r3, r3, #18
 8003718:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a6a      	ldr	r2, [pc, #424]	; (80038e8 <HAL_I2C_Init+0x274>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d802      	bhi.n	8003748 <HAL_I2C_Init+0xd4>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3301      	adds	r3, #1
 8003746:	e009      	b.n	800375c <HAL_I2C_Init+0xe8>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	4a69      	ldr	r2, [pc, #420]	; (80038f8 <HAL_I2C_Init+0x284>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	3301      	adds	r3, #1
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	430b      	orrs	r3, r1
 8003762:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800376e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	495c      	ldr	r1, [pc, #368]	; (80038e8 <HAL_I2C_Init+0x274>)
 8003778:	428b      	cmp	r3, r1
 800377a:	d819      	bhi.n	80037b0 <HAL_I2C_Init+0x13c>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e59      	subs	r1, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fbb1 f3f3 	udiv	r3, r1, r3
 800378a:	1c59      	adds	r1, r3, #1
 800378c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003790:	400b      	ands	r3, r1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_I2C_Init+0x138>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1e59      	subs	r1, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037aa:	e051      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 80037ac:	2304      	movs	r3, #4
 80037ae:	e04f      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d111      	bne.n	80037dc <HAL_I2C_Init+0x168>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1e58      	subs	r0, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	440b      	add	r3, r1
 80037c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ca:	3301      	adds	r3, #1
 80037cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e012      	b.n	8003802 <HAL_I2C_Init+0x18e>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1e58      	subs	r0, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	0099      	lsls	r1, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f2:	3301      	adds	r3, #1
 80037f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Init+0x196>
 8003806:	2301      	movs	r3, #1
 8003808:	e022      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10e      	bne.n	8003830 <HAL_I2C_Init+0x1bc>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1e58      	subs	r0, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	460b      	mov	r3, r1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	440b      	add	r3, r1
 8003820:	fbb0 f3f3 	udiv	r3, r0, r3
 8003824:	3301      	adds	r3, #1
 8003826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382e:	e00f      	b.n	8003850 <HAL_I2C_Init+0x1dc>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1e58      	subs	r0, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	0099      	lsls	r1, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	fbb0 f3f3 	udiv	r3, r0, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	6809      	ldr	r1, [r1, #0]
 8003854:	4313      	orrs	r3, r2
 8003856:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800387e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6911      	ldr	r1, [r2, #16]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68d2      	ldr	r2, [r2, #12]
 800388a:	4311      	orrs	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	430b      	orrs	r3, r1
 8003892:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	000186a0 	.word	0x000186a0
 80038ec:	001e847f 	.word	0x001e847f
 80038f0:	003d08ff 	.word	0x003d08ff
 80038f4:	431bde83 	.word	0x431bde83
 80038f8:	10624dd3 	.word	0x10624dd3

080038fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fe:	b08f      	sub	sp, #60	; 0x3c
 8003900:	af0a      	add	r7, sp, #40	; 0x28
 8003902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e10f      	b.n	8003b2e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f007 f8c7 	bl	800aabc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2203      	movs	r2, #3
 8003932:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f003 fbae 	bl	80070ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	687e      	ldr	r6, [r7, #4]
 800395a:	466d      	mov	r5, sp
 800395c:	f106 0410 	add.w	r4, r6, #16
 8003960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003968:	e894 0003 	ldmia.w	r4, {r0, r1}
 800396c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003970:	1d33      	adds	r3, r6, #4
 8003972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003974:	6838      	ldr	r0, [r7, #0]
 8003976:	f003 fa85 	bl	8006e84 <USB_CoreInit>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0d0      	b.n	8003b2e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fb9c 	bl	80070d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]
 800399c:	e04a      	b.n	8003a34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	333d      	adds	r3, #61	; 0x3d
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	333c      	adds	r3, #60	; 0x3c
 80039c2:	7bfa      	ldrb	r2, [r7, #15]
 80039c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039c6:	7bfa      	ldrb	r2, [r7, #15]
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	b298      	uxth	r0, r3
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	3344      	adds	r3, #68	; 0x44
 80039da:	4602      	mov	r2, r0
 80039dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3340      	adds	r3, #64	; 0x40
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039f2:	7bfa      	ldrb	r2, [r7, #15]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	3348      	adds	r3, #72	; 0x48
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	334c      	adds	r3, #76	; 0x4c
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3354      	adds	r3, #84	; 0x54
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	3301      	adds	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	7bfa      	ldrb	r2, [r7, #15]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d3af      	bcc.n	800399e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e044      	b.n	8003ace <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a5a:	7bfa      	ldrb	r2, [r7, #15]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3b5      	bcc.n	8003a44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	687e      	ldr	r6, [r7, #4]
 8003ae0:	466d      	mov	r5, sp
 8003ae2:	f106 0410 	add.w	r4, r6, #16
 8003ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003af2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003af6:	1d33      	adds	r3, r6, #4
 8003af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003afa:	6838      	ldr	r0, [r7, #0]
 8003afc:	f003 fb34 	bl	8007168 <USB_DevInit>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00d      	b.n	8003b2e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f004 fc83 	bl	8008432 <USB_DevDisconnect>

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_PCD_Start+0x1c>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e020      	b.n	8003b94 <HAL_PCD_Start+0x5e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d109      	bne.n	8003b76 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d005      	beq.n	8003b76 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 fa86 	bl	800708c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f004 fc33 	bl	80083f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b08d      	sub	sp, #52	; 0x34
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 fcf1 	bl	800859a <USB_GetMode>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 848a 	bne.w	80044d4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f004 fc55 	bl	8008474 <USB_ReadInterrupts>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8480 	beq.w	80044d2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 fc42 	bl	8008474 <USB_ReadInterrupts>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d107      	bne.n	8003c0a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f002 0202 	and.w	r2, r2, #2
 8003c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f004 fc30 	bl	8008474 <USB_ReadInterrupts>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b10      	cmp	r3, #16
 8003c1c:	d161      	bne.n	8003ce2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699a      	ldr	r2, [r3, #24]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0210 	bic.w	r2, r2, #16
 8003c2c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f003 020f 	and.w	r2, r3, #15
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	0c5b      	lsrs	r3, r3, #17
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d124      	bne.n	8003ca4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d035      	beq.n	8003cd2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	6a38      	ldr	r0, [r7, #32]
 8003c7a:	f004 fa67 	bl	800814c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c8a:	441a      	add	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c9c:	441a      	add	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	621a      	str	r2, [r3, #32]
 8003ca2:	e016      	b.n	8003cd2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	0c5b      	lsrs	r3, r3, #17
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	2b06      	cmp	r3, #6
 8003cae:	d110      	bne.n	8003cd2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6a38      	ldr	r0, [r7, #32]
 8003cbc:	f004 fa46 	bl	800814c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ccc:	441a      	add	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0210 	orr.w	r2, r2, #16
 8003ce0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 fbc4 	bl	8008474 <USB_ReadInterrupts>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cf6:	f040 80a7 	bne.w	8003e48 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f004 fbc9 	bl	800849a <USB_ReadDevAllOutEpInterrupt>
 8003d08:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d0a:	e099      	b.n	8003e40 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 808e 	beq.w	8003e34 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f004 fbed 	bl	8008502 <USB_ReadDevOutEPInterrupt>
 8003d28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00c      	beq.n	8003d4e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	461a      	mov	r2, r3
 8003d42:	2301      	movs	r3, #1
 8003d44:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fec3 	bl	8004ad4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00c      	beq.n	8003d72 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d64:	461a      	mov	r2, r3
 8003d66:	2308      	movs	r3, #8
 8003d68:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 ff99 	bl	8004ca4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2310      	movs	r3, #16
 8003d8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d030      	beq.n	8003dfa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b80      	cmp	r3, #128	; 0x80
 8003da2:	d109      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003db6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3304      	adds	r3, #4
 8003dcc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	78db      	ldrb	r3, [r3, #3]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d108      	bne.n	8003de8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f006 ff7e 	bl	800ace4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	461a      	mov	r2, r3
 8003df6:	2302      	movs	r3, #2
 8003df8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e10:	461a      	mov	r2, r3
 8003e12:	2320      	movs	r3, #32
 8003e14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e32:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	3301      	adds	r3, #1
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f47f af62 	bne.w	8003d0c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f004 fb11 	bl	8008474 <USB_ReadInterrupts>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e5c:	f040 80db 	bne.w	8004016 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f004 fb32 	bl	80084ce <USB_ReadDevAllInEpInterrupt>
 8003e6a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003e70:	e0cd      	b.n	800400e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80c2 	beq.w	8004002 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f004 fb58 	bl	800853e <USB_ReadDevInEPInterrupt>
 8003e8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d057      	beq.n	8003f4a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69f9      	ldr	r1, [r7, #28]
 8003eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eba:	4013      	ands	r3, r2
 8003ebc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2301      	movs	r3, #1
 8003ece:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d132      	bne.n	8003f3e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	334c      	adds	r3, #76	; 0x4c
 8003ee8:	6819      	ldr	r1, [r3, #0]
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4403      	add	r3, r0
 8003ef8:	3348      	adds	r3, #72	; 0x48
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4419      	add	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4403      	add	r3, r0
 8003f0c:	334c      	adds	r3, #76	; 0x4c
 8003f0e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d113      	bne.n	8003f3e <HAL_PCD_IRQHandler+0x3a2>
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3354      	adds	r3, #84	; 0x54
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d108      	bne.n	8003f3e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f36:	461a      	mov	r2, r3
 8003f38:	2101      	movs	r1, #1
 8003f3a:	f004 fb5f 	bl	80085fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	4619      	mov	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f006 fe48 	bl	800abda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	461a      	mov	r2, r3
 8003f62:	2308      	movs	r3, #8
 8003f64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2310      	movs	r3, #16
 8003f80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2340      	movs	r3, #64	; 0x40
 8003f9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d023      	beq.n	8003ff0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003faa:	6a38      	ldr	r0, [r7, #32]
 8003fac:	f003 fa40 	bl	8007430 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	3338      	adds	r3, #56	; 0x38
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	78db      	ldrb	r3, [r3, #3]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d108      	bne.n	8003fde <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f006 fe95 	bl	800ad08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fea:	461a      	mov	r2, r3
 8003fec:	2302      	movs	r3, #2
 8003fee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fcdb 	bl	80049b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	3301      	adds	r3, #1
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	f47f af2e 	bne.w	8003e72 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f004 fa2a 	bl	8008474 <USB_ReadInterrupts>
 8004020:	4603      	mov	r3, r0
 8004022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800402a:	d122      	bne.n	8004072 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004046:	2b01      	cmp	r3, #1
 8004048:	d108      	bne.n	800405c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004052:	2100      	movs	r1, #0
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fec3 	bl	8004de0 <HAL_PCDEx_LPM_Callback>
 800405a:	e002      	b.n	8004062 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f006 fe33 	bl	800acc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f004 f9fc 	bl	8008474 <USB_ReadInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004086:	d112      	bne.n	80040ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d102      	bne.n	800409e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f006 fdef 	bl	800ac7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80040ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f004 f9de 	bl	8008474 <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c2:	f040 80b7 	bne.w	8004234 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2110      	movs	r1, #16
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 f9a5 	bl	8007430 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ea:	e046      	b.n	800417a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f8:	461a      	mov	r2, r3
 80040fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800411e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412c:	461a      	mov	r2, r3
 800412e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004132:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004152:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004172:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	3301      	adds	r3, #1
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004180:	429a      	cmp	r2, r3
 8004182:	d3b3      	bcc.n	80040ec <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004192:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004196:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	2b00      	cmp	r3, #0
 800419e:	d016      	beq.n	80041ce <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b0:	f043 030b 	orr.w	r3, r3, #11
 80041b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c6:	f043 030b 	orr.w	r3, r3, #11
 80041ca:	6453      	str	r3, [r2, #68]	; 0x44
 80041cc:	e015      	b.n	80041fa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80041e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f4:	f043 030b 	orr.w	r3, r3, #11
 80041f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004208:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800420c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800421e:	461a      	mov	r2, r3
 8004220:	f004 f9ec 	bl	80085fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f004 f91b 	bl	8008474 <USB_ReadInterrupts>
 800423e:	4603      	mov	r3, r0
 8004240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004248:	d124      	bne.n	8004294 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f004 f9b1 	bl	80085b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f003 f966 	bl	800752a <USB_GetDevSpeed>
 800425e:	4603      	mov	r3, r0
 8004260:	461a      	mov	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681c      	ldr	r4, [r3, #0]
 800426a:	f001 fa29 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 800426e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	4620      	mov	r0, r4
 800427a:	f002 fe65 	bl	8006f48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f006 fcd3 	bl	800ac2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004292:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f004 f8eb 	bl	8008474 <USB_ReadInterrupts>
 800429e:	4603      	mov	r3, r0
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d10a      	bne.n	80042be <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f006 fcb0 	bl	800ac0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f002 0208 	and.w	r2, r2, #8
 80042bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f004 f8d6 	bl	8008474 <USB_ReadInterrupts>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d122      	bne.n	8004318 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042de:	2301      	movs	r3, #1
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
 80042e2:	e014      	b.n	800430e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fb27 	bl	8004956 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	3301      	adds	r3, #1
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004314:	429a      	cmp	r2, r3
 8004316:	d3e5      	bcc.n	80042e4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f004 f8a9 	bl	8008474 <USB_ReadInterrupts>
 8004322:	4603      	mov	r3, r0
 8004324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800432c:	d13b      	bne.n	80043a6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800432e:	2301      	movs	r3, #1
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
 8004332:	e02b      	b.n	800438c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004348:	4613      	mov	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	3340      	adds	r3, #64	; 0x40
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d115      	bne.n	8004386 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800435a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800435c:	2b00      	cmp	r3, #0
 800435e:	da12      	bge.n	8004386 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	4613      	mov	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	333f      	adds	r3, #63	; 0x3f
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800437c:	b2db      	uxtb	r3, r3
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fae8 	bl	8004956 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	3301      	adds	r3, #1
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004392:	429a      	cmp	r2, r3
 8004394:	d3ce      	bcc.n	8004334 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80043a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f004 f862 	bl	8008474 <USB_ReadInterrupts>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ba:	d155      	bne.n	8004468 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043bc:	2301      	movs	r3, #1
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	e045      	b.n	800444e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d12e      	bne.n	8004448 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da2b      	bge.n	8004448 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80043fc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004400:	429a      	cmp	r2, r3
 8004402:	d121      	bne.n	8004448 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004416:	2201      	movs	r2, #1
 8004418:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004444:	6053      	str	r3, [r2, #4]
            break;
 8004446:	e007      	b.n	8004458 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	3301      	adds	r3, #1
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004454:	429a      	cmp	r2, r3
 8004456:	d3b4      	bcc.n	80043c2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f004 f801 	bl	8008474 <USB_ReadInterrupts>
 8004472:	4603      	mov	r3, r0
 8004474:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447c:	d10a      	bne.n	8004494 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f006 fc54 	bl	800ad2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004492:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f003 ffeb 	bl	8008474 <USB_ReadInterrupts>
 800449e:	4603      	mov	r3, r0
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d115      	bne.n	80044d4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f006 fc44 	bl	800ad48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	e000      	b.n	80044d4 <HAL_PCD_IRQHandler+0x938>
      return;
 80044d2:	bf00      	nop
    }
  }
}
 80044d4:	3734      	adds	r7, #52	; 0x34
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd90      	pop	{r4, r7, pc}

080044da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	460b      	mov	r3, r1
 80044e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_PCD_SetAddress+0x1a>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e013      	b.n	800451c <HAL_PCD_SetAddress+0x42>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f003 ff49 	bl	80083a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	4608      	mov	r0, r1
 800452e:	4611      	mov	r1, r2
 8004530:	461a      	mov	r2, r3
 8004532:	4603      	mov	r3, r0
 8004534:	70fb      	strb	r3, [r7, #3]
 8004536:	460b      	mov	r3, r1
 8004538:	803b      	strh	r3, [r7, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004546:	2b00      	cmp	r3, #0
 8004548:	da0f      	bge.n	800456a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	f003 020f 	and.w	r2, r3, #15
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	3338      	adds	r3, #56	; 0x38
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	3304      	adds	r3, #4
 8004560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	705a      	strb	r2, [r3, #1]
 8004568:	e00f      	b.n	800458a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4413      	add	r3, r2
 8004580:	3304      	adds	r3, #4
 8004582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004596:	883a      	ldrh	r2, [r7, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	78ba      	ldrb	r2, [r7, #2]
 80045a0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045b4:	78bb      	ldrb	r3, [r7, #2]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d102      	bne.n	80045c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_PCD_EP_Open+0xaa>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e00e      	b.n	80045ec <HAL_PCD_EP_Open+0xc8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	4618      	mov	r0, r3
 80045de:	f002 ffc9 	bl	8007574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80045ea:	7afb      	ldrb	r3, [r7, #11]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004604:	2b00      	cmp	r3, #0
 8004606:	da0f      	bge.n	8004628 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	f003 020f 	and.w	r2, r3, #15
 800460e:	4613      	mov	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	3338      	adds	r3, #56	; 0x38
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	3304      	adds	r3, #4
 800461e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	705a      	strb	r2, [r3, #1]
 8004626:	e00f      	b.n	8004648 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	f003 020f 	and.w	r2, r3, #15
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	3304      	adds	r3, #4
 8004640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	b2da      	uxtb	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_PCD_EP_Close+0x6e>
 800465e:	2302      	movs	r3, #2
 8004660:	e00e      	b.n	8004680 <HAL_PCD_EP_Close+0x8c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	4618      	mov	r0, r3
 8004672:	f003 f807 	bl	8007684 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	460b      	mov	r3, r1
 8004696:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004698:	7afb      	ldrb	r3, [r7, #11]
 800469a:	f003 020f 	and.w	r2, r3, #15
 800469e:	4613      	mov	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4413      	add	r3, r2
 80046ae:	3304      	adds	r3, #4
 80046b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2200      	movs	r2, #0
 80046c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ca:	7afb      	ldrb	r3, [r7, #11]
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d102      	bne.n	80046e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046e4:	7afb      	ldrb	r3, [r7, #11]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	6979      	ldr	r1, [r7, #20]
 80046fc:	f003 fae6 	bl	8007ccc <USB_EP0StartXfer>
 8004700:	e008      	b.n	8004714 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	6979      	ldr	r1, [r7, #20]
 8004710:	f003 f894 	bl	800783c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004740:	681b      	ldr	r3, [r3, #0]
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
 800475a:	460b      	mov	r3, r1
 800475c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800475e:	7afb      	ldrb	r3, [r7, #11]
 8004760:	f003 020f 	and.w	r2, r3, #15
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	3338      	adds	r3, #56	; 0x38
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	3304      	adds	r3, #4
 8004774:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2200      	movs	r2, #0
 8004786:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2201      	movs	r2, #1
 800478c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800478e:	7afb      	ldrb	r3, [r7, #11]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	b2da      	uxtb	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d102      	bne.n	80047a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	6979      	ldr	r1, [r7, #20]
 80047c0:	f003 fa84 	bl	8007ccc <USB_EP0StartXfer>
 80047c4:	e008      	b.n	80047d8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	6979      	ldr	r1, [r7, #20]
 80047d4:	f003 f832 	bl	800783c <USB_EPStartXfer>
  }

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	f003 020f 	and.w	r2, r3, #15
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d901      	bls.n	8004800 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e050      	b.n	80048a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004804:	2b00      	cmp	r3, #0
 8004806:	da0f      	bge.n	8004828 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	f003 020f 	and.w	r2, r3, #15
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	3338      	adds	r3, #56	; 0x38
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4413      	add	r3, r2
 800481c:	3304      	adds	r3, #4
 800481e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	705a      	strb	r2, [r3, #1]
 8004826:	e00d      	b.n	8004844 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	4413      	add	r3, r2
 800483a:	3304      	adds	r3, #4
 800483c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_PCD_EP_SetStall+0x82>
 8004860:	2302      	movs	r3, #2
 8004862:	e01e      	b.n	80048a2 <HAL_PCD_EP_SetStall+0xc0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	4618      	mov	r0, r3
 8004874:	f003 fcc2 	bl	80081fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	b2d9      	uxtb	r1, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004892:	461a      	mov	r2, r3
 8004894:	f003 feb2 	bl	80085fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	f003 020f 	and.w	r2, r3, #15
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d901      	bls.n	80048c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e042      	b.n	800494e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	da0f      	bge.n	80048f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	f003 020f 	and.w	r2, r3, #15
 80048d6:	4613      	mov	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	3338      	adds	r3, #56	; 0x38
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	3304      	adds	r3, #4
 80048e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	705a      	strb	r2, [r3, #1]
 80048ee:	e00f      	b.n	8004910 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	f003 020f 	and.w	r2, r3, #15
 80048f6:	4613      	mov	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	4413      	add	r3, r2
 8004906:	3304      	adds	r3, #4
 8004908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	b2da      	uxtb	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_PCD_EP_ClrStall+0x86>
 800492c:	2302      	movs	r3, #2
 800492e:	e00e      	b.n	800494e <HAL_PCD_EP_ClrStall+0xa4>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68f9      	ldr	r1, [r7, #12]
 800493e:	4618      	mov	r0, r3
 8004940:	f003 fcca 	bl	80082d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004966:	2b00      	cmp	r3, #0
 8004968:	da0c      	bge.n	8004984 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	f003 020f 	and.w	r2, r3, #15
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	3338      	adds	r3, #56	; 0x38
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	3304      	adds	r3, #4
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	e00c      	b.n	800499e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	f003 020f 	and.w	r2, r3, #15
 800498a:	4613      	mov	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	3304      	adds	r3, #4
 800499c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68f9      	ldr	r1, [r7, #12]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f003 fae9 	bl	8007f7c <USB_EPStopXfer>
 80049aa:	4603      	mov	r3, r0
 80049ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80049ae:	7afb      	ldrb	r3, [r7, #11]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	3338      	adds	r3, #56	; 0x38
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	3304      	adds	r3, #4
 80049de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a1a      	ldr	r2, [r3, #32]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d901      	bls.n	80049f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e06c      	b.n	8004aca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d902      	bls.n	8004a0c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3303      	adds	r3, #3
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a14:	e02b      	b.n	8004a6e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d902      	bls.n	8004a32 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3303      	adds	r3, #3
 8004a36:	089b      	lsrs	r3, r3, #2
 8004a38:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6919      	ldr	r1, [r3, #16]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	4603      	mov	r3, r0
 8004a50:	6978      	ldr	r0, [r7, #20]
 8004a52:	f003 fb3d 	bl	80080d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	441a      	add	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1a      	ldr	r2, [r3, #32]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	441a      	add	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d809      	bhi.n	8004a98 <PCD_WriteEmptyTxFifo+0xe0>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a1a      	ldr	r2, [r3, #32]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d203      	bcs.n	8004a98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1be      	bne.n	8004a16 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d811      	bhi.n	8004ac8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	2201      	movs	r2, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	6939      	ldr	r1, [r7, #16]
 8004ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3720      	adds	r7, #32
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	333c      	adds	r3, #60	; 0x3c
 8004aec:	3304      	adds	r3, #4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d17b      	bne.n	8004c02 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d015      	beq.n	8004b40 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	4a61      	ldr	r2, [pc, #388]	; (8004c9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	f240 80b9 	bls.w	8004c90 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80b3 	beq.w	8004c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b36:	461a      	mov	r2, r3
 8004b38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b3c:	6093      	str	r3, [r2, #8]
 8004b3e:	e0a7      	b.n	8004c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	461a      	mov	r2, r3
 8004b58:	2320      	movs	r3, #32
 8004b5a:	6093      	str	r3, [r2, #8]
 8004b5c:	e098      	b.n	8004c90 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f040 8093 	bne.w	8004c90 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4a4b      	ldr	r2, [pc, #300]	; (8004c9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d90f      	bls.n	8004b92 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8e:	6093      	str	r3, [r2, #8]
 8004b90:	e07e      	b.n	8004c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	0159      	lsls	r1, r3, #5
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	440b      	add	r3, r1
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d114      	bne.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2101      	movs	r1, #1
 8004be0:	f003 fd0c 	bl	80085fc <USB_EP0_OutStart>
 8004be4:	e006      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	441a      	add	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f005 ffd2 	bl	800aba4 <HAL_PCD_DataOutStageCallback>
 8004c00:	e046      	b.n	8004c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d124      	bne.n	8004c54 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	461a      	mov	r2, r3
 8004c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c26:	6093      	str	r3, [r2, #8]
 8004c28:	e032      	b.n	8004c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	461a      	mov	r2, r3
 8004c42:	2320      	movs	r3, #32
 8004c44:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f005 ffa9 	bl	800aba4 <HAL_PCD_DataOutStageCallback>
 8004c52:	e01d      	b.n	8004c90 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d114      	bne.n	8004c84 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2100      	movs	r1, #0
 8004c80:	f003 fcbc 	bl	80085fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f005 ff8a 	bl	800aba4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	4f54300a 	.word	0x4f54300a
 8004ca0:	4f54310a 	.word	0x4f54310a

08004ca4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	333c      	adds	r3, #60	; 0x3c
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <PCD_EP_OutSetupPacket_int+0x88>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d90e      	bls.n	8004cf8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f005 ff41 	bl	800ab80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <PCD_EP_OutSetupPacket_int+0x88>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d90c      	bls.n	8004d20 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d108      	bne.n	8004d20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	f003 fc6e 	bl	80085fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	4f54300a 	.word	0x4f54300a

08004d30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d107      	bne.n	8004d5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d4e:	883b      	ldrh	r3, [r7, #0]
 8004d50:	0419      	lsls	r1, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d5c:	e028      	b.n	8004db0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4413      	add	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	73fb      	strb	r3, [r7, #15]
 8004d70:	e00d      	b.n	8004d8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	3340      	adds	r3, #64	; 0x40
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4413      	add	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	7bfa      	ldrb	r2, [r7, #15]
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3ec      	bcc.n	8004d72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d98:	883b      	ldrh	r3, [r7, #0]
 8004d9a:	0418      	lsls	r0, r3, #16
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	4302      	orrs	r2, r0
 8004da8:	3340      	adds	r3, #64	; 0x40
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e267      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d075      	beq.n	8004f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e16:	4b88      	ldr	r3, [pc, #544]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d00c      	beq.n	8004e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e22:	4b85      	ldr	r3, [pc, #532]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d112      	bne.n	8004e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e2e:	4b82      	ldr	r3, [pc, #520]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3a:	d10b      	bne.n	8004e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3c:	4b7e      	ldr	r3, [pc, #504]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d05b      	beq.n	8004f00 <HAL_RCC_OscConfig+0x108>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d157      	bne.n	8004f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e242      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5c:	d106      	bne.n	8004e6c <HAL_RCC_OscConfig+0x74>
 8004e5e:	4b76      	ldr	r3, [pc, #472]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a75      	ldr	r2, [pc, #468]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e01d      	b.n	8004ea8 <HAL_RCC_OscConfig+0xb0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x98>
 8004e76:	4b70      	ldr	r3, [pc, #448]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6f      	ldr	r2, [pc, #444]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	4b6d      	ldr	r3, [pc, #436]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a6c      	ldr	r2, [pc, #432]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e00b      	b.n	8004ea8 <HAL_RCC_OscConfig+0xb0>
 8004e90:	4b69      	ldr	r3, [pc, #420]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a68      	ldr	r2, [pc, #416]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	4b66      	ldr	r3, [pc, #408]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a65      	ldr	r2, [pc, #404]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d013      	beq.n	8004ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fd fa26 	bl	8002300 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb8:	f7fd fa22 	bl	8002300 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b64      	cmp	r3, #100	; 0x64
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e207      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	4b5b      	ldr	r3, [pc, #364]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0xc0>
 8004ed6:	e014      	b.n	8004f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fd fa12 	bl	8002300 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee0:	f7fd fa0e 	bl	8002300 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	; 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e1f3      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef2:	4b51      	ldr	r3, [pc, #324]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0xe8>
 8004efe:	e000      	b.n	8004f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d063      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f0e:	4b4a      	ldr	r3, [pc, #296]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1a:	4b47      	ldr	r3, [pc, #284]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d11c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f26:	4b44      	ldr	r3, [pc, #272]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d116      	bne.n	8004f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f32:	4b41      	ldr	r3, [pc, #260]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_RCC_OscConfig+0x152>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d001      	beq.n	8004f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e1c7      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4a:	4b3b      	ldr	r3, [pc, #236]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4937      	ldr	r1, [pc, #220]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5e:	e03a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d020      	beq.n	8004faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f68:	4b34      	ldr	r3, [pc, #208]	; (800503c <HAL_RCC_OscConfig+0x244>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6e:	f7fd f9c7 	bl	8002300 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f76:	f7fd f9c3 	bl	8002300 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e1a8      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f88:	4b2b      	ldr	r3, [pc, #172]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f94:	4b28      	ldr	r3, [pc, #160]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4925      	ldr	r1, [pc, #148]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]
 8004fa8:	e015      	b.n	8004fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_RCC_OscConfig+0x244>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fd f9a6 	bl	8002300 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb8:	f7fd f9a2 	bl	8002300 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e187      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d036      	beq.n	8005050 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d016      	beq.n	8005018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <HAL_RCC_OscConfig+0x248>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff0:	f7fd f986 	bl	8002300 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff8:	f7fd f982 	bl	8002300 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e167      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500a:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <HAL_RCC_OscConfig+0x240>)
 800500c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x200>
 8005016:	e01b      	b.n	8005050 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005018:	4b09      	ldr	r3, [pc, #36]	; (8005040 <HAL_RCC_OscConfig+0x248>)
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501e:	f7fd f96f 	bl	8002300 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005024:	e00e      	b.n	8005044 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005026:	f7fd f96b 	bl	8002300 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d907      	bls.n	8005044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e150      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
 8005038:	40023800 	.word	0x40023800
 800503c:	42470000 	.word	0x42470000
 8005040:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005044:	4b88      	ldr	r3, [pc, #544]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1ea      	bne.n	8005026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8097 	beq.w	800518c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800505e:	2300      	movs	r3, #0
 8005060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005062:	4b81      	ldr	r3, [pc, #516]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10f      	bne.n	800508e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	4b7d      	ldr	r3, [pc, #500]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	4a7c      	ldr	r2, [pc, #496]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507c:	6413      	str	r3, [r2, #64]	; 0x40
 800507e:	4b7a      	ldr	r3, [pc, #488]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508e:	4b77      	ldr	r3, [pc, #476]	; (800526c <HAL_RCC_OscConfig+0x474>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d118      	bne.n	80050cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800509a:	4b74      	ldr	r3, [pc, #464]	; (800526c <HAL_RCC_OscConfig+0x474>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a73      	ldr	r2, [pc, #460]	; (800526c <HAL_RCC_OscConfig+0x474>)
 80050a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a6:	f7fd f92b 	bl	8002300 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ae:	f7fd f927 	bl	8002300 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e10c      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c0:	4b6a      	ldr	r3, [pc, #424]	; (800526c <HAL_RCC_OscConfig+0x474>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d106      	bne.n	80050e2 <HAL_RCC_OscConfig+0x2ea>
 80050d4:	4b64      	ldr	r3, [pc, #400]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	4a63      	ldr	r2, [pc, #396]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	6713      	str	r3, [r2, #112]	; 0x70
 80050e0:	e01c      	b.n	800511c <HAL_RCC_OscConfig+0x324>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b05      	cmp	r3, #5
 80050e8:	d10c      	bne.n	8005104 <HAL_RCC_OscConfig+0x30c>
 80050ea:	4b5f      	ldr	r3, [pc, #380]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	4a5e      	ldr	r2, [pc, #376]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 80050f0:	f043 0304 	orr.w	r3, r3, #4
 80050f4:	6713      	str	r3, [r2, #112]	; 0x70
 80050f6:	4b5c      	ldr	r3, [pc, #368]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a5b      	ldr	r2, [pc, #364]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	6713      	str	r3, [r2, #112]	; 0x70
 8005102:	e00b      	b.n	800511c <HAL_RCC_OscConfig+0x324>
 8005104:	4b58      	ldr	r3, [pc, #352]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	4a57      	ldr	r2, [pc, #348]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	6713      	str	r3, [r2, #112]	; 0x70
 8005110:	4b55      	ldr	r3, [pc, #340]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	4a54      	ldr	r2, [pc, #336]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005116:	f023 0304 	bic.w	r3, r3, #4
 800511a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d015      	beq.n	8005150 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fd f8ec 	bl	8002300 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512a:	e00a      	b.n	8005142 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512c:	f7fd f8e8 	bl	8002300 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e0cb      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005142:	4b49      	ldr	r3, [pc, #292]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0ee      	beq.n	800512c <HAL_RCC_OscConfig+0x334>
 800514e:	e014      	b.n	800517a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005150:	f7fd f8d6 	bl	8002300 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005156:	e00a      	b.n	800516e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005158:	f7fd f8d2 	bl	8002300 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	; 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e0b5      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800516e:	4b3e      	ldr	r3, [pc, #248]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1ee      	bne.n	8005158 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005180:	4b39      	ldr	r3, [pc, #228]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	4a38      	ldr	r2, [pc, #224]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800518a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80a1 	beq.w	80052d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005196:	4b34      	ldr	r3, [pc, #208]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d05c      	beq.n	800525c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d141      	bne.n	800522e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051aa:	4b31      	ldr	r3, [pc, #196]	; (8005270 <HAL_RCC_OscConfig+0x478>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fd f8a6 	bl	8002300 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b8:	f7fd f8a2 	bl	8002300 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e087      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ca:	4b27      	ldr	r3, [pc, #156]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69da      	ldr	r2, [r3, #28]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	019b      	lsls	r3, r3, #6
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	3b01      	subs	r3, #1
 80051f0:	041b      	lsls	r3, r3, #16
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	061b      	lsls	r3, r3, #24
 80051fa:	491b      	ldr	r1, [pc, #108]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005200:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <HAL_RCC_OscConfig+0x478>)
 8005202:	2201      	movs	r2, #1
 8005204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005206:	f7fd f87b 	bl	8002300 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520e:	f7fd f877 	bl	8002300 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e05c      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0x416>
 800522c:	e054      	b.n	80052d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <HAL_RCC_OscConfig+0x478>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005234:	f7fd f864 	bl	8002300 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523c:	f7fd f860 	bl	8002300 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e045      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	4b06      	ldr	r3, [pc, #24]	; (8005268 <HAL_RCC_OscConfig+0x470>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x444>
 800525a:	e03d      	b.n	80052d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d107      	bne.n	8005274 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e038      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
 8005268:	40023800 	.word	0x40023800
 800526c:	40007000 	.word	0x40007000
 8005270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005274:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <HAL_RCC_OscConfig+0x4ec>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d028      	beq.n	80052d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528c:	429a      	cmp	r2, r3
 800528e:	d121      	bne.n	80052d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d11a      	bne.n	80052d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052a4:	4013      	ands	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d111      	bne.n	80052d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	3b01      	subs	r3, #1
 80052be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d107      	bne.n	80052d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800

080052e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0cc      	b.n	8005496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052fc:	4b68      	ldr	r3, [pc, #416]	; (80054a0 <HAL_RCC_ClockConfig+0x1b8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d90c      	bls.n	8005324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800530a:	4b65      	ldr	r3, [pc, #404]	; (80054a0 <HAL_RCC_ClockConfig+0x1b8>)
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005312:	4b63      	ldr	r3, [pc, #396]	; (80054a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	429a      	cmp	r2, r3
 800531e:	d001      	beq.n	8005324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0b8      	b.n	8005496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d020      	beq.n	8005372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800533c:	4b59      	ldr	r3, [pc, #356]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4a58      	ldr	r2, [pc, #352]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005354:	4b53      	ldr	r3, [pc, #332]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4a52      	ldr	r2, [pc, #328]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800535e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005360:	4b50      	ldr	r3, [pc, #320]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	494d      	ldr	r1, [pc, #308]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d044      	beq.n	8005408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005386:	4b47      	ldr	r3, [pc, #284]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d119      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e07f      	b.n	8005496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d003      	beq.n	80053a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d107      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a6:	4b3f      	ldr	r3, [pc, #252]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e06f      	b.n	8005496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b6:	4b3b      	ldr	r3, [pc, #236]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e067      	b.n	8005496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053c6:	4b37      	ldr	r3, [pc, #220]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f023 0203 	bic.w	r2, r3, #3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	4934      	ldr	r1, [pc, #208]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053d8:	f7fc ff92 	bl	8002300 <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053de:	e00a      	b.n	80053f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e0:	f7fc ff8e 	bl	8002300 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e04f      	b.n	8005496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f6:	4b2b      	ldr	r3, [pc, #172]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 020c 	and.w	r2, r3, #12
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	429a      	cmp	r2, r3
 8005406:	d1eb      	bne.n	80053e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005408:	4b25      	ldr	r3, [pc, #148]	; (80054a0 <HAL_RCC_ClockConfig+0x1b8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d20c      	bcs.n	8005430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005416:	4b22      	ldr	r3, [pc, #136]	; (80054a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800541e:	4b20      	ldr	r3, [pc, #128]	; (80054a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d001      	beq.n	8005430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e032      	b.n	8005496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800543c:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	4916      	ldr	r1, [pc, #88]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	4313      	orrs	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800545a:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	490e      	ldr	r1, [pc, #56]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	4313      	orrs	r3, r2
 800546c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800546e:	f000 f821 	bl	80054b4 <HAL_RCC_GetSysClockFreq>
 8005472:	4602      	mov	r2, r0
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	091b      	lsrs	r3, r3, #4
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	490a      	ldr	r1, [pc, #40]	; (80054a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005480:	5ccb      	ldrb	r3, [r1, r3]
 8005482:	fa22 f303 	lsr.w	r3, r2, r3
 8005486:	4a09      	ldr	r2, [pc, #36]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 8005488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800548a:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <HAL_RCC_ClockConfig+0x1c8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f7fc fef2 	bl	8002278 <HAL_InitTick>

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40023c00 	.word	0x40023c00
 80054a4:	40023800 	.word	0x40023800
 80054a8:	0800d220 	.word	0x0800d220
 80054ac:	20000000 	.word	0x20000000
 80054b0:	20000004 	.word	0x20000004

080054b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b8:	b094      	sub	sp, #80	; 0x50
 80054ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	647b      	str	r3, [r7, #68]	; 0x44
 80054c0:	2300      	movs	r3, #0
 80054c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c4:	2300      	movs	r3, #0
 80054c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054cc:	4b79      	ldr	r3, [pc, #484]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 030c 	and.w	r3, r3, #12
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d00d      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0x40>
 80054d8:	2b08      	cmp	r3, #8
 80054da:	f200 80e1 	bhi.w	80056a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_RCC_GetSysClockFreq+0x34>
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d003      	beq.n	80054ee <HAL_RCC_GetSysClockFreq+0x3a>
 80054e6:	e0db      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054e8:	4b73      	ldr	r3, [pc, #460]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054ec:	e0db      	b.n	80056a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054ee:	4b73      	ldr	r3, [pc, #460]	; (80056bc <HAL_RCC_GetSysClockFreq+0x208>)
 80054f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054f2:	e0d8      	b.n	80056a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054f4:	4b6f      	ldr	r3, [pc, #444]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054fe:	4b6d      	ldr	r3, [pc, #436]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d063      	beq.n	80055d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800550a:	4b6a      	ldr	r3, [pc, #424]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	099b      	lsrs	r3, r3, #6
 8005510:	2200      	movs	r2, #0
 8005512:	63bb      	str	r3, [r7, #56]	; 0x38
 8005514:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551c:	633b      	str	r3, [r7, #48]	; 0x30
 800551e:	2300      	movs	r3, #0
 8005520:	637b      	str	r3, [r7, #52]	; 0x34
 8005522:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005526:	4622      	mov	r2, r4
 8005528:	462b      	mov	r3, r5
 800552a:	f04f 0000 	mov.w	r0, #0
 800552e:	f04f 0100 	mov.w	r1, #0
 8005532:	0159      	lsls	r1, r3, #5
 8005534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005538:	0150      	lsls	r0, r2, #5
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4621      	mov	r1, r4
 8005540:	1a51      	subs	r1, r2, r1
 8005542:	6139      	str	r1, [r7, #16]
 8005544:	4629      	mov	r1, r5
 8005546:	eb63 0301 	sbc.w	r3, r3, r1
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005558:	4659      	mov	r1, fp
 800555a:	018b      	lsls	r3, r1, #6
 800555c:	4651      	mov	r1, sl
 800555e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005562:	4651      	mov	r1, sl
 8005564:	018a      	lsls	r2, r1, #6
 8005566:	4651      	mov	r1, sl
 8005568:	ebb2 0801 	subs.w	r8, r2, r1
 800556c:	4659      	mov	r1, fp
 800556e:	eb63 0901 	sbc.w	r9, r3, r1
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800557e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005586:	4690      	mov	r8, r2
 8005588:	4699      	mov	r9, r3
 800558a:	4623      	mov	r3, r4
 800558c:	eb18 0303 	adds.w	r3, r8, r3
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	462b      	mov	r3, r5
 8005594:	eb49 0303 	adc.w	r3, r9, r3
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055a6:	4629      	mov	r1, r5
 80055a8:	024b      	lsls	r3, r1, #9
 80055aa:	4621      	mov	r1, r4
 80055ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055b0:	4621      	mov	r1, r4
 80055b2:	024a      	lsls	r2, r1, #9
 80055b4:	4610      	mov	r0, r2
 80055b6:	4619      	mov	r1, r3
 80055b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ba:	2200      	movs	r2, #0
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80055be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055c4:	f7fb fb10 	bl	8000be8 <__aeabi_uldivmod>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4613      	mov	r3, r2
 80055ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d0:	e058      	b.n	8005684 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055d2:	4b38      	ldr	r3, [pc, #224]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	099b      	lsrs	r3, r3, #6
 80055d8:	2200      	movs	r2, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	4611      	mov	r1, r2
 80055de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	2300      	movs	r3, #0
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
 80055e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055ec:	4642      	mov	r2, r8
 80055ee:	464b      	mov	r3, r9
 80055f0:	f04f 0000 	mov.w	r0, #0
 80055f4:	f04f 0100 	mov.w	r1, #0
 80055f8:	0159      	lsls	r1, r3, #5
 80055fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055fe:	0150      	lsls	r0, r2, #5
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4641      	mov	r1, r8
 8005606:	ebb2 0a01 	subs.w	sl, r2, r1
 800560a:	4649      	mov	r1, r9
 800560c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800561c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005620:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005624:	ebb2 040a 	subs.w	r4, r2, sl
 8005628:	eb63 050b 	sbc.w	r5, r3, fp
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	00eb      	lsls	r3, r5, #3
 8005636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800563a:	00e2      	lsls	r2, r4, #3
 800563c:	4614      	mov	r4, r2
 800563e:	461d      	mov	r5, r3
 8005640:	4643      	mov	r3, r8
 8005642:	18e3      	adds	r3, r4, r3
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	464b      	mov	r3, r9
 8005648:	eb45 0303 	adc.w	r3, r5, r3
 800564c:	607b      	str	r3, [r7, #4]
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800565a:	4629      	mov	r1, r5
 800565c:	028b      	lsls	r3, r1, #10
 800565e:	4621      	mov	r1, r4
 8005660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005664:	4621      	mov	r1, r4
 8005666:	028a      	lsls	r2, r1, #10
 8005668:	4610      	mov	r0, r2
 800566a:	4619      	mov	r1, r3
 800566c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566e:	2200      	movs	r2, #0
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	61fa      	str	r2, [r7, #28]
 8005674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005678:	f7fb fab6 	bl	8000be8 <__aeabi_uldivmod>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4613      	mov	r3, r2
 8005682:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005684:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	3301      	adds	r3, #1
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005698:	fbb2 f3f3 	udiv	r3, r2, r3
 800569c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800569e:	e002      	b.n	80056a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056a0:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80056a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3750      	adds	r7, #80	; 0x50
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b2:	bf00      	nop
 80056b4:	40023800 	.word	0x40023800
 80056b8:	00f42400 	.word	0x00f42400
 80056bc:	007a1200 	.word	0x007a1200

080056c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056c4:	4b03      	ldr	r3, [pc, #12]	; (80056d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056c6:	681b      	ldr	r3, [r3, #0]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000000 	.word	0x20000000

080056d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056dc:	f7ff fff0 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 80056e0:	4602      	mov	r2, r0
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	0a9b      	lsrs	r3, r3, #10
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	4903      	ldr	r1, [pc, #12]	; (80056fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ee:	5ccb      	ldrb	r3, [r1, r3]
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40023800 	.word	0x40023800
 80056fc:	0800d230 	.word	0x0800d230

08005700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e07b      	b.n	800580a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	2b00      	cmp	r3, #0
 8005718:	d108      	bne.n	800572c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005722:	d009      	beq.n	8005738 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	61da      	str	r2, [r3, #28]
 800572a:	e005      	b.n	8005738 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fc fbac 	bl	8001eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057bc:	ea42 0103 	orr.w	r1, r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	f003 0104 	and.w	r1, r3, #4
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	f003 0210 	and.w	r2, r3, #16
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e01a      	b.n	800585a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7fc fb7f 	bl	8001f40 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b08c      	sub	sp, #48	; 0x30
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005870:	2301      	movs	r3, #1
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x26>
 8005884:	2302      	movs	r3, #2
 8005886:	e18a      	b.n	8005b9e <HAL_SPI_TransmitReceive+0x33c>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005890:	f7fc fd36 	bl	8002300 <HAL_GetTick>
 8005894:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800589c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058a6:	887b      	ldrh	r3, [r7, #2]
 80058a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d00f      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x70>
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b8:	d107      	bne.n	80058ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d103      	bne.n	80058ca <HAL_SPI_TransmitReceive+0x68>
 80058c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d003      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058ca:	2302      	movs	r3, #2
 80058cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058d0:	e15b      	b.n	8005b8a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_SPI_TransmitReceive+0x82>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_SPI_TransmitReceive+0x82>
 80058de:	887b      	ldrh	r3, [r7, #2]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d103      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058ea:	e14e      	b.n	8005b8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d003      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2205      	movs	r2, #5
 80058fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	887a      	ldrh	r2, [r7, #2]
 8005910:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	887a      	ldrh	r2, [r7, #2]
 8005916:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	887a      	ldrh	r2, [r7, #2]
 8005922:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	887a      	ldrh	r2, [r7, #2]
 8005928:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d007      	beq.n	8005954 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800595c:	d178      	bne.n	8005a50 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <HAL_SPI_TransmitReceive+0x10a>
 8005966:	8b7b      	ldrh	r3, [r7, #26]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d166      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	881a      	ldrh	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	1c9a      	adds	r2, r3, #2
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005990:	e053      	b.n	8005a3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b02      	cmp	r3, #2
 800599e:	d11b      	bne.n	80059d8 <HAL_SPI_TransmitReceive+0x176>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d016      	beq.n	80059d8 <HAL_SPI_TransmitReceive+0x176>
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d113      	bne.n	80059d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	881a      	ldrh	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	1c9a      	adds	r2, r3, #2
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d119      	bne.n	8005a1a <HAL_SPI_TransmitReceive+0x1b8>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d014      	beq.n	8005a1a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	b292      	uxth	r2, r2
 80059fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	1c9a      	adds	r2, r3, #2
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a16:	2301      	movs	r3, #1
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a1a:	f7fc fc71 	bl	8002300 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d807      	bhi.n	8005a3a <HAL_SPI_TransmitReceive+0x1d8>
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d003      	beq.n	8005a3a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a38:	e0a7      	b.n	8005b8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1a6      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x130>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1a1      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x130>
 8005a4e:	e07c      	b.n	8005b4a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_SPI_TransmitReceive+0x1fc>
 8005a58:	8b7b      	ldrh	r3, [r7, #26]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d16b      	bne.n	8005b36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	7812      	ldrb	r2, [r2, #0]
 8005a6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a84:	e057      	b.n	8005b36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d11c      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x26c>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d017      	beq.n	8005ace <HAL_SPI_TransmitReceive+0x26c>
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d114      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	7812      	ldrb	r2, [r2, #0]
 8005ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d119      	bne.n	8005b10 <HAL_SPI_TransmitReceive+0x2ae>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d014      	beq.n	8005b10 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b10:	f7fc fbf6 	bl	8002300 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d803      	bhi.n	8005b28 <HAL_SPI_TransmitReceive+0x2c6>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b26:	d102      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x2cc>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d103      	bne.n	8005b36 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b34:	e029      	b.n	8005b8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1a2      	bne.n	8005a86 <HAL_SPI_TransmitReceive+0x224>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d19d      	bne.n	8005a86 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f8b2 	bl	8005cb8 <SPI_EndRxTxTransaction>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d006      	beq.n	8005b68 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b66:	e010      	b.n	8005b8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	e000      	b.n	8005b8a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3730      	adds	r7, #48	; 0x30
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bb8:	f7fc fba2 	bl	8002300 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bc8:	f7fc fb9a 	bl	8002300 <HAL_GetTick>
 8005bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bce:	4b39      	ldr	r3, [pc, #228]	; (8005cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	015b      	lsls	r3, r3, #5
 8005bd4:	0d1b      	lsrs	r3, r3, #20
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	fb02 f303 	mul.w	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bde:	e054      	b.n	8005c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be6:	d050      	beq.n	8005c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005be8:	f7fc fb8a 	bl	8002300 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d902      	bls.n	8005bfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d13d      	bne.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c16:	d111      	bne.n	8005c3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c20:	d004      	beq.n	8005c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2a:	d107      	bne.n	8005c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c44:	d10f      	bne.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e017      	b.n	8005caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4013      	ands	r3, r2
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	bf0c      	ite	eq
 8005c9a:	2301      	moveq	r3, #1
 8005c9c:	2300      	movne	r3, #0
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	79fb      	ldrb	r3, [r7, #7]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d19b      	bne.n	8005be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3720      	adds	r7, #32
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000000 	.word	0x20000000

08005cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <SPI_EndRxTxTransaction+0x7c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <SPI_EndRxTxTransaction+0x80>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	0d5b      	lsrs	r3, r3, #21
 8005cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cd4:	fb02 f303 	mul.w	r3, r2, r3
 8005cd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ce2:	d112      	bne.n	8005d0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff ff5a 	bl	8005ba8 <SPI_WaitFlagStateUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d016      	beq.n	8005d28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	f043 0220 	orr.w	r2, r3, #32
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e00f      	b.n	8005d2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d20:	2b80      	cmp	r3, #128	; 0x80
 8005d22:	d0f2      	beq.n	8005d0a <SPI_EndRxTxTransaction+0x52>
 8005d24:	e000      	b.n	8005d28 <SPI_EndRxTxTransaction+0x70>
        break;
 8005d26:	bf00      	nop
  }

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000000 	.word	0x20000000
 8005d38:	165e9f81 	.word	0x165e9f81

08005d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e041      	b.n	8005dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fc f90a 	bl	8001f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f000 fce2 	bl	8006744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d001      	beq.n	8005df4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e046      	b.n	8005e82 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a23      	ldr	r2, [pc, #140]	; (8005e90 <HAL_TIM_Base_Start+0xb4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d022      	beq.n	8005e4c <HAL_TIM_Base_Start+0x70>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0e:	d01d      	beq.n	8005e4c <HAL_TIM_Base_Start+0x70>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <HAL_TIM_Base_Start+0xb8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d018      	beq.n	8005e4c <HAL_TIM_Base_Start+0x70>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1e      	ldr	r2, [pc, #120]	; (8005e98 <HAL_TIM_Base_Start+0xbc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d013      	beq.n	8005e4c <HAL_TIM_Base_Start+0x70>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1c      	ldr	r2, [pc, #112]	; (8005e9c <HAL_TIM_Base_Start+0xc0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00e      	beq.n	8005e4c <HAL_TIM_Base_Start+0x70>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <HAL_TIM_Base_Start+0xc4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d009      	beq.n	8005e4c <HAL_TIM_Base_Start+0x70>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <HAL_TIM_Base_Start+0xc8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d004      	beq.n	8005e4c <HAL_TIM_Base_Start+0x70>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <HAL_TIM_Base_Start+0xcc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d111      	bne.n	8005e70 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2b06      	cmp	r3, #6
 8005e5c:	d010      	beq.n	8005e80 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0201 	orr.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6e:	e007      	b.n	8005e80 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800
 8005e9c:	40000c00 	.word	0x40000c00
 8005ea0:	40010400 	.word	0x40010400
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40001800 	.word	0x40001800

08005eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d001      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e04e      	b.n	8005f62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a23      	ldr	r2, [pc, #140]	; (8005f70 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d022      	beq.n	8005f2c <HAL_TIM_Base_Start_IT+0x80>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d01d      	beq.n	8005f2c <HAL_TIM_Base_Start_IT+0x80>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <HAL_TIM_Base_Start_IT+0x80>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <HAL_TIM_Base_Start_IT+0x80>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <HAL_TIM_Base_Start_IT+0xd0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <HAL_TIM_Base_Start_IT+0x80>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_TIM_Base_Start_IT+0x80>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <HAL_TIM_Base_Start_IT+0x80>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a18      	ldr	r2, [pc, #96]	; (8005f88 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d111      	bne.n	8005f50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b06      	cmp	r3, #6
 8005f3c:	d010      	beq.n	8005f60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4e:	e007      	b.n	8005f60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40010000 	.word	0x40010000
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800
 8005f7c:	40000c00 	.word	0x40000c00
 8005f80:	40010400 	.word	0x40010400
 8005f84:	40014000 	.word	0x40014000
 8005f88:	40001800 	.word	0x40001800

08005f8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e041      	b.n	8006022 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f839 	bl	800602a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f000 fbba 	bl	8006744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <HAL_TIM_PWM_Start+0x24>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	bf14      	ite	ne
 800605c:	2301      	movne	r3, #1
 800605e:	2300      	moveq	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	e022      	b.n	80060aa <HAL_TIM_PWM_Start+0x6a>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b04      	cmp	r3, #4
 8006068:	d109      	bne.n	800607e <HAL_TIM_PWM_Start+0x3e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b01      	cmp	r3, #1
 8006074:	bf14      	ite	ne
 8006076:	2301      	movne	r3, #1
 8006078:	2300      	moveq	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	e015      	b.n	80060aa <HAL_TIM_PWM_Start+0x6a>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b08      	cmp	r3, #8
 8006082:	d109      	bne.n	8006098 <HAL_TIM_PWM_Start+0x58>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b01      	cmp	r3, #1
 800608e:	bf14      	ite	ne
 8006090:	2301      	movne	r3, #1
 8006092:	2300      	moveq	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	e008      	b.n	80060aa <HAL_TIM_PWM_Start+0x6a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	bf14      	ite	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	2300      	moveq	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e07c      	b.n	80061ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <HAL_TIM_PWM_Start+0x82>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c0:	e013      	b.n	80060ea <HAL_TIM_PWM_Start+0xaa>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d104      	bne.n	80060d2 <HAL_TIM_PWM_Start+0x92>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d0:	e00b      	b.n	80060ea <HAL_TIM_PWM_Start+0xaa>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d104      	bne.n	80060e2 <HAL_TIM_PWM_Start+0xa2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e0:	e003      	b.n	80060ea <HAL_TIM_PWM_Start+0xaa>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2201      	movs	r2, #1
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fe10 	bl	8006d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <HAL_TIM_PWM_Start+0x174>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d004      	beq.n	800610c <HAL_TIM_PWM_Start+0xcc>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a2c      	ldr	r2, [pc, #176]	; (80061b8 <HAL_TIM_PWM_Start+0x178>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d101      	bne.n	8006110 <HAL_TIM_PWM_Start+0xd0>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <HAL_TIM_PWM_Start+0xd2>
 8006110:	2300      	movs	r3, #0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a22      	ldr	r2, [pc, #136]	; (80061b4 <HAL_TIM_PWM_Start+0x174>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d022      	beq.n	8006176 <HAL_TIM_PWM_Start+0x136>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006138:	d01d      	beq.n	8006176 <HAL_TIM_PWM_Start+0x136>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <HAL_TIM_PWM_Start+0x17c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d018      	beq.n	8006176 <HAL_TIM_PWM_Start+0x136>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1d      	ldr	r2, [pc, #116]	; (80061c0 <HAL_TIM_PWM_Start+0x180>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <HAL_TIM_PWM_Start+0x136>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1c      	ldr	r2, [pc, #112]	; (80061c4 <HAL_TIM_PWM_Start+0x184>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00e      	beq.n	8006176 <HAL_TIM_PWM_Start+0x136>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <HAL_TIM_PWM_Start+0x178>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d009      	beq.n	8006176 <HAL_TIM_PWM_Start+0x136>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <HAL_TIM_PWM_Start+0x188>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <HAL_TIM_PWM_Start+0x136>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a16      	ldr	r2, [pc, #88]	; (80061cc <HAL_TIM_PWM_Start+0x18c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d111      	bne.n	800619a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b06      	cmp	r3, #6
 8006186:	d010      	beq.n	80061aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006198:	e007      	b.n	80061aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40010400 	.word	0x40010400
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800
 80061c4:	40000c00 	.word	0x40000c00
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40001800 	.word	0x40001800

080061d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d122      	bne.n	800622c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d11b      	bne.n	800622c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0202 	mvn.w	r2, #2
 80061fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa77 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 8006218:	e005      	b.n	8006226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa69 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fa7a 	bl	800671a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b04      	cmp	r3, #4
 8006238:	d122      	bne.n	8006280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b04      	cmp	r3, #4
 8006246:	d11b      	bne.n	8006280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0204 	mvn.w	r2, #4
 8006250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa4d 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 800626c:	e005      	b.n	800627a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa3f 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fa50 	bl	800671a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b08      	cmp	r3, #8
 800628c:	d122      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d11b      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0208 	mvn.w	r2, #8
 80062a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2204      	movs	r2, #4
 80062aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa23 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 80062c0:	e005      	b.n	80062ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa15 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fa26 	bl	800671a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0310 	and.w	r3, r3, #16
 80062de:	2b10      	cmp	r3, #16
 80062e0:	d122      	bne.n	8006328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	2b10      	cmp	r3, #16
 80062ee:	d11b      	bne.n	8006328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0210 	mvn.w	r2, #16
 80062f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2208      	movs	r2, #8
 80062fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f9f9 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 8006314:	e005      	b.n	8006322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f9eb 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f9fc 	bl	800671a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b01      	cmp	r3, #1
 8006334:	d10e      	bne.n	8006354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b01      	cmp	r3, #1
 8006342:	d107      	bne.n	8006354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0201 	mvn.w	r2, #1
 800634c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fb f872 	bl	8001438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635e:	2b80      	cmp	r3, #128	; 0x80
 8006360:	d10e      	bne.n	8006380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d107      	bne.n	8006380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fd78 	bl	8006e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d10e      	bne.n	80063ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d107      	bne.n	80063ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9c1 	bl	800672e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d10e      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d107      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0220 	mvn.w	r2, #32
 80063d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fd42 	bl	8006e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e0ae      	b.n	800655c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b0c      	cmp	r3, #12
 800640a:	f200 809f 	bhi.w	800654c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006449 	.word	0x08006449
 8006418:	0800654d 	.word	0x0800654d
 800641c:	0800654d 	.word	0x0800654d
 8006420:	0800654d 	.word	0x0800654d
 8006424:	08006489 	.word	0x08006489
 8006428:	0800654d 	.word	0x0800654d
 800642c:	0800654d 	.word	0x0800654d
 8006430:	0800654d 	.word	0x0800654d
 8006434:	080064cb 	.word	0x080064cb
 8006438:	0800654d 	.word	0x0800654d
 800643c:	0800654d 	.word	0x0800654d
 8006440:	0800654d 	.word	0x0800654d
 8006444:	0800650b 	.word	0x0800650b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fa18 	bl	8006884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0208 	orr.w	r2, r2, #8
 8006462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0204 	bic.w	r2, r2, #4
 8006472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6999      	ldr	r1, [r3, #24]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	619a      	str	r2, [r3, #24]
      break;
 8006486:	e064      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fa68 	bl	8006964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6999      	ldr	r1, [r3, #24]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	021a      	lsls	r2, r3, #8
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	619a      	str	r2, [r3, #24]
      break;
 80064c8:	e043      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fabd 	bl	8006a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0208 	orr.w	r2, r2, #8
 80064e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0204 	bic.w	r2, r2, #4
 80064f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69d9      	ldr	r1, [r3, #28]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	61da      	str	r2, [r3, #28]
      break;
 8006508:	e023      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fb11 	bl	8006b38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69d9      	ldr	r1, [r3, #28]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	021a      	lsls	r2, r3, #8
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	61da      	str	r2, [r3, #28]
      break;
 800654a:	e002      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	75fb      	strb	r3, [r7, #23]
      break;
 8006550:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_TIM_ConfigClockSource+0x1c>
 800657c:	2302      	movs	r3, #2
 800657e:	e0b4      	b.n	80066ea <HAL_TIM_ConfigClockSource+0x186>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800659e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b8:	d03e      	beq.n	8006638 <HAL_TIM_ConfigClockSource+0xd4>
 80065ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065be:	f200 8087 	bhi.w	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c6:	f000 8086 	beq.w	80066d6 <HAL_TIM_ConfigClockSource+0x172>
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	d87f      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065d0:	2b70      	cmp	r3, #112	; 0x70
 80065d2:	d01a      	beq.n	800660a <HAL_TIM_ConfigClockSource+0xa6>
 80065d4:	2b70      	cmp	r3, #112	; 0x70
 80065d6:	d87b      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065d8:	2b60      	cmp	r3, #96	; 0x60
 80065da:	d050      	beq.n	800667e <HAL_TIM_ConfigClockSource+0x11a>
 80065dc:	2b60      	cmp	r3, #96	; 0x60
 80065de:	d877      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065e0:	2b50      	cmp	r3, #80	; 0x50
 80065e2:	d03c      	beq.n	800665e <HAL_TIM_ConfigClockSource+0xfa>
 80065e4:	2b50      	cmp	r3, #80	; 0x50
 80065e6:	d873      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d058      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x13a>
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	d86f      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065f0:	2b30      	cmp	r3, #48	; 0x30
 80065f2:	d064      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x15a>
 80065f4:	2b30      	cmp	r3, #48	; 0x30
 80065f6:	d86b      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d060      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x15a>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d867      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05c      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x15a>
 8006604:	2b10      	cmp	r3, #16
 8006606:	d05a      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x15a>
 8006608:	e062      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6899      	ldr	r1, [r3, #8]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f000 fb5d 	bl	8006cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800662c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	609a      	str	r2, [r3, #8]
      break;
 8006636:	e04f      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	6899      	ldr	r1, [r3, #8]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f000 fb46 	bl	8006cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800665a:	609a      	str	r2, [r3, #8]
      break;
 800665c:	e03c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	6859      	ldr	r1, [r3, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	461a      	mov	r2, r3
 800666c:	f000 faba 	bl	8006be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2150      	movs	r1, #80	; 0x50
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fb13 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 800667c:	e02c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6859      	ldr	r1, [r3, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	461a      	mov	r2, r3
 800668c:	f000 fad9 	bl	8006c42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2160      	movs	r1, #96	; 0x60
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fb03 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 800669c:	e01c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f000 fa9a 	bl	8006be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2140      	movs	r1, #64	; 0x40
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 faf3 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 80066bc:	e00c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f000 faea 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 80066ce:	e003      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
      break;
 80066d4:	e000      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a40      	ldr	r2, [pc, #256]	; (8006858 <TIM_Base_SetConfig+0x114>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d013      	beq.n	8006784 <TIM_Base_SetConfig+0x40>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d00f      	beq.n	8006784 <TIM_Base_SetConfig+0x40>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a3d      	ldr	r2, [pc, #244]	; (800685c <TIM_Base_SetConfig+0x118>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00b      	beq.n	8006784 <TIM_Base_SetConfig+0x40>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a3c      	ldr	r2, [pc, #240]	; (8006860 <TIM_Base_SetConfig+0x11c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d007      	beq.n	8006784 <TIM_Base_SetConfig+0x40>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a3b      	ldr	r2, [pc, #236]	; (8006864 <TIM_Base_SetConfig+0x120>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_Base_SetConfig+0x40>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a3a      	ldr	r2, [pc, #232]	; (8006868 <TIM_Base_SetConfig+0x124>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d108      	bne.n	8006796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a2f      	ldr	r2, [pc, #188]	; (8006858 <TIM_Base_SetConfig+0x114>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d02b      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a4:	d027      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a2c      	ldr	r2, [pc, #176]	; (800685c <TIM_Base_SetConfig+0x118>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d023      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a2b      	ldr	r2, [pc, #172]	; (8006860 <TIM_Base_SetConfig+0x11c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d01f      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a2a      	ldr	r2, [pc, #168]	; (8006864 <TIM_Base_SetConfig+0x120>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01b      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a29      	ldr	r2, [pc, #164]	; (8006868 <TIM_Base_SetConfig+0x124>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d017      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a28      	ldr	r2, [pc, #160]	; (800686c <TIM_Base_SetConfig+0x128>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a27      	ldr	r2, [pc, #156]	; (8006870 <TIM_Base_SetConfig+0x12c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00f      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a26      	ldr	r2, [pc, #152]	; (8006874 <TIM_Base_SetConfig+0x130>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00b      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a25      	ldr	r2, [pc, #148]	; (8006878 <TIM_Base_SetConfig+0x134>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d007      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a24      	ldr	r2, [pc, #144]	; (800687c <TIM_Base_SetConfig+0x138>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_Base_SetConfig+0xb2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a23      	ldr	r2, [pc, #140]	; (8006880 <TIM_Base_SetConfig+0x13c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d108      	bne.n	8006808 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a0a      	ldr	r2, [pc, #40]	; (8006858 <TIM_Base_SetConfig+0x114>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_Base_SetConfig+0xf8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a0c      	ldr	r2, [pc, #48]	; (8006868 <TIM_Base_SetConfig+0x124>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d103      	bne.n	8006844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	615a      	str	r2, [r3, #20]
}
 800684a:	bf00      	nop
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40010400 	.word	0x40010400
 800686c:	40014000 	.word	0x40014000
 8006870:	40014400 	.word	0x40014400
 8006874:	40014800 	.word	0x40014800
 8006878:	40001800 	.word	0x40001800
 800687c:	40001c00 	.word	0x40001c00
 8006880:	40002000 	.word	0x40002000

08006884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	f023 0201 	bic.w	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f023 0302 	bic.w	r3, r3, #2
 80068cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a20      	ldr	r2, [pc, #128]	; (800695c <TIM_OC1_SetConfig+0xd8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d003      	beq.n	80068e8 <TIM_OC1_SetConfig+0x64>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a1f      	ldr	r2, [pc, #124]	; (8006960 <TIM_OC1_SetConfig+0xdc>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d10c      	bne.n	8006902 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f023 0308 	bic.w	r3, r3, #8
 80068ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f023 0304 	bic.w	r3, r3, #4
 8006900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <TIM_OC1_SetConfig+0xd8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d003      	beq.n	8006912 <TIM_OC1_SetConfig+0x8e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a14      	ldr	r2, [pc, #80]	; (8006960 <TIM_OC1_SetConfig+0xdc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d111      	bne.n	8006936 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	621a      	str	r2, [r3, #32]
}
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	40010000 	.word	0x40010000
 8006960:	40010400 	.word	0x40010400

08006964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	f023 0210 	bic.w	r2, r3, #16
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f023 0320 	bic.w	r3, r3, #32
 80069ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a22      	ldr	r2, [pc, #136]	; (8006a48 <TIM_OC2_SetConfig+0xe4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_OC2_SetConfig+0x68>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a21      	ldr	r2, [pc, #132]	; (8006a4c <TIM_OC2_SetConfig+0xe8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d10d      	bne.n	80069e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a17      	ldr	r2, [pc, #92]	; (8006a48 <TIM_OC2_SetConfig+0xe4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <TIM_OC2_SetConfig+0x94>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a16      	ldr	r2, [pc, #88]	; (8006a4c <TIM_OC2_SetConfig+0xe8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d113      	bne.n	8006a20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40010400 	.word	0x40010400

08006a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a21      	ldr	r2, [pc, #132]	; (8006b30 <TIM_OC3_SetConfig+0xe0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d003      	beq.n	8006ab6 <TIM_OC3_SetConfig+0x66>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a20      	ldr	r2, [pc, #128]	; (8006b34 <TIM_OC3_SetConfig+0xe4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d10d      	bne.n	8006ad2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <TIM_OC3_SetConfig+0xe0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_OC3_SetConfig+0x92>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a15      	ldr	r2, [pc, #84]	; (8006b34 <TIM_OC3_SetConfig+0xe4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d113      	bne.n	8006b0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	621a      	str	r2, [r3, #32]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40010400 	.word	0x40010400

08006b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	031b      	lsls	r3, r3, #12
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a12      	ldr	r2, [pc, #72]	; (8006bdc <TIM_OC4_SetConfig+0xa4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d003      	beq.n	8006ba0 <TIM_OC4_SetConfig+0x68>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a11      	ldr	r2, [pc, #68]	; (8006be0 <TIM_OC4_SetConfig+0xa8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d109      	bne.n	8006bb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	019b      	lsls	r3, r3, #6
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40010400 	.word	0x40010400

08006be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f023 0201 	bic.w	r2, r3, #1
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f023 030a 	bic.w	r3, r3, #10
 8006c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b087      	sub	sp, #28
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f023 0210 	bic.w	r2, r3, #16
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	031b      	lsls	r3, r3, #12
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f043 0307 	orr.w	r3, r3, #7
 8006cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	609a      	str	r2, [r3, #8]
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	021a      	lsls	r2, r3, #8
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	609a      	str	r2, [r3, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a1a      	ldr	r2, [r3, #32]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
	...

08006d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e05a      	b.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a21      	ldr	r2, [pc, #132]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d01d      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1b      	ldr	r2, [pc, #108]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1a      	ldr	r2, [pc, #104]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a17      	ldr	r2, [pc, #92]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d10c      	bne.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	40000c00 	.word	0x40000c00
 8006e50:	40010400 	.word	0x40010400
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40001800 	.word	0x40001800

08006e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e84:	b084      	sub	sp, #16
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	f107 001c 	add.w	r0, r7, #28
 8006e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d122      	bne.n	8006ee2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d105      	bne.n	8006ed6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fbee 	bl	80086b8 <USB_CoreReset>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]
 8006ee0:	e01a      	b.n	8006f18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 fbe2 	bl	80086b8 <USB_CoreReset>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
 8006f0a:	e005      	b.n	8006f18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d10b      	bne.n	8006f36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f043 0206 	orr.w	r2, r3, #6
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f043 0220 	orr.w	r2, r3, #32
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f42:	b004      	add	sp, #16
 8006f44:	4770      	bx	lr
	...

08006f48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4613      	mov	r3, r2
 8006f54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f56:	79fb      	ldrb	r3, [r7, #7]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d165      	bne.n	8007028 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4a41      	ldr	r2, [pc, #260]	; (8007064 <USB_SetTurnaroundTime+0x11c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d906      	bls.n	8006f72 <USB_SetTurnaroundTime+0x2a>
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4a40      	ldr	r2, [pc, #256]	; (8007068 <USB_SetTurnaroundTime+0x120>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d202      	bcs.n	8006f72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f6c:	230f      	movs	r3, #15
 8006f6e:	617b      	str	r3, [r7, #20]
 8006f70:	e062      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	4a3c      	ldr	r2, [pc, #240]	; (8007068 <USB_SetTurnaroundTime+0x120>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d306      	bcc.n	8006f88 <USB_SetTurnaroundTime+0x40>
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	4a3b      	ldr	r2, [pc, #236]	; (800706c <USB_SetTurnaroundTime+0x124>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d202      	bcs.n	8006f88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f82:	230e      	movs	r3, #14
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	e057      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4a38      	ldr	r2, [pc, #224]	; (800706c <USB_SetTurnaroundTime+0x124>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d306      	bcc.n	8006f9e <USB_SetTurnaroundTime+0x56>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4a37      	ldr	r2, [pc, #220]	; (8007070 <USB_SetTurnaroundTime+0x128>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d202      	bcs.n	8006f9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f98:	230d      	movs	r3, #13
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e04c      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4a33      	ldr	r2, [pc, #204]	; (8007070 <USB_SetTurnaroundTime+0x128>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d306      	bcc.n	8006fb4 <USB_SetTurnaroundTime+0x6c>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4a32      	ldr	r2, [pc, #200]	; (8007074 <USB_SetTurnaroundTime+0x12c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d802      	bhi.n	8006fb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fae:	230c      	movs	r3, #12
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	e041      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4a2f      	ldr	r2, [pc, #188]	; (8007074 <USB_SetTurnaroundTime+0x12c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d906      	bls.n	8006fca <USB_SetTurnaroundTime+0x82>
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4a2e      	ldr	r2, [pc, #184]	; (8007078 <USB_SetTurnaroundTime+0x130>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d802      	bhi.n	8006fca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fc4:	230b      	movs	r3, #11
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	e036      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4a2a      	ldr	r2, [pc, #168]	; (8007078 <USB_SetTurnaroundTime+0x130>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d906      	bls.n	8006fe0 <USB_SetTurnaroundTime+0x98>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4a29      	ldr	r2, [pc, #164]	; (800707c <USB_SetTurnaroundTime+0x134>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d802      	bhi.n	8006fe0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fda:	230a      	movs	r3, #10
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	e02b      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4a26      	ldr	r2, [pc, #152]	; (800707c <USB_SetTurnaroundTime+0x134>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d906      	bls.n	8006ff6 <USB_SetTurnaroundTime+0xae>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4a25      	ldr	r2, [pc, #148]	; (8007080 <USB_SetTurnaroundTime+0x138>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d202      	bcs.n	8006ff6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ff0:	2309      	movs	r3, #9
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	e020      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4a21      	ldr	r2, [pc, #132]	; (8007080 <USB_SetTurnaroundTime+0x138>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d306      	bcc.n	800700c <USB_SetTurnaroundTime+0xc4>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4a20      	ldr	r2, [pc, #128]	; (8007084 <USB_SetTurnaroundTime+0x13c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d802      	bhi.n	800700c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007006:	2308      	movs	r3, #8
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	e015      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4a1d      	ldr	r2, [pc, #116]	; (8007084 <USB_SetTurnaroundTime+0x13c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d906      	bls.n	8007022 <USB_SetTurnaroundTime+0xda>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4a1c      	ldr	r2, [pc, #112]	; (8007088 <USB_SetTurnaroundTime+0x140>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d202      	bcs.n	8007022 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800701c:	2307      	movs	r3, #7
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	e00a      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007022:	2306      	movs	r3, #6
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	e007      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d102      	bne.n	8007034 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800702e:	2309      	movs	r3, #9
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	e001      	b.n	8007038 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007034:	2309      	movs	r3, #9
 8007036:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	029b      	lsls	r3, r3, #10
 800704c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007050:	431a      	orrs	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	00d8acbf 	.word	0x00d8acbf
 8007068:	00e4e1c0 	.word	0x00e4e1c0
 800706c:	00f42400 	.word	0x00f42400
 8007070:	01067380 	.word	0x01067380
 8007074:	011a499f 	.word	0x011a499f
 8007078:	01312cff 	.word	0x01312cff
 800707c:	014ca43f 	.word	0x014ca43f
 8007080:	016e3600 	.word	0x016e3600
 8007084:	01a6ab1f 	.word	0x01a6ab1f
 8007088:	01e84800 	.word	0x01e84800

0800708c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f043 0201 	orr.w	r2, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f023 0201 	bic.w	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d115      	bne.n	800711e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070fe:	2001      	movs	r0, #1
 8007100:	f7fb f90a 	bl	8002318 <HAL_Delay>
      ms++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 fa45 	bl	800859a <USB_GetMode>
 8007110:	4603      	mov	r3, r0
 8007112:	2b01      	cmp	r3, #1
 8007114:	d01e      	beq.n	8007154 <USB_SetCurrentMode+0x84>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b31      	cmp	r3, #49	; 0x31
 800711a:	d9f0      	bls.n	80070fe <USB_SetCurrentMode+0x2e>
 800711c:	e01a      	b.n	8007154 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d115      	bne.n	8007150 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007130:	2001      	movs	r0, #1
 8007132:	f7fb f8f1 	bl	8002318 <HAL_Delay>
      ms++;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3301      	adds	r3, #1
 800713a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fa2c 	bl	800859a <USB_GetMode>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d005      	beq.n	8007154 <USB_SetCurrentMode+0x84>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b31      	cmp	r3, #49	; 0x31
 800714c:	d9f0      	bls.n	8007130 <USB_SetCurrentMode+0x60>
 800714e:	e001      	b.n	8007154 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e005      	b.n	8007160 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b32      	cmp	r3, #50	; 0x32
 8007158:	d101      	bne.n	800715e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007168:	b084      	sub	sp, #16
 800716a:	b580      	push	{r7, lr}
 800716c:	b086      	sub	sp, #24
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	e009      	b.n	800719c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	3340      	adds	r3, #64	; 0x40
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	2200      	movs	r2, #0
 8007194:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	3301      	adds	r3, #1
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	2b0e      	cmp	r3, #14
 80071a0:	d9f2      	bls.n	8007188 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d11c      	bne.n	80071e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071b6:	f043 0302 	orr.w	r3, r3, #2
 80071ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	639a      	str	r2, [r3, #56]	; 0x38
 80071e0:	e00b      	b.n	80071fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007200:	461a      	mov	r2, r3
 8007202:	2300      	movs	r3, #0
 8007204:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720c:	4619      	mov	r1, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007214:	461a      	mov	r2, r3
 8007216:	680b      	ldr	r3, [r1, #0]
 8007218:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	2b01      	cmp	r3, #1
 800721e:	d10c      	bne.n	800723a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d104      	bne.n	8007230 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007226:	2100      	movs	r1, #0
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f965 	bl	80074f8 <USB_SetDevSpeed>
 800722e:	e008      	b.n	8007242 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007230:	2101      	movs	r1, #1
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f960 	bl	80074f8 <USB_SetDevSpeed>
 8007238:	e003      	b.n	8007242 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800723a:	2103      	movs	r1, #3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f95b 	bl	80074f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007242:	2110      	movs	r1, #16
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f8f3 	bl	8007430 <USB_FlushTxFifo>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f91f 	bl	8007498 <USB_FlushRxFifo>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726a:	461a      	mov	r2, r3
 800726c:	2300      	movs	r3, #0
 800726e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007276:	461a      	mov	r2, r3
 8007278:	2300      	movs	r3, #0
 800727a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007282:	461a      	mov	r2, r3
 8007284:	2300      	movs	r3, #0
 8007286:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]
 800728c:	e043      	b.n	8007316 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a4:	d118      	bne.n	80072d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	461a      	mov	r2, r3
 80072ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	e013      	b.n	80072ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	461a      	mov	r2, r3
 80072d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e008      	b.n	80072ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e4:	461a      	mov	r2, r3
 80072e6:	2300      	movs	r3, #0
 80072e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	461a      	mov	r2, r3
 80072f8:	2300      	movs	r3, #0
 80072fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	461a      	mov	r2, r3
 800730a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800730e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	3301      	adds	r3, #1
 8007314:	613b      	str	r3, [r7, #16]
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	429a      	cmp	r2, r3
 800731c:	d3b7      	bcc.n	800728e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800731e:	2300      	movs	r3, #0
 8007320:	613b      	str	r3, [r7, #16]
 8007322:	e043      	b.n	80073ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800733a:	d118      	bne.n	800736e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10a      	bne.n	8007358 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734e:	461a      	mov	r2, r3
 8007350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	e013      	b.n	8007380 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007364:	461a      	mov	r2, r3
 8007366:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	e008      	b.n	8007380 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737a:	461a      	mov	r2, r3
 800737c:	2300      	movs	r3, #0
 800737e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738c:	461a      	mov	r2, r3
 800738e:	2300      	movs	r3, #0
 8007390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739e:	461a      	mov	r2, r3
 80073a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	3301      	adds	r3, #1
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d3b7      	bcc.n	8007324 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d105      	bne.n	80073e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f043 0210 	orr.w	r2, r3, #16
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	4b0f      	ldr	r3, [pc, #60]	; (800742c <USB_DevInit+0x2c4>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d005      	beq.n	8007406 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	f043 0208 	orr.w	r2, r3, #8
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d107      	bne.n	800741c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007414:	f043 0304 	orr.w	r3, r3, #4
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800741c:	7dfb      	ldrb	r3, [r7, #23]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007428:	b004      	add	sp, #16
 800742a:	4770      	bx	lr
 800742c:	803c3800 	.word	0x803c3800

08007430 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4a13      	ldr	r2, [pc, #76]	; (8007494 <USB_FlushTxFifo+0x64>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d901      	bls.n	8007450 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e01b      	b.n	8007488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	daf2      	bge.n	800743e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	019b      	lsls	r3, r3, #6
 8007460:	f043 0220 	orr.w	r2, r3, #32
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4a08      	ldr	r2, [pc, #32]	; (8007494 <USB_FlushTxFifo+0x64>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d901      	bls.n	800747a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e006      	b.n	8007488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b20      	cmp	r3, #32
 8007484:	d0f0      	beq.n	8007468 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	00030d40 	.word	0x00030d40

08007498 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3301      	adds	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4a11      	ldr	r2, [pc, #68]	; (80074f4 <USB_FlushRxFifo+0x5c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d901      	bls.n	80074b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e018      	b.n	80074e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	daf2      	bge.n	80074a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2210      	movs	r2, #16
 80074c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4a08      	ldr	r2, [pc, #32]	; (80074f4 <USB_FlushRxFifo+0x5c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d901      	bls.n	80074da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e006      	b.n	80074e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0310 	and.w	r3, r3, #16
 80074e2:	2b10      	cmp	r3, #16
 80074e4:	d0f0      	beq.n	80074c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	00030d40 	.word	0x00030d40

080074f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007518:	4313      	orrs	r3, r2
 800751a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800752a:	b480      	push	{r7}
 800752c:	b087      	sub	sp, #28
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0306 	and.w	r3, r3, #6
 8007542:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
 800754e:	e00a      	b.n	8007566 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b02      	cmp	r3, #2
 8007554:	d002      	beq.n	800755c <USB_GetDevSpeed+0x32>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b06      	cmp	r3, #6
 800755a:	d102      	bne.n	8007562 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800755c:	2302      	movs	r3, #2
 800755e:	75fb      	strb	r3, [r7, #23]
 8007560:	e001      	b.n	8007566 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007562:	230f      	movs	r3, #15
 8007564:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007566:	7dfb      	ldrb	r3, [r7, #23]
}
 8007568:	4618      	mov	r0, r3
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d13a      	bne.n	8007606 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	2101      	movs	r1, #1
 80075a2:	fa01 f303 	lsl.w	r3, r1, r3
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	68f9      	ldr	r1, [r7, #12]
 80075aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075ae:	4313      	orrs	r3, r2
 80075b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d155      	bne.n	8007674 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	791b      	ldrb	r3, [r3, #4]
 80075e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	059b      	lsls	r3, r3, #22
 80075ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075ec:	4313      	orrs	r3, r2
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	0151      	lsls	r1, r2, #5
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	440a      	add	r2, r1
 80075f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	e036      	b.n	8007674 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760c:	69da      	ldr	r2, [r3, #28]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	2101      	movs	r1, #1
 8007618:	fa01 f303 	lsl.w	r3, r1, r3
 800761c:	041b      	lsls	r3, r3, #16
 800761e:	68f9      	ldr	r1, [r7, #12]
 8007620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007624:	4313      	orrs	r3, r2
 8007626:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d11a      	bne.n	8007674 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	791b      	ldrb	r3, [r3, #4]
 8007658:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800765a:	430b      	orrs	r3, r1
 800765c:	4313      	orrs	r3, r2
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800766e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007672:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d161      	bne.n	8007764 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076b6:	d11f      	bne.n	80076f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	0151      	lsls	r1, r2, #5
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	440a      	add	r2, r1
 80076ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	2101      	movs	r1, #1
 800770a:	fa01 f303 	lsl.w	r3, r1, r3
 800770e:	b29b      	uxth	r3, r3
 8007710:	43db      	mvns	r3, r3
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007718:	4013      	ands	r3, r2
 800771a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007722:	69da      	ldr	r2, [r3, #28]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	2101      	movs	r1, #1
 800772e:	fa01 f303 	lsl.w	r3, r1, r3
 8007732:	b29b      	uxth	r3, r3
 8007734:	43db      	mvns	r3, r3
 8007736:	68f9      	ldr	r1, [r7, #12]
 8007738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800773c:	4013      	ands	r3, r2
 800773e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	0159      	lsls	r1, r3, #5
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	440b      	add	r3, r1
 8007756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775a:	4619      	mov	r1, r3
 800775c:	4b35      	ldr	r3, [pc, #212]	; (8007834 <USB_DeactivateEndpoint+0x1b0>)
 800775e:	4013      	ands	r3, r2
 8007760:	600b      	str	r3, [r1, #0]
 8007762:	e060      	b.n	8007826 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800777a:	d11f      	bne.n	80077bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800779a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	2101      	movs	r1, #1
 80077ce:	fa01 f303 	lsl.w	r3, r1, r3
 80077d2:	041b      	lsls	r3, r3, #16
 80077d4:	43db      	mvns	r3, r3
 80077d6:	68f9      	ldr	r1, [r7, #12]
 80077d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077dc:	4013      	ands	r3, r2
 80077de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e6:	69da      	ldr	r2, [r3, #28]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 030f 	and.w	r3, r3, #15
 80077f0:	2101      	movs	r1, #1
 80077f2:	fa01 f303 	lsl.w	r3, r1, r3
 80077f6:	041b      	lsls	r3, r3, #16
 80077f8:	43db      	mvns	r3, r3
 80077fa:	68f9      	ldr	r1, [r7, #12]
 80077fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007800:	4013      	ands	r3, r2
 8007802:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	0159      	lsls	r1, r3, #5
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	440b      	add	r3, r1
 800781a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781e:	4619      	mov	r1, r3
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <USB_DeactivateEndpoint+0x1b4>)
 8007822:	4013      	ands	r3, r2
 8007824:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	ec337800 	.word	0xec337800
 8007838:	eff37800 	.word	0xeff37800

0800783c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	; 0x28
 8007840:	af02      	add	r7, sp, #8
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	4613      	mov	r3, r2
 8007848:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	2b01      	cmp	r3, #1
 800785a:	f040 815c 	bne.w	8007b16 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d132      	bne.n	80078cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	440a      	add	r2, r1
 800787c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007880:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007884:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007888:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	69fa      	ldr	r2, [r7, #28]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c4:	0cdb      	lsrs	r3, r3, #19
 80078c6:	04db      	lsls	r3, r3, #19
 80078c8:	6113      	str	r3, [r2, #16]
 80078ca:	e074      	b.n	80079b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e6:	0cdb      	lsrs	r3, r3, #19
 80078e8:	04db      	lsls	r3, r3, #19
 80078ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	440a      	add	r2, r1
 8007902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007906:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800790a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800790e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6999      	ldr	r1, [r3, #24]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	440b      	add	r3, r1
 8007928:	1e59      	subs	r1, r3, #1
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007932:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007934:	4b9d      	ldr	r3, [pc, #628]	; (8007bac <USB_EPStartXfer+0x370>)
 8007936:	400b      	ands	r3, r1
 8007938:	69b9      	ldr	r1, [r7, #24]
 800793a:	0148      	lsls	r0, r1, #5
 800793c:	69f9      	ldr	r1, [r7, #28]
 800793e:	4401      	add	r1, r0
 8007940:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007944:	4313      	orrs	r3, r2
 8007946:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007954:	691a      	ldr	r2, [r3, #16]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800795e:	69b9      	ldr	r1, [r7, #24]
 8007960:	0148      	lsls	r0, r1, #5
 8007962:	69f9      	ldr	r1, [r7, #28]
 8007964:	4401      	add	r1, r0
 8007966:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800796a:	4313      	orrs	r3, r2
 800796c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	791b      	ldrb	r3, [r3, #4]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d11f      	bne.n	80079b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007990:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007994:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d14b      	bne.n	8007a54 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d009      	beq.n	80079d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d0:	461a      	mov	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	791b      	ldrb	r3, [r3, #4]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d128      	bne.n	8007a32 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d110      	bne.n	8007a12 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	0151      	lsls	r1, r2, #5
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	440a      	add	r2, r1
 8007a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	e00f      	b.n	8007a32 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	e133      	b.n	8007cbc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	791b      	ldrb	r3, [r3, #4]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d015      	beq.n	8007aa8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 811b 	beq.w	8007cbc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	2101      	movs	r1, #1
 8007a98:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9c:	69f9      	ldr	r1, [r7, #28]
 8007a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	634b      	str	r3, [r1, #52]	; 0x34
 8007aa6:	e109      	b.n	8007cbc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d110      	bne.n	8007ada <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	0151      	lsls	r1, r2, #5
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	440a      	add	r2, r1
 8007ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	e00f      	b.n	8007afa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	0151      	lsls	r1, r2, #5
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	440a      	add	r2, r1
 8007af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007af8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6919      	ldr	r1, [r3, #16]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	781a      	ldrb	r2, [r3, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	b298      	uxth	r0, r3
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fade 	bl	80080d0 <USB_WritePacket>
 8007b14:	e0d2      	b.n	8007cbc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	69fa      	ldr	r2, [r7, #28]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b30:	0cdb      	lsrs	r3, r3, #19
 8007b32:	04db      	lsls	r3, r3, #19
 8007b34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	69fa      	ldr	r2, [r7, #28]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d126      	bne.n	8007bb0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b78:	69b9      	ldr	r1, [r7, #24]
 8007b7a:	0148      	lsls	r0, r1, #5
 8007b7c:	69f9      	ldr	r1, [r7, #28]
 8007b7e:	4401      	add	r1, r0
 8007b80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b84:	4313      	orrs	r3, r2
 8007b86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	0151      	lsls	r1, r2, #5
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	440a      	add	r2, r1
 8007b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ba6:	6113      	str	r3, [r2, #16]
 8007ba8:	e03a      	b.n	8007c20 <USB_EPStartXfer+0x3e4>
 8007baa:	bf00      	nop
 8007bac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	1e5a      	subs	r2, r3, #1
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	8afa      	ldrh	r2, [r7, #22]
 8007bcc:	fb03 f202 	mul.w	r2, r3, r2
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	8afb      	ldrh	r3, [r7, #22]
 8007be4:	04d9      	lsls	r1, r3, #19
 8007be6:	4b38      	ldr	r3, [pc, #224]	; (8007cc8 <USB_EPStartXfer+0x48c>)
 8007be8:	400b      	ands	r3, r1
 8007bea:	69b9      	ldr	r1, [r7, #24]
 8007bec:	0148      	lsls	r0, r1, #5
 8007bee:	69f9      	ldr	r1, [r7, #28]
 8007bf0:	4401      	add	r1, r0
 8007bf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c06:	691a      	ldr	r2, [r3, #16]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c10:	69b9      	ldr	r1, [r7, #24]
 8007c12:	0148      	lsls	r0, r1, #5
 8007c14:	69f9      	ldr	r1, [r7, #28]
 8007c16:	4401      	add	r1, r0
 8007c18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d10d      	bne.n	8007c42 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d009      	beq.n	8007c42 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6919      	ldr	r1, [r3, #16]
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3e:	460a      	mov	r2, r1
 8007c40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	791b      	ldrb	r3, [r3, #4]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d128      	bne.n	8007c9c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d110      	bne.n	8007c7c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	0151      	lsls	r1, r2, #5
 8007c6c:	69fa      	ldr	r2, [r7, #28]
 8007c6e:	440a      	add	r2, r1
 8007c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	e00f      	b.n	8007c9c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3720      	adds	r7, #32
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	1ff80000 	.word	0x1ff80000

08007ccc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	f040 80ce 	bne.w	8007e8a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d132      	bne.n	8007d5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	0151      	lsls	r1, r2, #5
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	440a      	add	r2, r1
 8007d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	0151      	lsls	r1, r2, #5
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	440a      	add	r2, r1
 8007d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d54:	0cdb      	lsrs	r3, r3, #19
 8007d56:	04db      	lsls	r3, r3, #19
 8007d58:	6113      	str	r3, [r2, #16]
 8007d5a:	e04e      	b.n	8007dfa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	0151      	lsls	r1, r2, #5
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	440a      	add	r2, r1
 8007d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d76:	0cdb      	lsrs	r3, r3, #19
 8007d78:	04db      	lsls	r3, r3, #19
 8007d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	0151      	lsls	r1, r2, #5
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	440a      	add	r2, r1
 8007d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	699a      	ldr	r2, [r3, #24]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d903      	bls.n	8007db4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dea:	6939      	ldr	r1, [r7, #16]
 8007dec:	0148      	lsls	r0, r1, #5
 8007dee:	6979      	ldr	r1, [r7, #20]
 8007df0:	4401      	add	r1, r0
 8007df2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007df6:	4313      	orrs	r3, r2
 8007df8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d11e      	bne.n	8007e3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d009      	beq.n	8007e1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	461a      	mov	r2, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	0151      	lsls	r1, r2, #5
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	440a      	add	r2, r1
 8007e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	e097      	b.n	8007f6e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	0151      	lsls	r1, r2, #5
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	440a      	add	r2, r1
 8007e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 8083 	beq.w	8007f6e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	2101      	movs	r1, #1
 8007e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7e:	6979      	ldr	r1, [r7, #20]
 8007e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e84:	4313      	orrs	r3, r2
 8007e86:	634b      	str	r3, [r1, #52]	; 0x34
 8007e88:	e071      	b.n	8007f6e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	0151      	lsls	r1, r2, #5
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	440a      	add	r2, r1
 8007ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ea4:	0cdb      	lsrs	r3, r3, #19
 8007ea6:	04db      	lsls	r3, r3, #19
 8007ea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	0151      	lsls	r1, r2, #5
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ec8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ecc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	0151      	lsls	r1, r2, #5
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	440a      	add	r2, r1
 8007efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f1c:	6939      	ldr	r1, [r7, #16]
 8007f1e:	0148      	lsls	r0, r1, #5
 8007f20:	6979      	ldr	r1, [r7, #20]
 8007f22:	4401      	add	r1, r0
 8007f24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d10d      	bne.n	8007f4e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d009      	beq.n	8007f4e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6919      	ldr	r1, [r3, #16]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4a:	460a      	mov	r2, r1
 8007f4c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	0151      	lsls	r1, r2, #5
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	440a      	add	r2, r1
 8007f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	785b      	ldrb	r3, [r3, #1]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d14a      	bne.n	8008030 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fb2:	f040 8086 	bne.w	80080c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	7812      	ldrb	r2, [r2, #0]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fd8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	7812      	ldrb	r2, [r2, #0]
 8007fee:	0151      	lsls	r1, r2, #5
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ffc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3301      	adds	r3, #1
 8008002:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f242 7210 	movw	r2, #10000	; 0x2710
 800800a:	4293      	cmp	r3, r2
 800800c:	d902      	bls.n	8008014 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	75fb      	strb	r3, [r7, #23]
          break;
 8008012:	e056      	b.n	80080c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800802c:	d0e7      	beq.n	8007ffe <USB_EPStopXfer+0x82>
 800802e:	e048      	b.n	80080c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008048:	d13b      	bne.n	80080c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	4413      	add	r3, r2
 8008054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	7812      	ldrb	r2, [r2, #0]
 800805e:	0151      	lsls	r1, r2, #5
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	440a      	add	r2, r1
 8008064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008068:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800806c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	7812      	ldrb	r2, [r2, #0]
 8008082:	0151      	lsls	r1, r2, #5
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	440a      	add	r2, r1
 8008088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800808c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008090:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3301      	adds	r3, #1
 8008096:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f242 7210 	movw	r2, #10000	; 0x2710
 800809e:	4293      	cmp	r3, r2
 80080a0:	d902      	bls.n	80080a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	75fb      	strb	r3, [r7, #23]
          break;
 80080a6:	e00c      	b.n	80080c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080c0:	d0e7      	beq.n	8008092 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b089      	sub	sp, #36	; 0x24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	4611      	mov	r1, r2
 80080dc:	461a      	mov	r2, r3
 80080de:	460b      	mov	r3, r1
 80080e0:	71fb      	strb	r3, [r7, #7]
 80080e2:	4613      	mov	r3, r2
 80080e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d123      	bne.n	800813e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080f6:	88bb      	ldrh	r3, [r7, #4]
 80080f8:	3303      	adds	r3, #3
 80080fa:	089b      	lsrs	r3, r3, #2
 80080fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080fe:	2300      	movs	r3, #0
 8008100:	61bb      	str	r3, [r7, #24]
 8008102:	e018      	b.n	8008136 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	031a      	lsls	r2, r3, #12
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	4413      	add	r3, r2
 800810c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008110:	461a      	mov	r2, r3
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	3301      	adds	r3, #1
 800811c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	3301      	adds	r3, #1
 8008122:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	3301      	adds	r3, #1
 8008128:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	3301      	adds	r3, #1
 800812e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	3301      	adds	r3, #1
 8008134:	61bb      	str	r3, [r7, #24]
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	429a      	cmp	r2, r3
 800813c:	d3e2      	bcc.n	8008104 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3724      	adds	r7, #36	; 0x24
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800814c:	b480      	push	{r7}
 800814e:	b08b      	sub	sp, #44	; 0x2c
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	089b      	lsrs	r3, r3, #2
 8008166:	b29b      	uxth	r3, r3
 8008168:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800816a:	88fb      	ldrh	r3, [r7, #6]
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008172:	2300      	movs	r3, #0
 8008174:	623b      	str	r3, [r7, #32]
 8008176:	e014      	b.n	80081a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	601a      	str	r2, [r3, #0]
    pDest++;
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	3301      	adds	r3, #1
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	3301      	adds	r3, #1
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	3301      	adds	r3, #1
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	3301      	adds	r3, #1
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	3301      	adds	r3, #1
 80081a0:	623b      	str	r3, [r7, #32]
 80081a2:	6a3a      	ldr	r2, [r7, #32]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d3e6      	bcc.n	8008178 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80081aa:	8bfb      	ldrh	r3, [r7, #30]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01e      	beq.n	80081ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ba:	461a      	mov	r2, r3
 80081bc:	f107 0310 	add.w	r3, r7, #16
 80081c0:	6812      	ldr	r2, [r2, #0]
 80081c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	fa22 f303 	lsr.w	r3, r2, r3
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	701a      	strb	r2, [r3, #0]
      i++;
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	3301      	adds	r3, #1
 80081da:	623b      	str	r3, [r7, #32]
      pDest++;
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	3301      	adds	r3, #1
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80081e2:	8bfb      	ldrh	r3, [r7, #30]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081e8:	8bfb      	ldrh	r3, [r7, #30]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1ea      	bne.n	80081c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	372c      	adds	r7, #44	; 0x2c
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d12c      	bne.n	8008272 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	db12      	blt.n	8008250 <USB_EPSetStall+0x54>
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00f      	beq.n	8008250 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	0151      	lsls	r1, r2, #5
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	440a      	add	r2, r1
 8008246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800824e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	440a      	add	r2, r1
 8008266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800826a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	e02b      	b.n	80082ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	db12      	blt.n	80082aa <USB_EPSetStall+0xae>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00f      	beq.n	80082aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	0151      	lsls	r1, r2, #5
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	440a      	add	r2, r1
 80082a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	0151      	lsls	r1, r2, #5
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	440a      	add	r2, r1
 80082c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	785b      	ldrb	r3, [r3, #1]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d128      	bne.n	8008346 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800830e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008312:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	791b      	ldrb	r3, [r3, #4]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d003      	beq.n	8008324 <USB_EPClearStall+0x4c>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	791b      	ldrb	r3, [r3, #4]
 8008320:	2b02      	cmp	r3, #2
 8008322:	d138      	bne.n	8008396 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	e027      	b.n	8008396 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	0151      	lsls	r1, r2, #5
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	440a      	add	r2, r1
 800835c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008360:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008364:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	791b      	ldrb	r3, [r3, #4]
 800836a:	2b03      	cmp	r3, #3
 800836c:	d003      	beq.n	8008376 <USB_EPClearStall+0x9e>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	791b      	ldrb	r3, [r3, #4]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d10f      	bne.n	8008396 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008394:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80083c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80083d8:	68f9      	ldr	r1, [r7, #12]
 80083da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083de:	4313      	orrs	r3, r2
 80083e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800840a:	f023 0303 	bic.w	r3, r3, #3
 800840e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800841e:	f023 0302 	bic.w	r3, r3, #2
 8008422:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800844c:	f023 0303 	bic.w	r3, r3, #3
 8008450:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008460:	f043 0302 	orr.w	r3, r3, #2
 8008464:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4013      	ands	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800848c:	68fb      	ldr	r3, [r7, #12]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	4013      	ands	r3, r2
 80084bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	0c1b      	lsrs	r3, r3, #16
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b085      	sub	sp, #20
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	4013      	ands	r3, r2
 80084f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	b29b      	uxth	r3, r3
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008502:	b480      	push	{r7}
 8008504:	b085      	sub	sp, #20
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	460b      	mov	r3, r1
 800850c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	4013      	ands	r3, r2
 800852e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008530:	68bb      	ldr	r3, [r7, #8]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800853e:	b480      	push	{r7}
 8008540:	b087      	sub	sp, #28
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008560:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	f003 030f 	and.w	r3, r3, #15
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	fa22 f303 	lsr.w	r3, r2, r3
 800856e:	01db      	lsls	r3, r3, #7
 8008570:	b2db      	uxtb	r3, r3
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	4413      	add	r3, r2
 8008580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	4013      	ands	r3, r2
 800858a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800858c:	68bb      	ldr	r3, [r7, #8]
}
 800858e:	4618      	mov	r0, r3
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	f003 0301 	and.w	r3, r3, #1
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b085      	sub	sp, #20
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80085d4:	f023 0307 	bic.w	r3, r3, #7
 80085d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	460b      	mov	r3, r1
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	333c      	adds	r3, #60	; 0x3c
 8008612:	3304      	adds	r3, #4
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	4a26      	ldr	r2, [pc, #152]	; (80086b4 <USB_EP0_OutStart+0xb8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d90a      	bls.n	8008636 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800862c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008630:	d101      	bne.n	8008636 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e037      	b.n	80086a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863c:	461a      	mov	r2, r3
 800863e:	2300      	movs	r3, #0
 8008640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008664:	f043 0318 	orr.w	r3, r3, #24
 8008668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008678:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800867c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800867e:	7afb      	ldrb	r3, [r7, #11]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d10f      	bne.n	80086a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800869e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80086a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	4f54300a 	.word	0x4f54300a

080086b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3301      	adds	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4a13      	ldr	r2, [pc, #76]	; (800871c <USB_CoreReset+0x64>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d901      	bls.n	80086d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e01b      	b.n	800870e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	daf2      	bge.n	80086c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f043 0201 	orr.w	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3301      	adds	r3, #1
 80086f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4a09      	ldr	r2, [pc, #36]	; (800871c <USB_CoreReset+0x64>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d901      	bls.n	8008700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e006      	b.n	800870e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	d0f0      	beq.n	80086ee <USB_CoreReset+0x36>

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	00030d40 	.word	0x00030d40

08008720 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800872c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008730:	f002 fca2 	bl	800b078 <USBD_static_malloc>
 8008734:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	32b0      	adds	r2, #176	; 0xb0
 8008746:	2100      	movs	r1, #0
 8008748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800874c:	2302      	movs	r3, #2
 800874e:	e0d4      	b.n	80088fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008750:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008754:	2100      	movs	r1, #0
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f002 fcf2 	bl	800b140 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	32b0      	adds	r2, #176	; 0xb0
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	32b0      	adds	r2, #176	; 0xb0
 8008776:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7c1b      	ldrb	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d138      	bne.n	80087fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008788:	4b5e      	ldr	r3, [pc, #376]	; (8008904 <USBD_CDC_Init+0x1e4>)
 800878a:	7819      	ldrb	r1, [r3, #0]
 800878c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008790:	2202      	movs	r2, #2
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f002 fb4d 	bl	800ae32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008798:	4b5a      	ldr	r3, [pc, #360]	; (8008904 <USBD_CDC_Init+0x1e4>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	3324      	adds	r3, #36	; 0x24
 80087ae:	2201      	movs	r2, #1
 80087b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087b2:	4b55      	ldr	r3, [pc, #340]	; (8008908 <USBD_CDC_Init+0x1e8>)
 80087b4:	7819      	ldrb	r1, [r3, #0]
 80087b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ba:	2202      	movs	r2, #2
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f002 fb38 	bl	800ae32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087c2:	4b51      	ldr	r3, [pc, #324]	; (8008908 <USBD_CDC_Init+0x1e8>)
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	f003 020f 	and.w	r2, r3, #15
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087da:	2201      	movs	r2, #1
 80087dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087de:	4b4b      	ldr	r3, [pc, #300]	; (800890c <USBD_CDC_Init+0x1ec>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	f003 020f 	and.w	r2, r3, #15
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	3326      	adds	r3, #38	; 0x26
 80087f4:	2210      	movs	r2, #16
 80087f6:	801a      	strh	r2, [r3, #0]
 80087f8:	e035      	b.n	8008866 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087fa:	4b42      	ldr	r3, [pc, #264]	; (8008904 <USBD_CDC_Init+0x1e4>)
 80087fc:	7819      	ldrb	r1, [r3, #0]
 80087fe:	2340      	movs	r3, #64	; 0x40
 8008800:	2202      	movs	r2, #2
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f002 fb15 	bl	800ae32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008808:	4b3e      	ldr	r3, [pc, #248]	; (8008904 <USBD_CDC_Init+0x1e4>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	f003 020f 	and.w	r2, r3, #15
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	3324      	adds	r3, #36	; 0x24
 800881e:	2201      	movs	r2, #1
 8008820:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008822:	4b39      	ldr	r3, [pc, #228]	; (8008908 <USBD_CDC_Init+0x1e8>)
 8008824:	7819      	ldrb	r1, [r3, #0]
 8008826:	2340      	movs	r3, #64	; 0x40
 8008828:	2202      	movs	r2, #2
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f002 fb01 	bl	800ae32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008830:	4b35      	ldr	r3, [pc, #212]	; (8008908 <USBD_CDC_Init+0x1e8>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f003 020f 	and.w	r2, r3, #15
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	4613      	mov	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008848:	2201      	movs	r2, #1
 800884a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800884c:	4b2f      	ldr	r3, [pc, #188]	; (800890c <USBD_CDC_Init+0x1ec>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	f003 020f 	and.w	r2, r3, #15
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	440b      	add	r3, r1
 8008860:	3326      	adds	r3, #38	; 0x26
 8008862:	2210      	movs	r2, #16
 8008864:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008866:	4b29      	ldr	r3, [pc, #164]	; (800890c <USBD_CDC_Init+0x1ec>)
 8008868:	7819      	ldrb	r1, [r3, #0]
 800886a:	2308      	movs	r3, #8
 800886c:	2203      	movs	r2, #3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f002 fadf 	bl	800ae32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008874:	4b25      	ldr	r3, [pc, #148]	; (800890c <USBD_CDC_Init+0x1ec>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	f003 020f 	and.w	r2, r3, #15
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	3324      	adds	r3, #36	; 0x24
 800888a:	2201      	movs	r2, #1
 800888c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	33b0      	adds	r3, #176	; 0xb0
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80088c4:	2302      	movs	r3, #2
 80088c6:	e018      	b.n	80088fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7c1b      	ldrb	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088d0:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <USBD_CDC_Init+0x1e8>)
 80088d2:	7819      	ldrb	r1, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f002 fb96 	bl	800b010 <USBD_LL_PrepareReceive>
 80088e4:	e008      	b.n	80088f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088e6:	4b08      	ldr	r3, [pc, #32]	; (8008908 <USBD_CDC_Init+0x1e8>)
 80088e8:	7819      	ldrb	r1, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088f0:	2340      	movs	r3, #64	; 0x40
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f002 fb8c 	bl	800b010 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20000093 	.word	0x20000093
 8008908:	20000094 	.word	0x20000094
 800890c:	20000095 	.word	0x20000095

08008910 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800891c:	4b3a      	ldr	r3, [pc, #232]	; (8008a08 <USBD_CDC_DeInit+0xf8>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f002 faab 	bl	800ae7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008928:	4b37      	ldr	r3, [pc, #220]	; (8008a08 <USBD_CDC_DeInit+0xf8>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	f003 020f 	and.w	r2, r3, #15
 8008930:	6879      	ldr	r1, [r7, #4]
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	440b      	add	r3, r1
 800893c:	3324      	adds	r3, #36	; 0x24
 800893e:	2200      	movs	r2, #0
 8008940:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008942:	4b32      	ldr	r3, [pc, #200]	; (8008a0c <USBD_CDC_DeInit+0xfc>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f002 fa98 	bl	800ae7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800894e:	4b2f      	ldr	r3, [pc, #188]	; (8008a0c <USBD_CDC_DeInit+0xfc>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	f003 020f 	and.w	r2, r3, #15
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008966:	2200      	movs	r2, #0
 8008968:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800896a:	4b29      	ldr	r3, [pc, #164]	; (8008a10 <USBD_CDC_DeInit+0x100>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f002 fa84 	bl	800ae7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008976:	4b26      	ldr	r3, [pc, #152]	; (8008a10 <USBD_CDC_DeInit+0x100>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f003 020f 	and.w	r2, r3, #15
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	3324      	adds	r3, #36	; 0x24
 800898c:	2200      	movs	r2, #0
 800898e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008990:	4b1f      	ldr	r3, [pc, #124]	; (8008a10 <USBD_CDC_DeInit+0x100>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	f003 020f 	and.w	r2, r3, #15
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	3326      	adds	r3, #38	; 0x26
 80089a6:	2200      	movs	r2, #0
 80089a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	32b0      	adds	r2, #176	; 0xb0
 80089b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01f      	beq.n	80089fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	33b0      	adds	r3, #176	; 0xb0
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	32b0      	adds	r2, #176	; 0xb0
 80089da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089de:	4618      	mov	r0, r3
 80089e0:	f002 fb58 	bl	800b094 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	32b0      	adds	r2, #176	; 0xb0
 80089ee:	2100      	movs	r1, #0
 80089f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20000093 	.word	0x20000093
 8008a0c:	20000094 	.word	0x20000094
 8008a10:	20000095 	.word	0x20000095

08008a14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	32b0      	adds	r2, #176	; 0xb0
 8008a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e0bf      	b.n	8008bc4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d050      	beq.n	8008af2 <USBD_CDC_Setup+0xde>
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	f040 80af 	bne.w	8008bb4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	88db      	ldrh	r3, [r3, #6]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d03a      	beq.n	8008ad4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	b25b      	sxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da1b      	bge.n	8008aa0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	33b0      	adds	r3, #176	; 0xb0
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	88d2      	ldrh	r2, [r2, #6]
 8008a84:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	88db      	ldrh	r3, [r3, #6]
 8008a8a:	2b07      	cmp	r3, #7
 8008a8c:	bf28      	it	cs
 8008a8e:	2307      	movcs	r3, #7
 8008a90:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	89fa      	ldrh	r2, [r7, #14]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fd89 	bl	800a5b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a9e:	e090      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	785a      	ldrb	r2, [r3, #1]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	88db      	ldrh	r3, [r3, #6]
 8008aae:	2b3f      	cmp	r3, #63	; 0x3f
 8008ab0:	d803      	bhi.n	8008aba <USBD_CDC_Setup+0xa6>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	88db      	ldrh	r3, [r3, #6]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	e000      	b.n	8008abc <USBD_CDC_Setup+0xa8>
 8008aba:	2240      	movs	r2, #64	; 0x40
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008ac2:	6939      	ldr	r1, [r7, #16]
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008aca:	461a      	mov	r2, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fd9b 	bl	800a608 <USBD_CtlPrepareRx>
      break;
 8008ad2:	e076      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	33b0      	adds	r3, #176	; 0xb0
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	7850      	ldrb	r0, [r2, #1]
 8008aea:	2200      	movs	r2, #0
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	4798      	blx	r3
      break;
 8008af0:	e067      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	2b0b      	cmp	r3, #11
 8008af8:	d851      	bhi.n	8008b9e <USBD_CDC_Setup+0x18a>
 8008afa:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <USBD_CDC_Setup+0xec>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b31 	.word	0x08008b31
 8008b04:	08008bad 	.word	0x08008bad
 8008b08:	08008b9f 	.word	0x08008b9f
 8008b0c:	08008b9f 	.word	0x08008b9f
 8008b10:	08008b9f 	.word	0x08008b9f
 8008b14:	08008b9f 	.word	0x08008b9f
 8008b18:	08008b9f 	.word	0x08008b9f
 8008b1c:	08008b9f 	.word	0x08008b9f
 8008b20:	08008b9f 	.word	0x08008b9f
 8008b24:	08008b9f 	.word	0x08008b9f
 8008b28:	08008b5b 	.word	0x08008b5b
 8008b2c:	08008b85 	.word	0x08008b85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d107      	bne.n	8008b4c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b3c:	f107 030a 	add.w	r3, r7, #10
 8008b40:	2202      	movs	r2, #2
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 fd33 	bl	800a5b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b4a:	e032      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 fcbd 	bl	800a4ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008b54:	2303      	movs	r3, #3
 8008b56:	75fb      	strb	r3, [r7, #23]
          break;
 8008b58:	e02b      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d107      	bne.n	8008b76 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b66:	f107 030d 	add.w	r3, r7, #13
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 fd1e 	bl	800a5b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b74:	e01d      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f001 fca8 	bl	800a4ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	75fb      	strb	r3, [r7, #23]
          break;
 8008b82:	e016      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d00f      	beq.n	8008bb0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 fc9b 	bl	800a4ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b9c:	e008      	b.n	8008bb0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 fc94 	bl	800a4ce <USBD_CtlError>
          ret = USBD_FAIL;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	75fb      	strb	r3, [r7, #23]
          break;
 8008baa:	e002      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>
          break;
 8008bac:	bf00      	nop
 8008bae:	e008      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>
          break;
 8008bb0:	bf00      	nop
      }
      break;
 8008bb2:	e006      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 fc89 	bl	800a4ce <USBD_CtlError>
      ret = USBD_FAIL;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	32b0      	adds	r2, #176	; 0xb0
 8008bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e065      	b.n	8008cc2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	32b0      	adds	r2, #176	; 0xb0
 8008c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	f003 020f 	and.w	r2, r3, #15
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	3318      	adds	r3, #24
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d02f      	beq.n	8008c80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 020f 	and.w	r2, r3, #15
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	3318      	adds	r3, #24
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	78fb      	ldrb	r3, [r7, #3]
 8008c38:	f003 010f 	and.w	r1, r3, #15
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	440b      	add	r3, r1
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4403      	add	r3, r0
 8008c48:	3348      	adds	r3, #72	; 0x48
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d112      	bne.n	8008c80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	f003 020f 	and.w	r2, r3, #15
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	4613      	mov	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	440b      	add	r3, r1
 8008c6c:	3318      	adds	r3, #24
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c72:	78f9      	ldrb	r1, [r7, #3]
 8008c74:	2300      	movs	r3, #0
 8008c76:	2200      	movs	r2, #0
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f002 f9a8 	bl	800afce <USBD_LL_Transmit>
 8008c7e:	e01f      	b.n	8008cc0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	33b0      	adds	r3, #176	; 0xb0
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d010      	beq.n	8008cc0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	33b0      	adds	r3, #176	; 0xb0
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	32b0      	adds	r2, #176	; 0xb0
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	32b0      	adds	r2, #176	; 0xb0
 8008cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e01a      	b.n	8008d32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008cfc:	78fb      	ldrb	r3, [r7, #3]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f002 f9a6 	bl	800b052 <USBD_LL_GetRxDataSize>
 8008d06:	4602      	mov	r2, r0
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	33b0      	adds	r3, #176	; 0xb0
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	32b0      	adds	r2, #176	; 0xb0
 8008d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e025      	b.n	8008da8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	33b0      	adds	r3, #176	; 0xb0
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d01a      	beq.n	8008da6 <USBD_CDC_EP0_RxReady+0x6c>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d76:	2bff      	cmp	r3, #255	; 0xff
 8008d78:	d015      	beq.n	8008da6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	33b0      	adds	r3, #176	; 0xb0
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008d92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d9a:	b292      	uxth	r2, r2
 8008d9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	22ff      	movs	r2, #255	; 0xff
 8008da2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008db8:	2182      	movs	r1, #130	; 0x82
 8008dba:	4818      	ldr	r0, [pc, #96]	; (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dbc:	f000 fd4f 	bl	800985e <USBD_GetEpDesc>
 8008dc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	4815      	ldr	r0, [pc, #84]	; (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dc6:	f000 fd4a 	bl	800985e <USBD_GetEpDesc>
 8008dca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008dcc:	2181      	movs	r1, #129	; 0x81
 8008dce:	4813      	ldr	r0, [pc, #76]	; (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dd0:	f000 fd45 	bl	800985e <USBD_GetEpDesc>
 8008dd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2210      	movs	r2, #16
 8008de0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d006      	beq.n	8008df6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008df0:	711a      	strb	r2, [r3, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d006      	beq.n	8008e0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e04:	711a      	strb	r2, [r3, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2243      	movs	r2, #67	; 0x43
 8008e0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e10:	4b02      	ldr	r3, [pc, #8]	; (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000050 	.word	0x20000050

08008e20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e28:	2182      	movs	r1, #130	; 0x82
 8008e2a:	4818      	ldr	r0, [pc, #96]	; (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e2c:	f000 fd17 	bl	800985e <USBD_GetEpDesc>
 8008e30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e32:	2101      	movs	r1, #1
 8008e34:	4815      	ldr	r0, [pc, #84]	; (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e36:	f000 fd12 	bl	800985e <USBD_GetEpDesc>
 8008e3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e3c:	2181      	movs	r1, #129	; 0x81
 8008e3e:	4813      	ldr	r0, [pc, #76]	; (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e40:	f000 fd0d 	bl	800985e <USBD_GetEpDesc>
 8008e44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2210      	movs	r2, #16
 8008e50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d006      	beq.n	8008e66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	711a      	strb	r2, [r3, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f042 0202 	orr.w	r2, r2, #2
 8008e64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	711a      	strb	r2, [r3, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f042 0202 	orr.w	r2, r2, #2
 8008e78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2243      	movs	r2, #67	; 0x43
 8008e7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000050 	.word	0x20000050

08008e90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e98:	2182      	movs	r1, #130	; 0x82
 8008e9a:	4818      	ldr	r0, [pc, #96]	; (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e9c:	f000 fcdf 	bl	800985e <USBD_GetEpDesc>
 8008ea0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	4815      	ldr	r0, [pc, #84]	; (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ea6:	f000 fcda 	bl	800985e <USBD_GetEpDesc>
 8008eaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008eac:	2181      	movs	r1, #129	; 0x81
 8008eae:	4813      	ldr	r0, [pc, #76]	; (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008eb0:	f000 fcd5 	bl	800985e <USBD_GetEpDesc>
 8008eb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2210      	movs	r2, #16
 8008ec0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d006      	beq.n	8008ed6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed0:	711a      	strb	r2, [r3, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d006      	beq.n	8008eea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ee4:	711a      	strb	r2, [r3, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2243      	movs	r2, #67	; 0x43
 8008eee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ef0:	4b02      	ldr	r3, [pc, #8]	; (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000050 	.word	0x20000050

08008f00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	220a      	movs	r2, #10
 8008f0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f0e:	4b03      	ldr	r3, [pc, #12]	; (8008f1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	2000000c 	.word	0x2000000c

08008f20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e009      	b.n	8008f48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	33b0      	adds	r3, #176	; 0xb0
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	32b0      	adds	r2, #176	; 0xb0
 8008f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e008      	b.n	8008f8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	371c      	adds	r7, #28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	32b0      	adds	r2, #176	; 0xb0
 8008fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e004      	b.n	8008fc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
	...

08008fd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	32b0      	adds	r2, #176	; 0xb0
 8008fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	32b0      	adds	r2, #176	; 0xb0
 8008ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009002:	2303      	movs	r3, #3
 8009004:	e025      	b.n	8009052 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800900c:	2b00      	cmp	r3, #0
 800900e:	d11f      	bne.n	8009050 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2201      	movs	r2, #1
 8009014:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009018:	4b10      	ldr	r3, [pc, #64]	; (800905c <USBD_CDC_TransmitPacket+0x88>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	f003 020f 	and.w	r2, r3, #15
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4403      	add	r3, r0
 8009032:	3318      	adds	r3, #24
 8009034:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <USBD_CDC_TransmitPacket+0x88>)
 8009038:	7819      	ldrb	r1, [r3, #0]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 ffc1 	bl	800afce <USBD_LL_Transmit>

    ret = USBD_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009050:	7bfb      	ldrb	r3, [r7, #15]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20000093 	.word	0x20000093

08009060 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	32b0      	adds	r2, #176	; 0xb0
 8009072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009076:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	32b0      	adds	r2, #176	; 0xb0
 8009082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800908a:	2303      	movs	r3, #3
 800908c:	e018      	b.n	80090c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	7c1b      	ldrb	r3, [r3, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009096:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <USBD_CDC_ReceivePacket+0x68>)
 8009098:	7819      	ldrb	r1, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f001 ffb3 	bl	800b010 <USBD_LL_PrepareReceive>
 80090aa:	e008      	b.n	80090be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090ac:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <USBD_CDC_ReceivePacket+0x68>)
 80090ae:	7819      	ldrb	r1, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090b6:	2340      	movs	r3, #64	; 0x40
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 ffa9 	bl	800b010 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20000094 	.word	0x20000094

080090cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	4613      	mov	r3, r2
 80090d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e01f      	b.n	8009124 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	79fa      	ldrb	r2, [r7, #7]
 8009116:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f001 fe23 	bl	800ad64 <USBD_LL_Init>
 800911e:	4603      	mov	r3, r0
 8009120:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009140:	2303      	movs	r3, #3
 8009142:	e025      	b.n	8009190 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	32ae      	adds	r2, #174	; 0xae
 8009156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00f      	beq.n	8009180 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	32ae      	adds	r2, #174	; 0xae
 800916a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009170:	f107 020e 	add.w	r2, r7, #14
 8009174:	4610      	mov	r0, r2
 8009176:	4798      	blx	r3
 8009178:	4602      	mov	r2, r0
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 fe2b 	bl	800adfc <USBD_LL_Start>
 80091a6:	4603      	mov	r3, r0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b084      	sub	sp, #16
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d009      	beq.n	80091f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	78fa      	ldrb	r2, [r7, #3]
 80091ea:	4611      	mov	r1, r2
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	4798      	blx	r3
 80091f0:	4603      	mov	r3, r0
 80091f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	460b      	mov	r3, r1
 8009208:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	78fa      	ldrb	r2, [r7, #3]
 8009218:	4611      	mov	r1, r2
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	4798      	blx	r3
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009224:	2303      	movs	r3, #3
 8009226:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	4618      	mov	r0, r3
 8009246:	f001 f908 	bl	800a45a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009258:	461a      	mov	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009266:	f003 031f 	and.w	r3, r3, #31
 800926a:	2b02      	cmp	r3, #2
 800926c:	d01a      	beq.n	80092a4 <USBD_LL_SetupStage+0x72>
 800926e:	2b02      	cmp	r3, #2
 8009270:	d822      	bhi.n	80092b8 <USBD_LL_SetupStage+0x86>
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <USBD_LL_SetupStage+0x4a>
 8009276:	2b01      	cmp	r3, #1
 8009278:	d00a      	beq.n	8009290 <USBD_LL_SetupStage+0x5e>
 800927a:	e01d      	b.n	80092b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fb5f 	bl	8009948 <USBD_StdDevReq>
 800928a:	4603      	mov	r3, r0
 800928c:	73fb      	strb	r3, [r7, #15]
      break;
 800928e:	e020      	b.n	80092d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fbc7 	bl	8009a2c <USBD_StdItfReq>
 800929e:	4603      	mov	r3, r0
 80092a0:	73fb      	strb	r3, [r7, #15]
      break;
 80092a2:	e016      	b.n	80092d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fc29 	bl	8009b04 <USBD_StdEPReq>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73fb      	strb	r3, [r7, #15]
      break;
 80092b6:	e00c      	b.n	80092d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 fdf8 	bl	800aebc <USBD_LL_StallEP>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]
      break;
 80092d0:	bf00      	nop
  }

  return ret;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	460b      	mov	r3, r1
 80092e6:	607a      	str	r2, [r7, #4]
 80092e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80092ee:	7afb      	ldrb	r3, [r7, #11]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d16e      	bne.n	80093d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80092fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009302:	2b03      	cmp	r3, #3
 8009304:	f040 8098 	bne.w	8009438 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	429a      	cmp	r2, r3
 8009312:	d913      	bls.n	800933c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	1ad2      	subs	r2, r2, r3
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	4293      	cmp	r3, r2
 800932c:	bf28      	it	cs
 800932e:	4613      	movcs	r3, r2
 8009330:	461a      	mov	r2, r3
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f001 f984 	bl	800a642 <USBD_CtlContinueRx>
 800933a:	e07d      	b.n	8009438 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009342:	f003 031f 	and.w	r3, r3, #31
 8009346:	2b02      	cmp	r3, #2
 8009348:	d014      	beq.n	8009374 <USBD_LL_DataOutStage+0x98>
 800934a:	2b02      	cmp	r3, #2
 800934c:	d81d      	bhi.n	800938a <USBD_LL_DataOutStage+0xae>
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <USBD_LL_DataOutStage+0x7c>
 8009352:	2b01      	cmp	r3, #1
 8009354:	d003      	beq.n	800935e <USBD_LL_DataOutStage+0x82>
 8009356:	e018      	b.n	800938a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009358:	2300      	movs	r3, #0
 800935a:	75bb      	strb	r3, [r7, #22]
            break;
 800935c:	e018      	b.n	8009390 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009364:	b2db      	uxtb	r3, r3
 8009366:	4619      	mov	r1, r3
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 fa5e 	bl	800982a <USBD_CoreFindIF>
 800936e:	4603      	mov	r3, r0
 8009370:	75bb      	strb	r3, [r7, #22]
            break;
 8009372:	e00d      	b.n	8009390 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800937a:	b2db      	uxtb	r3, r3
 800937c:	4619      	mov	r1, r3
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 fa60 	bl	8009844 <USBD_CoreFindEP>
 8009384:	4603      	mov	r3, r0
 8009386:	75bb      	strb	r3, [r7, #22]
            break;
 8009388:	e002      	b.n	8009390 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	75bb      	strb	r3, [r7, #22]
            break;
 800938e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009390:	7dbb      	ldrb	r3, [r7, #22]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d119      	bne.n	80093ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d113      	bne.n	80093ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80093a2:	7dba      	ldrb	r2, [r7, #22]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	32ae      	adds	r2, #174	; 0xae
 80093a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00b      	beq.n	80093ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80093b2:	7dba      	ldrb	r2, [r7, #22]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80093ba:	7dba      	ldrb	r2, [r7, #22]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	32ae      	adds	r2, #174	; 0xae
 80093c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f001 f94a 	bl	800a664 <USBD_CtlSendStatus>
 80093d0:	e032      	b.n	8009438 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80093d2:	7afb      	ldrb	r3, [r7, #11]
 80093d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	4619      	mov	r1, r3
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 fa31 	bl	8009844 <USBD_CoreFindEP>
 80093e2:	4603      	mov	r3, r0
 80093e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093e6:	7dbb      	ldrb	r3, [r7, #22]
 80093e8:	2bff      	cmp	r3, #255	; 0xff
 80093ea:	d025      	beq.n	8009438 <USBD_LL_DataOutStage+0x15c>
 80093ec:	7dbb      	ldrb	r3, [r7, #22]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d122      	bne.n	8009438 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d117      	bne.n	800942e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093fe:	7dba      	ldrb	r2, [r7, #22]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	32ae      	adds	r2, #174	; 0xae
 8009404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00f      	beq.n	800942e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800940e:	7dba      	ldrb	r2, [r7, #22]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009416:	7dba      	ldrb	r2, [r7, #22]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	32ae      	adds	r2, #174	; 0xae
 800941c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	7afa      	ldrb	r2, [r7, #11]
 8009424:	4611      	mov	r1, r2
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	4798      	blx	r3
 800942a:	4603      	mov	r3, r0
 800942c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800942e:	7dfb      	ldrb	r3, [r7, #23]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	e000      	b.n	800943a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b086      	sub	sp, #24
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	460b      	mov	r3, r1
 800944c:	607a      	str	r2, [r7, #4]
 800944e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009450:	7afb      	ldrb	r3, [r7, #11]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d16f      	bne.n	8009536 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3314      	adds	r3, #20
 800945a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009462:	2b02      	cmp	r3, #2
 8009464:	d15a      	bne.n	800951c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	429a      	cmp	r2, r3
 8009470:	d914      	bls.n	800949c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	689a      	ldr	r2, [r3, #8]
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	1ad2      	subs	r2, r2, r3
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	461a      	mov	r2, r3
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f001 f8ac 	bl	800a5e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800948e:	2300      	movs	r3, #0
 8009490:	2200      	movs	r2, #0
 8009492:	2100      	movs	r1, #0
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f001 fdbb 	bl	800b010 <USBD_LL_PrepareReceive>
 800949a:	e03f      	b.n	800951c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	68da      	ldr	r2, [r3, #12]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d11c      	bne.n	80094e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d316      	bcc.n	80094e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094be:	429a      	cmp	r2, r3
 80094c0:	d20f      	bcs.n	80094e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094c2:	2200      	movs	r2, #0
 80094c4:	2100      	movs	r1, #0
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f001 f88d 	bl	800a5e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094d4:	2300      	movs	r3, #0
 80094d6:	2200      	movs	r2, #0
 80094d8:	2100      	movs	r1, #0
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f001 fd98 	bl	800b010 <USBD_LL_PrepareReceive>
 80094e0:	e01c      	b.n	800951c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d10f      	bne.n	800950e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d009      	beq.n	800950e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800950e:	2180      	movs	r1, #128	; 0x80
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f001 fcd3 	bl	800aebc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f001 f8b7 	bl	800a68a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d03a      	beq.n	800959c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff fe42 	bl	80091b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009534:	e032      	b.n	800959c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009536:	7afb      	ldrb	r3, [r7, #11]
 8009538:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800953c:	b2db      	uxtb	r3, r3
 800953e:	4619      	mov	r1, r3
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 f97f 	bl	8009844 <USBD_CoreFindEP>
 8009546:	4603      	mov	r3, r0
 8009548:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	2bff      	cmp	r3, #255	; 0xff
 800954e:	d025      	beq.n	800959c <USBD_LL_DataInStage+0x15a>
 8009550:	7dfb      	ldrb	r3, [r7, #23]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d122      	bne.n	800959c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b03      	cmp	r3, #3
 8009560:	d11c      	bne.n	800959c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009562:	7dfa      	ldrb	r2, [r7, #23]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	32ae      	adds	r2, #174	; 0xae
 8009568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d014      	beq.n	800959c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009572:	7dfa      	ldrb	r2, [r7, #23]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800957a:	7dfa      	ldrb	r2, [r7, #23]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	32ae      	adds	r2, #174	; 0xae
 8009580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	7afa      	ldrb	r2, [r7, #11]
 8009588:	4611      	mov	r1, r2
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	4798      	blx	r3
 800958e:	4603      	mov	r3, r0
 8009590:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009592:	7dbb      	ldrb	r3, [r7, #22]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009598:	7dbb      	ldrb	r3, [r7, #22]
 800959a:	e000      	b.n	800959e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d014      	beq.n	800960c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00e      	beq.n	800960c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	6852      	ldr	r2, [r2, #4]
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	4611      	mov	r1, r2
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	4798      	blx	r3
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009608:	2303      	movs	r3, #3
 800960a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800960c:	2340      	movs	r3, #64	; 0x40
 800960e:	2200      	movs	r2, #0
 8009610:	2100      	movs	r1, #0
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 fc0d 	bl	800ae32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2240      	movs	r2, #64	; 0x40
 8009624:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009628:	2340      	movs	r3, #64	; 0x40
 800962a:	2200      	movs	r2, #0
 800962c:	2180      	movs	r1, #128	; 0x80
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f001 fbff 	bl	800ae32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2240      	movs	r2, #64	; 0x40
 800963e:	621a      	str	r2, [r3, #32]

  return ret;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800964a:	b480      	push	{r7}
 800964c:	b083      	sub	sp, #12
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	78fa      	ldrb	r2, [r7, #3]
 800965a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800966a:	b480      	push	{r7}
 800966c:	b083      	sub	sp, #12
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009678:	b2da      	uxtb	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2204      	movs	r2, #4
 8009684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	d106      	bne.n	80096b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b082      	sub	sp, #8
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d110      	bne.n	80096fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d005      	beq.n	80096fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	32ae      	adds	r2, #174	; 0xae
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009724:	2303      	movs	r3, #3
 8009726:	e01c      	b.n	8009762 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b03      	cmp	r3, #3
 8009732:	d115      	bne.n	8009760 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	32ae      	adds	r2, #174	; 0xae
 800973e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	32ae      	adds	r2, #174	; 0xae
 8009752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	78fa      	ldrb	r2, [r7, #3]
 800975a:	4611      	mov	r1, r2
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	32ae      	adds	r2, #174	; 0xae
 8009780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009788:	2303      	movs	r3, #3
 800978a:	e01c      	b.n	80097c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b03      	cmp	r3, #3
 8009796:	d115      	bne.n	80097c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	32ae      	adds	r2, #174	; 0xae
 80097a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	32ae      	adds	r2, #174	; 0xae
 80097b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	4611      	mov	r1, r2
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00e      	beq.n	8009820 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	6852      	ldr	r2, [r2, #4]
 800980e:	b2d2      	uxtb	r2, r2
 8009810:	4611      	mov	r1, r2
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800981c:	2303      	movs	r3, #3
 800981e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009820:	7bfb      	ldrb	r3, [r7, #15]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	460b      	mov	r3, r1
 8009834:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009836:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009850:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b086      	sub	sp, #24
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	885b      	ldrh	r3, [r3, #2]
 800987a:	b29a      	uxth	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	b29b      	uxth	r3, r3
 8009882:	429a      	cmp	r2, r3
 8009884:	d920      	bls.n	80098c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	b29b      	uxth	r3, r3
 800988c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800988e:	e013      	b.n	80098b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009890:	f107 030a 	add.w	r3, r7, #10
 8009894:	4619      	mov	r1, r3
 8009896:	6978      	ldr	r0, [r7, #20]
 8009898:	f000 f81b 	bl	80098d2 <USBD_GetNextDesc>
 800989c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	785b      	ldrb	r3, [r3, #1]
 80098a2:	2b05      	cmp	r3, #5
 80098a4:	d108      	bne.n	80098b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	789b      	ldrb	r3, [r3, #2]
 80098ae:	78fa      	ldrb	r2, [r7, #3]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d008      	beq.n	80098c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	885b      	ldrh	r3, [r3, #2]
 80098bc:	b29a      	uxth	r2, r3
 80098be:	897b      	ldrh	r3, [r7, #10]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d8e5      	bhi.n	8009890 <USBD_GetEpDesc+0x32>
 80098c4:	e000      	b.n	80098c8 <USBD_GetEpDesc+0x6a>
          break;
 80098c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80098c8:	693b      	ldr	r3, [r7, #16]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b085      	sub	sp, #20
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	881a      	ldrh	r2, [r3, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	4413      	add	r3, r2
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4413      	add	r3, r2
 80098fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098fe:	68fb      	ldr	r3, [r7, #12]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	3301      	adds	r3, #1
 8009922:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800992a:	8a3b      	ldrh	r3, [r7, #16]
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	b21a      	sxth	r2, r3
 8009930:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009934:	4313      	orrs	r3, r2
 8009936:	b21b      	sxth	r3, r3
 8009938:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800993a:	89fb      	ldrh	r3, [r7, #14]
}
 800993c:	4618      	mov	r0, r3
 800993e:	371c      	adds	r7, #28
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800995e:	2b40      	cmp	r3, #64	; 0x40
 8009960:	d005      	beq.n	800996e <USBD_StdDevReq+0x26>
 8009962:	2b40      	cmp	r3, #64	; 0x40
 8009964:	d857      	bhi.n	8009a16 <USBD_StdDevReq+0xce>
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00f      	beq.n	800998a <USBD_StdDevReq+0x42>
 800996a:	2b20      	cmp	r3, #32
 800996c:	d153      	bne.n	8009a16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	32ae      	adds	r2, #174	; 0xae
 8009978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
 8009984:	4603      	mov	r3, r0
 8009986:	73fb      	strb	r3, [r7, #15]
      break;
 8009988:	e04a      	b.n	8009a20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	785b      	ldrb	r3, [r3, #1]
 800998e:	2b09      	cmp	r3, #9
 8009990:	d83b      	bhi.n	8009a0a <USBD_StdDevReq+0xc2>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <USBD_StdDevReq+0x50>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099ed 	.word	0x080099ed
 800999c:	08009a01 	.word	0x08009a01
 80099a0:	08009a0b 	.word	0x08009a0b
 80099a4:	080099f7 	.word	0x080099f7
 80099a8:	08009a0b 	.word	0x08009a0b
 80099ac:	080099cb 	.word	0x080099cb
 80099b0:	080099c1 	.word	0x080099c1
 80099b4:	08009a0b 	.word	0x08009a0b
 80099b8:	080099e3 	.word	0x080099e3
 80099bc:	080099d5 	.word	0x080099d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fa3c 	bl	8009e40 <USBD_GetDescriptor>
          break;
 80099c8:	e024      	b.n	8009a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fba1 	bl	800a114 <USBD_SetAddress>
          break;
 80099d2:	e01f      	b.n	8009a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fbe0 	bl	800a19c <USBD_SetConfig>
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
          break;
 80099e0:	e018      	b.n	8009a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fc83 	bl	800a2f0 <USBD_GetConfig>
          break;
 80099ea:	e013      	b.n	8009a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fcb4 	bl	800a35c <USBD_GetStatus>
          break;
 80099f4:	e00e      	b.n	8009a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fce3 	bl	800a3c4 <USBD_SetFeature>
          break;
 80099fe:	e009      	b.n	8009a14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fd07 	bl	800a416 <USBD_ClrFeature>
          break;
 8009a08:	e004      	b.n	8009a14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fd5e 	bl	800a4ce <USBD_CtlError>
          break;
 8009a12:	bf00      	nop
      }
      break;
 8009a14:	e004      	b.n	8009a20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fd58 	bl	800a4ce <USBD_CtlError>
      break;
 8009a1e:	bf00      	nop
  }

  return ret;
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop

08009a2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a42:	2b40      	cmp	r3, #64	; 0x40
 8009a44:	d005      	beq.n	8009a52 <USBD_StdItfReq+0x26>
 8009a46:	2b40      	cmp	r3, #64	; 0x40
 8009a48:	d852      	bhi.n	8009af0 <USBD_StdItfReq+0xc4>
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <USBD_StdItfReq+0x26>
 8009a4e:	2b20      	cmp	r3, #32
 8009a50:	d14e      	bne.n	8009af0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d840      	bhi.n	8009ae2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	889b      	ldrh	r3, [r3, #4]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d836      	bhi.n	8009ad8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	889b      	ldrh	r3, [r3, #4]
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff fed9 	bl	800982a <USBD_CoreFindIF>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	2bff      	cmp	r3, #255	; 0xff
 8009a80:	d01d      	beq.n	8009abe <USBD_StdItfReq+0x92>
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d11a      	bne.n	8009abe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009a88:	7bba      	ldrb	r2, [r7, #14]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	32ae      	adds	r2, #174	; 0xae
 8009a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00f      	beq.n	8009ab8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a98:	7bba      	ldrb	r2, [r7, #14]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009aa0:	7bba      	ldrb	r2, [r7, #14]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	32ae      	adds	r2, #174	; 0xae
 8009aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	4798      	blx	r3
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ab6:	e004      	b.n	8009ac2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009abc:	e001      	b.n	8009ac2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	88db      	ldrh	r3, [r3, #6]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d110      	bne.n	8009aec <USBD_StdItfReq+0xc0>
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10d      	bne.n	8009aec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fdc7 	bl	800a664 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ad6:	e009      	b.n	8009aec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fcf7 	bl	800a4ce <USBD_CtlError>
          break;
 8009ae0:	e004      	b.n	8009aec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fcf2 	bl	800a4ce <USBD_CtlError>
          break;
 8009aea:	e000      	b.n	8009aee <USBD_StdItfReq+0xc2>
          break;
 8009aec:	bf00      	nop
      }
      break;
 8009aee:	e004      	b.n	8009afa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fceb 	bl	800a4ce <USBD_CtlError>
      break;
 8009af8:	bf00      	nop
  }

  return ret;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	889b      	ldrh	r3, [r3, #4]
 8009b16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b20:	2b40      	cmp	r3, #64	; 0x40
 8009b22:	d007      	beq.n	8009b34 <USBD_StdEPReq+0x30>
 8009b24:	2b40      	cmp	r3, #64	; 0x40
 8009b26:	f200 817f 	bhi.w	8009e28 <USBD_StdEPReq+0x324>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d02a      	beq.n	8009b84 <USBD_StdEPReq+0x80>
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	f040 817a 	bne.w	8009e28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff fe83 	bl	8009844 <USBD_CoreFindEP>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b42:	7b7b      	ldrb	r3, [r7, #13]
 8009b44:	2bff      	cmp	r3, #255	; 0xff
 8009b46:	f000 8174 	beq.w	8009e32 <USBD_StdEPReq+0x32e>
 8009b4a:	7b7b      	ldrb	r3, [r7, #13]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f040 8170 	bne.w	8009e32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009b52:	7b7a      	ldrb	r2, [r7, #13]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009b5a:	7b7a      	ldrb	r2, [r7, #13]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	32ae      	adds	r2, #174	; 0xae
 8009b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f000 8163 	beq.w	8009e32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009b6c:	7b7a      	ldrb	r2, [r7, #13]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	32ae      	adds	r2, #174	; 0xae
 8009b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	4798      	blx	r3
 8009b7e:	4603      	mov	r3, r0
 8009b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b82:	e156      	b.n	8009e32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	785b      	ldrb	r3, [r3, #1]
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d008      	beq.n	8009b9e <USBD_StdEPReq+0x9a>
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	f300 8145 	bgt.w	8009e1c <USBD_StdEPReq+0x318>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 809b 	beq.w	8009cce <USBD_StdEPReq+0x1ca>
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d03c      	beq.n	8009c16 <USBD_StdEPReq+0x112>
 8009b9c:	e13e      	b.n	8009e1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d002      	beq.n	8009bb0 <USBD_StdEPReq+0xac>
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d016      	beq.n	8009bdc <USBD_StdEPReq+0xd8>
 8009bae:	e02c      	b.n	8009c0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bb0:	7bbb      	ldrb	r3, [r7, #14]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00d      	beq.n	8009bd2 <USBD_StdEPReq+0xce>
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
 8009bb8:	2b80      	cmp	r3, #128	; 0x80
 8009bba:	d00a      	beq.n	8009bd2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f001 f97b 	bl	800aebc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bc6:	2180      	movs	r1, #128	; 0x80
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f001 f977 	bl	800aebc <USBD_LL_StallEP>
 8009bce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bd0:	e020      	b.n	8009c14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fc7a 	bl	800a4ce <USBD_CtlError>
              break;
 8009bda:	e01b      	b.n	8009c14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	885b      	ldrh	r3, [r3, #2]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10e      	bne.n	8009c02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00b      	beq.n	8009c02 <USBD_StdEPReq+0xfe>
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	2b80      	cmp	r3, #128	; 0x80
 8009bee:	d008      	beq.n	8009c02 <USBD_StdEPReq+0xfe>
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	88db      	ldrh	r3, [r3, #6]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d104      	bne.n	8009c02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 f95d 	bl	800aebc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fd2e 	bl	800a664 <USBD_CtlSendStatus>

              break;
 8009c08:	e004      	b.n	8009c14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fc5e 	bl	800a4ce <USBD_CtlError>
              break;
 8009c12:	bf00      	nop
          }
          break;
 8009c14:	e107      	b.n	8009e26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d002      	beq.n	8009c28 <USBD_StdEPReq+0x124>
 8009c22:	2b03      	cmp	r3, #3
 8009c24:	d016      	beq.n	8009c54 <USBD_StdEPReq+0x150>
 8009c26:	e04b      	b.n	8009cc0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00d      	beq.n	8009c4a <USBD_StdEPReq+0x146>
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	2b80      	cmp	r3, #128	; 0x80
 8009c32:	d00a      	beq.n	8009c4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 f93f 	bl	800aebc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c3e:	2180      	movs	r1, #128	; 0x80
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 f93b 	bl	800aebc <USBD_LL_StallEP>
 8009c46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c48:	e040      	b.n	8009ccc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fc3e 	bl	800a4ce <USBD_CtlError>
              break;
 8009c52:	e03b      	b.n	8009ccc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	885b      	ldrh	r3, [r3, #2]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d136      	bne.n	8009cca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
 8009c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 f945 	bl	800aefa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fcf7 	bl	800a664 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7ff fde2 	bl	8009844 <USBD_CoreFindEP>
 8009c80:	4603      	mov	r3, r0
 8009c82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c84:	7b7b      	ldrb	r3, [r7, #13]
 8009c86:	2bff      	cmp	r3, #255	; 0xff
 8009c88:	d01f      	beq.n	8009cca <USBD_StdEPReq+0x1c6>
 8009c8a:	7b7b      	ldrb	r3, [r7, #13]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d11c      	bne.n	8009cca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c90:	7b7a      	ldrb	r2, [r7, #13]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c98:	7b7a      	ldrb	r2, [r7, #13]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	32ae      	adds	r2, #174	; 0xae
 8009c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d010      	beq.n	8009cca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ca8:	7b7a      	ldrb	r2, [r7, #13]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	32ae      	adds	r2, #174	; 0xae
 8009cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	4798      	blx	r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009cbe:	e004      	b.n	8009cca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fc03 	bl	800a4ce <USBD_CtlError>
              break;
 8009cc8:	e000      	b.n	8009ccc <USBD_StdEPReq+0x1c8>
              break;
 8009cca:	bf00      	nop
          }
          break;
 8009ccc:	e0ab      	b.n	8009e26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d002      	beq.n	8009ce0 <USBD_StdEPReq+0x1dc>
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d032      	beq.n	8009d44 <USBD_StdEPReq+0x240>
 8009cde:	e097      	b.n	8009e10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d007      	beq.n	8009cf6 <USBD_StdEPReq+0x1f2>
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	2b80      	cmp	r3, #128	; 0x80
 8009cea:	d004      	beq.n	8009cf6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fbed 	bl	800a4ce <USBD_CtlError>
                break;
 8009cf4:	e091      	b.n	8009e1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	da0b      	bge.n	8009d16 <USBD_StdEPReq+0x212>
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d04:	4613      	mov	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	3310      	adds	r3, #16
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	4413      	add	r3, r2
 8009d12:	3304      	adds	r3, #4
 8009d14:	e00b      	b.n	8009d2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2202      	movs	r2, #2
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fc37 	bl	800a5b0 <USBD_CtlSendData>
              break;
 8009d42:	e06a      	b.n	8009e1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	da11      	bge.n	8009d70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	f003 020f 	and.w	r2, r3, #15
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	4613      	mov	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	3324      	adds	r3, #36	; 0x24
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d117      	bne.n	8009d96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fbb0 	bl	800a4ce <USBD_CtlError>
                  break;
 8009d6e:	e054      	b.n	8009e1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	f003 020f 	and.w	r2, r3, #15
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	440b      	add	r3, r1
 8009d82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d104      	bne.n	8009d96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fb9d 	bl	800a4ce <USBD_CtlError>
                  break;
 8009d94:	e041      	b.n	8009e1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	da0b      	bge.n	8009db6 <USBD_StdEPReq+0x2b2>
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	3310      	adds	r3, #16
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	4413      	add	r3, r2
 8009db2:	3304      	adds	r3, #4
 8009db4:	e00b      	b.n	8009dce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	4413      	add	r3, r2
 8009dcc:	3304      	adds	r3, #4
 8009dce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <USBD_StdEPReq+0x2d8>
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	2b80      	cmp	r3, #128	; 0x80
 8009dda:	d103      	bne.n	8009de4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2200      	movs	r2, #0
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	e00e      	b.n	8009e02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 f8a5 	bl	800af38 <USBD_LL_IsStallEP>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2201      	movs	r2, #1
 8009df8:	601a      	str	r2, [r3, #0]
 8009dfa:	e002      	b.n	8009e02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2202      	movs	r2, #2
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fbd1 	bl	800a5b0 <USBD_CtlSendData>
              break;
 8009e0e:	e004      	b.n	8009e1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fb5b 	bl	800a4ce <USBD_CtlError>
              break;
 8009e18:	bf00      	nop
          }
          break;
 8009e1a:	e004      	b.n	8009e26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fb55 	bl	800a4ce <USBD_CtlError>
          break;
 8009e24:	bf00      	nop
      }
      break;
 8009e26:	e005      	b.n	8009e34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fb4f 	bl	800a4ce <USBD_CtlError>
      break;
 8009e30:	e000      	b.n	8009e34 <USBD_StdEPReq+0x330>
      break;
 8009e32:	bf00      	nop
  }

  return ret;
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
	...

08009e40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	885b      	ldrh	r3, [r3, #2]
 8009e5a:	0a1b      	lsrs	r3, r3, #8
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	2b06      	cmp	r3, #6
 8009e62:	f200 8128 	bhi.w	800a0b6 <USBD_GetDescriptor+0x276>
 8009e66:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <USBD_GetDescriptor+0x2c>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009e89 	.word	0x08009e89
 8009e70:	08009ea1 	.word	0x08009ea1
 8009e74:	08009ee1 	.word	0x08009ee1
 8009e78:	0800a0b7 	.word	0x0800a0b7
 8009e7c:	0800a0b7 	.word	0x0800a0b7
 8009e80:	0800a057 	.word	0x0800a057
 8009e84:	0800a083 	.word	0x0800a083
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	7c12      	ldrb	r2, [r2, #16]
 8009e94:	f107 0108 	add.w	r1, r7, #8
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4798      	blx	r3
 8009e9c:	60f8      	str	r0, [r7, #12]
      break;
 8009e9e:	e112      	b.n	800a0c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7c1b      	ldrb	r3, [r3, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10d      	bne.n	8009ec4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb0:	f107 0208 	add.w	r2, r7, #8
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ec2:	e100      	b.n	800a0c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	f107 0208 	add.w	r2, r7, #8
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	4798      	blx	r3
 8009ed4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	2202      	movs	r2, #2
 8009edc:	701a      	strb	r2, [r3, #0]
      break;
 8009ede:	e0f2      	b.n	800a0c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	885b      	ldrh	r3, [r3, #2]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b05      	cmp	r3, #5
 8009ee8:	f200 80ac 	bhi.w	800a044 <USBD_GetDescriptor+0x204>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <USBD_GetDescriptor+0xb4>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f0d 	.word	0x08009f0d
 8009ef8:	08009f41 	.word	0x08009f41
 8009efc:	08009f75 	.word	0x08009f75
 8009f00:	08009fa9 	.word	0x08009fa9
 8009f04:	08009fdd 	.word	0x08009fdd
 8009f08:	0800a011 	.word	0x0800a011
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00b      	beq.n	8009f30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	7c12      	ldrb	r2, [r2, #16]
 8009f24:	f107 0108 	add.w	r1, r7, #8
 8009f28:	4610      	mov	r0, r2
 8009f2a:	4798      	blx	r3
 8009f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2e:	e091      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 facb 	bl	800a4ce <USBD_CtlError>
            err++;
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3e:	e089      	b.n	800a054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00b      	beq.n	8009f64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	7c12      	ldrb	r2, [r2, #16]
 8009f58:	f107 0108 	add.w	r1, r7, #8
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4798      	blx	r3
 8009f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f62:	e077      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fab1 	bl	800a4ce <USBD_CtlError>
            err++;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	72fb      	strb	r3, [r7, #11]
          break;
 8009f72:	e06f      	b.n	800a054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00b      	beq.n	8009f98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	7c12      	ldrb	r2, [r2, #16]
 8009f8c:	f107 0108 	add.w	r1, r7, #8
 8009f90:	4610      	mov	r0, r2
 8009f92:	4798      	blx	r3
 8009f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f96:	e05d      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fa97 	bl	800a4ce <USBD_CtlError>
            err++;
 8009fa0:	7afb      	ldrb	r3, [r7, #11]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fa6:	e055      	b.n	800a054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	7c12      	ldrb	r2, [r2, #16]
 8009fc0:	f107 0108 	add.w	r1, r7, #8
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4798      	blx	r3
 8009fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fca:	e043      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fa7d 	bl	800a4ce <USBD_CtlError>
            err++;
 8009fd4:	7afb      	ldrb	r3, [r7, #11]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fda:	e03b      	b.n	800a054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00b      	beq.n	800a000 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	7c12      	ldrb	r2, [r2, #16]
 8009ff4:	f107 0108 	add.w	r1, r7, #8
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
 8009ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ffe:	e029      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fa63 	bl	800a4ce <USBD_CtlError>
            err++;
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	3301      	adds	r3, #1
 800a00c:	72fb      	strb	r3, [r7, #11]
          break;
 800a00e:	e021      	b.n	800a054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00b      	beq.n	800a034 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	7c12      	ldrb	r2, [r2, #16]
 800a028:	f107 0108 	add.w	r1, r7, #8
 800a02c:	4610      	mov	r0, r2
 800a02e:	4798      	blx	r3
 800a030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a032:	e00f      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fa49 	bl	800a4ce <USBD_CtlError>
            err++;
 800a03c:	7afb      	ldrb	r3, [r7, #11]
 800a03e:	3301      	adds	r3, #1
 800a040:	72fb      	strb	r3, [r7, #11]
          break;
 800a042:	e007      	b.n	800a054 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fa41 	bl	800a4ce <USBD_CtlError>
          err++;
 800a04c:	7afb      	ldrb	r3, [r7, #11]
 800a04e:	3301      	adds	r3, #1
 800a050:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a052:	bf00      	nop
      }
      break;
 800a054:	e037      	b.n	800a0c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	7c1b      	ldrb	r3, [r3, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d109      	bne.n	800a072 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a066:	f107 0208 	add.w	r2, r7, #8
 800a06a:	4610      	mov	r0, r2
 800a06c:	4798      	blx	r3
 800a06e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a070:	e029      	b.n	800a0c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fa2a 	bl	800a4ce <USBD_CtlError>
        err++;
 800a07a:	7afb      	ldrb	r3, [r7, #11]
 800a07c:	3301      	adds	r3, #1
 800a07e:	72fb      	strb	r3, [r7, #11]
      break;
 800a080:	e021      	b.n	800a0c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	7c1b      	ldrb	r3, [r3, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10d      	bne.n	800a0a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a092:	f107 0208 	add.w	r2, r7, #8
 800a096:	4610      	mov	r0, r2
 800a098:	4798      	blx	r3
 800a09a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	2207      	movs	r2, #7
 800a0a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0a4:	e00f      	b.n	800a0c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fa10 	bl	800a4ce <USBD_CtlError>
        err++;
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a0b4:	e007      	b.n	800a0c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fa08 	bl	800a4ce <USBD_CtlError>
      err++;
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a0c4:	bf00      	nop
  }

  if (err != 0U)
 800a0c6:	7afb      	ldrb	r3, [r7, #11]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d11e      	bne.n	800a10a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	88db      	ldrh	r3, [r3, #6]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d016      	beq.n	800a102 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a0d4:	893b      	ldrh	r3, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00e      	beq.n	800a0f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	88da      	ldrh	r2, [r3, #6]
 800a0de:	893b      	ldrh	r3, [r7, #8]
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	bf28      	it	cs
 800a0e4:	4613      	movcs	r3, r2
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0ea:	893b      	ldrh	r3, [r7, #8]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	68f9      	ldr	r1, [r7, #12]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fa5d 	bl	800a5b0 <USBD_CtlSendData>
 800a0f6:	e009      	b.n	800a10c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f9e7 	bl	800a4ce <USBD_CtlError>
 800a100:	e004      	b.n	800a10c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 faae 	bl	800a664 <USBD_CtlSendStatus>
 800a108:	e000      	b.n	800a10c <USBD_GetDescriptor+0x2cc>
    return;
 800a10a:	bf00      	nop
  }
}
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop

0800a114 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	889b      	ldrh	r3, [r3, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d131      	bne.n	800a18a <USBD_SetAddress+0x76>
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	88db      	ldrh	r3, [r3, #6]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d12d      	bne.n	800a18a <USBD_SetAddress+0x76>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	885b      	ldrh	r3, [r3, #2]
 800a132:	2b7f      	cmp	r3, #127	; 0x7f
 800a134:	d829      	bhi.n	800a18a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	885b      	ldrh	r3, [r3, #2]
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a140:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d104      	bne.n	800a158 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f9bc 	bl	800a4ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a156:	e01d      	b.n	800a194 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	7bfa      	ldrb	r2, [r7, #15]
 800a15c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 ff13 	bl	800af90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fa7a 	bl	800a664 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d004      	beq.n	800a180 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2202      	movs	r2, #2
 800a17a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a17e:	e009      	b.n	800a194 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a188:	e004      	b.n	800a194 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f99e 	bl	800a4ce <USBD_CtlError>
  }
}
 800a192:	bf00      	nop
 800a194:	bf00      	nop
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	885b      	ldrh	r3, [r3, #2]
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	4b4e      	ldr	r3, [pc, #312]	; (800a2ec <USBD_SetConfig+0x150>)
 800a1b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1b4:	4b4d      	ldr	r3, [pc, #308]	; (800a2ec <USBD_SetConfig+0x150>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d905      	bls.n	800a1c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f985 	bl	800a4ce <USBD_CtlError>
    return USBD_FAIL;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e08c      	b.n	800a2e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d002      	beq.n	800a1da <USBD_SetConfig+0x3e>
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d029      	beq.n	800a22c <USBD_SetConfig+0x90>
 800a1d8:	e075      	b.n	800a2c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a1da:	4b44      	ldr	r3, [pc, #272]	; (800a2ec <USBD_SetConfig+0x150>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d020      	beq.n	800a224 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a1e2:	4b42      	ldr	r3, [pc, #264]	; (800a2ec <USBD_SetConfig+0x150>)
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1ec:	4b3f      	ldr	r3, [pc, #252]	; (800a2ec <USBD_SetConfig+0x150>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7fe ffe7 	bl	80091c6 <USBD_SetClassConfig>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d008      	beq.n	800a214 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f962 	bl	800a4ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2202      	movs	r2, #2
 800a20e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a212:	e065      	b.n	800a2e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fa25 	bl	800a664 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2203      	movs	r2, #3
 800a21e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a222:	e05d      	b.n	800a2e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fa1d 	bl	800a664 <USBD_CtlSendStatus>
      break;
 800a22a:	e059      	b.n	800a2e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a22c:	4b2f      	ldr	r3, [pc, #188]	; (800a2ec <USBD_SetConfig+0x150>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d112      	bne.n	800a25a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a23c:	4b2b      	ldr	r3, [pc, #172]	; (800a2ec <USBD_SetConfig+0x150>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	461a      	mov	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a246:	4b29      	ldr	r3, [pc, #164]	; (800a2ec <USBD_SetConfig+0x150>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7fe ffd6 	bl	80091fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fa06 	bl	800a664 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a258:	e042      	b.n	800a2e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a25a:	4b24      	ldr	r3, [pc, #144]	; (800a2ec <USBD_SetConfig+0x150>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	429a      	cmp	r2, r3
 800a266:	d02a      	beq.n	800a2be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7fe ffc4 	bl	80091fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a276:	4b1d      	ldr	r3, [pc, #116]	; (800a2ec <USBD_SetConfig+0x150>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a280:	4b1a      	ldr	r3, [pc, #104]	; (800a2ec <USBD_SetConfig+0x150>)
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	4619      	mov	r1, r3
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7fe ff9d 	bl	80091c6 <USBD_SetClassConfig>
 800a28c:	4603      	mov	r3, r0
 800a28e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00f      	beq.n	800a2b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f918 	bl	800a4ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7fe ffa9 	bl	80091fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a2b4:	e014      	b.n	800a2e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f9d4 	bl	800a664 <USBD_CtlSendStatus>
      break;
 800a2bc:	e010      	b.n	800a2e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f9d0 	bl	800a664 <USBD_CtlSendStatus>
      break;
 800a2c4:	e00c      	b.n	800a2e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f900 	bl	800a4ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2ce:	4b07      	ldr	r3, [pc, #28]	; (800a2ec <USBD_SetConfig+0x150>)
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7fe ff92 	bl	80091fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a2de:	bf00      	nop
  }

  return ret;
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	200005ac 	.word	0x200005ac

0800a2f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	88db      	ldrh	r3, [r3, #6]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d004      	beq.n	800a30c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f8e2 	bl	800a4ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a30a:	e023      	b.n	800a354 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b02      	cmp	r3, #2
 800a316:	dc02      	bgt.n	800a31e <USBD_GetConfig+0x2e>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dc03      	bgt.n	800a324 <USBD_GetConfig+0x34>
 800a31c:	e015      	b.n	800a34a <USBD_GetConfig+0x5a>
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d00b      	beq.n	800a33a <USBD_GetConfig+0x4a>
 800a322:	e012      	b.n	800a34a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3308      	adds	r3, #8
 800a32e:	2201      	movs	r2, #1
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f93c 	bl	800a5b0 <USBD_CtlSendData>
        break;
 800a338:	e00c      	b.n	800a354 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	3304      	adds	r3, #4
 800a33e:	2201      	movs	r2, #1
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f934 	bl	800a5b0 <USBD_CtlSendData>
        break;
 800a348:	e004      	b.n	800a354 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 f8be 	bl	800a4ce <USBD_CtlError>
        break;
 800a352:	bf00      	nop
}
 800a354:	bf00      	nop
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	3b01      	subs	r3, #1
 800a370:	2b02      	cmp	r3, #2
 800a372:	d81e      	bhi.n	800a3b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	88db      	ldrh	r3, [r3, #6]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d004      	beq.n	800a386 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f8a5 	bl	800a4ce <USBD_CtlError>
        break;
 800a384:	e01a      	b.n	800a3bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	f043 0202 	orr.w	r2, r3, #2
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	330c      	adds	r3, #12
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f900 	bl	800a5b0 <USBD_CtlSendData>
      break;
 800a3b0:	e004      	b.n	800a3bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f88a 	bl	800a4ce <USBD_CtlError>
      break;
 800a3ba:	bf00      	nop
  }
}
 800a3bc:	bf00      	nop
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	885b      	ldrh	r3, [r3, #2]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d107      	bne.n	800a3e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f940 	bl	800a664 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a3e4:	e013      	b.n	800a40e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	885b      	ldrh	r3, [r3, #2]
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d10b      	bne.n	800a406 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	889b      	ldrh	r3, [r3, #4]
 800a3f2:	0a1b      	lsrs	r3, r3, #8
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f930 	bl	800a664 <USBD_CtlSendStatus>
}
 800a404:	e003      	b.n	800a40e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 f860 	bl	800a4ce <USBD_CtlError>
}
 800a40e:	bf00      	nop
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a426:	b2db      	uxtb	r3, r3
 800a428:	3b01      	subs	r3, #1
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d80b      	bhi.n	800a446 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	885b      	ldrh	r3, [r3, #2]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d10c      	bne.n	800a450 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f910 	bl	800a664 <USBD_CtlSendStatus>
      }
      break;
 800a444:	e004      	b.n	800a450 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f840 	bl	800a4ce <USBD_CtlError>
      break;
 800a44e:	e000      	b.n	800a452 <USBD_ClrFeature+0x3c>
      break;
 800a450:	bf00      	nop
  }
}
 800a452:	bf00      	nop
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b084      	sub	sp, #16
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	781a      	ldrb	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3301      	adds	r3, #1
 800a474:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	781a      	ldrb	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3301      	adds	r3, #1
 800a482:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7ff fa41 	bl	800990c <SWAPBYTE>
 800a48a:	4603      	mov	r3, r0
 800a48c:	461a      	mov	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3301      	adds	r3, #1
 800a496:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3301      	adds	r3, #1
 800a49c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f7ff fa34 	bl	800990c <SWAPBYTE>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7ff fa27 	bl	800990c <SWAPBYTE>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	80da      	strh	r2, [r3, #6]
}
 800a4c6:	bf00      	nop
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4d8:	2180      	movs	r1, #128	; 0x80
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fcee 	bl	800aebc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fcea 	bl	800aebc <USBD_LL_StallEP>
}
 800a4e8:	bf00      	nop
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d036      	beq.n	800a574 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a50a:	6938      	ldr	r0, [r7, #16]
 800a50c:	f000 f836 	bl	800a57c <USBD_GetLen>
 800a510:	4603      	mov	r3, r0
 800a512:	3301      	adds	r3, #1
 800a514:	b29b      	uxth	r3, r3
 800a516:	005b      	lsls	r3, r3, #1
 800a518:	b29a      	uxth	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	4413      	add	r3, r2
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	7812      	ldrb	r2, [r2, #0]
 800a528:	701a      	strb	r2, [r3, #0]
  idx++;
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
 800a52c:	3301      	adds	r3, #1
 800a52e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a530:	7dfb      	ldrb	r3, [r7, #23]
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	4413      	add	r3, r2
 800a536:	2203      	movs	r2, #3
 800a538:	701a      	strb	r2, [r3, #0]
  idx++;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	3301      	adds	r3, #1
 800a53e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a540:	e013      	b.n	800a56a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a542:	7dfb      	ldrb	r3, [r7, #23]
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	4413      	add	r3, r2
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	7812      	ldrb	r2, [r2, #0]
 800a54c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	3301      	adds	r3, #1
 800a552:	613b      	str	r3, [r7, #16]
    idx++;
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	3301      	adds	r3, #1
 800a558:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	4413      	add	r3, r2
 800a560:	2200      	movs	r2, #0
 800a562:	701a      	strb	r2, [r3, #0]
    idx++;
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	3301      	adds	r3, #1
 800a568:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1e7      	bne.n	800a542 <USBD_GetString+0x52>
 800a572:	e000      	b.n	800a576 <USBD_GetString+0x86>
    return;
 800a574:	bf00      	nop
  }
}
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a584:	2300      	movs	r3, #0
 800a586:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a58c:	e005      	b.n	800a59a <USBD_GetLen+0x1e>
  {
    len++;
 800a58e:	7bfb      	ldrb	r3, [r7, #15]
 800a590:	3301      	adds	r3, #1
 800a592:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	3301      	adds	r3, #1
 800a598:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1f5      	bne.n	800a58e <USBD_GetLen+0x12>
  }

  return len;
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 fcf9 	bl	800afce <USBD_LL_Transmit>

  return USBD_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	60f8      	str	r0, [r7, #12]
 800a5ee:	60b9      	str	r1, [r7, #8]
 800a5f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 fce8 	bl	800afce <USBD_LL_Transmit>

  return USBD_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2203      	movs	r2, #3
 800a618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	2100      	movs	r1, #0
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 fcec 	bl	800b010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	2100      	movs	r1, #0
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 fcdb 	bl	800b010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2204      	movs	r2, #4
 800a670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a674:	2300      	movs	r3, #0
 800a676:	2200      	movs	r2, #0
 800a678:	2100      	movs	r1, #0
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fca7 	bl	800afce <USBD_LL_Transmit>

  return USBD_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b082      	sub	sp, #8
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2205      	movs	r2, #5
 800a696:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a69a:	2300      	movs	r3, #0
 800a69c:	2200      	movs	r2, #0
 800a69e:	2100      	movs	r1, #0
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fcb5 	bl	800b010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	4912      	ldr	r1, [pc, #72]	; (800a700 <MX_USB_DEVICE_Init+0x50>)
 800a6b8:	4812      	ldr	r0, [pc, #72]	; (800a704 <MX_USB_DEVICE_Init+0x54>)
 800a6ba:	f7fe fd07 	bl	80090cc <USBD_Init>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a6c4:	f7f7 fafe 	bl	8001cc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a6c8:	490f      	ldr	r1, [pc, #60]	; (800a708 <MX_USB_DEVICE_Init+0x58>)
 800a6ca:	480e      	ldr	r0, [pc, #56]	; (800a704 <MX_USB_DEVICE_Init+0x54>)
 800a6cc:	f7fe fd2e 	bl	800912c <USBD_RegisterClass>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a6d6:	f7f7 faf5 	bl	8001cc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a6da:	490c      	ldr	r1, [pc, #48]	; (800a70c <MX_USB_DEVICE_Init+0x5c>)
 800a6dc:	4809      	ldr	r0, [pc, #36]	; (800a704 <MX_USB_DEVICE_Init+0x54>)
 800a6de:	f7fe fc1f 	bl	8008f20 <USBD_CDC_RegisterInterface>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a6e8:	f7f7 faec 	bl	8001cc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a6ec:	4805      	ldr	r0, [pc, #20]	; (800a704 <MX_USB_DEVICE_Init+0x54>)
 800a6ee:	f7fe fd53 	bl	8009198 <USBD_Start>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a6f8:	f7f7 fae4 	bl	8001cc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a6fc:	bf00      	nop
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	200000ac 	.word	0x200000ac
 800a704:	200005b0 	.word	0x200005b0
 800a708:	20000018 	.word	0x20000018
 800a70c:	20000098 	.word	0x20000098

0800a710 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a714:	2200      	movs	r2, #0
 800a716:	4905      	ldr	r1, [pc, #20]	; (800a72c <CDC_Init_FS+0x1c>)
 800a718:	4805      	ldr	r0, [pc, #20]	; (800a730 <CDC_Init_FS+0x20>)
 800a71a:	f7fe fc1b 	bl	8008f54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a71e:	4905      	ldr	r1, [pc, #20]	; (800a734 <CDC_Init_FS+0x24>)
 800a720:	4803      	ldr	r0, [pc, #12]	; (800a730 <CDC_Init_FS+0x20>)
 800a722:	f7fe fc39 	bl	8008f98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a726:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a728:	4618      	mov	r0, r3
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	2000108c 	.word	0x2000108c
 800a730:	200005b0 	.word	0x200005b0
 800a734:	2000088c 	.word	0x2000088c

0800a738 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a738:	b480      	push	{r7}
 800a73a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a73c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a73e:	4618      	mov	r0, r3
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	4603      	mov	r3, r0
 800a750:	6039      	str	r1, [r7, #0]
 800a752:	71fb      	strb	r3, [r7, #7]
 800a754:	4613      	mov	r3, r2
 800a756:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a758:	79fb      	ldrb	r3, [r7, #7]
 800a75a:	2b23      	cmp	r3, #35	; 0x23
 800a75c:	d84a      	bhi.n	800a7f4 <CDC_Control_FS+0xac>
 800a75e:	a201      	add	r2, pc, #4	; (adr r2, 800a764 <CDC_Control_FS+0x1c>)
 800a760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a764:	0800a7f5 	.word	0x0800a7f5
 800a768:	0800a7f5 	.word	0x0800a7f5
 800a76c:	0800a7f5 	.word	0x0800a7f5
 800a770:	0800a7f5 	.word	0x0800a7f5
 800a774:	0800a7f5 	.word	0x0800a7f5
 800a778:	0800a7f5 	.word	0x0800a7f5
 800a77c:	0800a7f5 	.word	0x0800a7f5
 800a780:	0800a7f5 	.word	0x0800a7f5
 800a784:	0800a7f5 	.word	0x0800a7f5
 800a788:	0800a7f5 	.word	0x0800a7f5
 800a78c:	0800a7f5 	.word	0x0800a7f5
 800a790:	0800a7f5 	.word	0x0800a7f5
 800a794:	0800a7f5 	.word	0x0800a7f5
 800a798:	0800a7f5 	.word	0x0800a7f5
 800a79c:	0800a7f5 	.word	0x0800a7f5
 800a7a0:	0800a7f5 	.word	0x0800a7f5
 800a7a4:	0800a7f5 	.word	0x0800a7f5
 800a7a8:	0800a7f5 	.word	0x0800a7f5
 800a7ac:	0800a7f5 	.word	0x0800a7f5
 800a7b0:	0800a7f5 	.word	0x0800a7f5
 800a7b4:	0800a7f5 	.word	0x0800a7f5
 800a7b8:	0800a7f5 	.word	0x0800a7f5
 800a7bc:	0800a7f5 	.word	0x0800a7f5
 800a7c0:	0800a7f5 	.word	0x0800a7f5
 800a7c4:	0800a7f5 	.word	0x0800a7f5
 800a7c8:	0800a7f5 	.word	0x0800a7f5
 800a7cc:	0800a7f5 	.word	0x0800a7f5
 800a7d0:	0800a7f5 	.word	0x0800a7f5
 800a7d4:	0800a7f5 	.word	0x0800a7f5
 800a7d8:	0800a7f5 	.word	0x0800a7f5
 800a7dc:	0800a7f5 	.word	0x0800a7f5
 800a7e0:	0800a7f5 	.word	0x0800a7f5
 800a7e4:	0800a7f5 	.word	0x0800a7f5
 800a7e8:	0800a7f5 	.word	0x0800a7f5
 800a7ec:	0800a7f5 	.word	0x0800a7f5
 800a7f0:	0800a7f5 	.word	0x0800a7f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a7f4:	bf00      	nop
  }

  return (USBD_OK);
 800a7f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	4805      	ldr	r0, [pc, #20]	; (800a828 <CDC_Receive_FS+0x24>)
 800a812:	f7fe fbc1 	bl	8008f98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a816:	4804      	ldr	r0, [pc, #16]	; (800a828 <CDC_Receive_FS+0x24>)
 800a818:	f7fe fc22 	bl	8009060 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a81c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	200005b0 	.word	0x200005b0

0800a82c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a83c:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <CDC_Transmit_FS+0x48>)
 800a83e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a842:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a84e:	2301      	movs	r3, #1
 800a850:	e00b      	b.n	800a86a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a852:	887b      	ldrh	r3, [r7, #2]
 800a854:	461a      	mov	r2, r3
 800a856:	6879      	ldr	r1, [r7, #4]
 800a858:	4806      	ldr	r0, [pc, #24]	; (800a874 <CDC_Transmit_FS+0x48>)
 800a85a:	f7fe fb7b 	bl	8008f54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a85e:	4805      	ldr	r0, [pc, #20]	; (800a874 <CDC_Transmit_FS+0x48>)
 800a860:	f7fe fbb8 	bl	8008fd4 <USBD_CDC_TransmitPacket>
 800a864:	4603      	mov	r3, r0
 800a866:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a868:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	200005b0 	.word	0x200005b0

0800a878 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a878:	b480      	push	{r7}
 800a87a:	b087      	sub	sp, #28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	4613      	mov	r3, r2
 800a884:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a88a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	371c      	adds	r7, #28
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
	...

0800a89c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	6039      	str	r1, [r7, #0]
 800a8a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2212      	movs	r2, #18
 800a8ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a8ae:	4b03      	ldr	r3, [pc, #12]	; (800a8bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	200000c8 	.word	0x200000c8

0800a8c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	6039      	str	r1, [r7, #0]
 800a8ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2204      	movs	r2, #4
 800a8d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8d2:	4b03      	ldr	r3, [pc, #12]	; (800a8e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	200000dc 	.word	0x200000dc

0800a8e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	6039      	str	r1, [r7, #0]
 800a8ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8f0:	79fb      	ldrb	r3, [r7, #7]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d105      	bne.n	800a902 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	4907      	ldr	r1, [pc, #28]	; (800a918 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8fa:	4808      	ldr	r0, [pc, #32]	; (800a91c <USBD_FS_ProductStrDescriptor+0x38>)
 800a8fc:	f7ff fdf8 	bl	800a4f0 <USBD_GetString>
 800a900:	e004      	b.n	800a90c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	4904      	ldr	r1, [pc, #16]	; (800a918 <USBD_FS_ProductStrDescriptor+0x34>)
 800a906:	4805      	ldr	r0, [pc, #20]	; (800a91c <USBD_FS_ProductStrDescriptor+0x38>)
 800a908:	f7ff fdf2 	bl	800a4f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a90c:	4b02      	ldr	r3, [pc, #8]	; (800a918 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	2000188c 	.word	0x2000188c
 800a91c:	0800d1d8 	.word	0x0800d1d8

0800a920 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	4603      	mov	r3, r0
 800a928:	6039      	str	r1, [r7, #0]
 800a92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	4904      	ldr	r1, [pc, #16]	; (800a940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a930:	4804      	ldr	r0, [pc, #16]	; (800a944 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a932:	f7ff fddd 	bl	800a4f0 <USBD_GetString>
  return USBD_StrDesc;
 800a936:	4b02      	ldr	r3, [pc, #8]	; (800a940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	2000188c 	.word	0x2000188c
 800a944:	0800d1f0 	.word	0x0800d1f0

0800a948 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	4603      	mov	r3, r0
 800a950:	6039      	str	r1, [r7, #0]
 800a952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	221a      	movs	r2, #26
 800a958:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a95a:	f000 f843 	bl	800a9e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a95e:	4b02      	ldr	r3, [pc, #8]	; (800a968 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	200000e0 	.word	0x200000e0

0800a96c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	4603      	mov	r3, r0
 800a974:	6039      	str	r1, [r7, #0]
 800a976:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d105      	bne.n	800a98a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	4907      	ldr	r1, [pc, #28]	; (800a9a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a982:	4808      	ldr	r0, [pc, #32]	; (800a9a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a984:	f7ff fdb4 	bl	800a4f0 <USBD_GetString>
 800a988:	e004      	b.n	800a994 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	4904      	ldr	r1, [pc, #16]	; (800a9a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a98e:	4805      	ldr	r0, [pc, #20]	; (800a9a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a990:	f7ff fdae 	bl	800a4f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a994:	4b02      	ldr	r3, [pc, #8]	; (800a9a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	2000188c 	.word	0x2000188c
 800a9a4:	0800d204 	.word	0x0800d204

0800a9a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	6039      	str	r1, [r7, #0]
 800a9b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d105      	bne.n	800a9c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	4907      	ldr	r1, [pc, #28]	; (800a9dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9be:	4808      	ldr	r0, [pc, #32]	; (800a9e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9c0:	f7ff fd96 	bl	800a4f0 <USBD_GetString>
 800a9c4:	e004      	b.n	800a9d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	4904      	ldr	r1, [pc, #16]	; (800a9dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9ca:	4805      	ldr	r0, [pc, #20]	; (800a9e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9cc:	f7ff fd90 	bl	800a4f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9d0:	4b02      	ldr	r3, [pc, #8]	; (800a9dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	2000188c 	.word	0x2000188c
 800a9e0:	0800d210 	.word	0x0800d210

0800a9e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a9ea:	4b0f      	ldr	r3, [pc, #60]	; (800aa28 <Get_SerialNum+0x44>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a9f0:	4b0e      	ldr	r3, [pc, #56]	; (800aa2c <Get_SerialNum+0x48>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a9f6:	4b0e      	ldr	r3, [pc, #56]	; (800aa30 <Get_SerialNum+0x4c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4413      	add	r3, r2
 800aa02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d009      	beq.n	800aa1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa0a:	2208      	movs	r2, #8
 800aa0c:	4909      	ldr	r1, [pc, #36]	; (800aa34 <Get_SerialNum+0x50>)
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f000 f814 	bl	800aa3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa14:	2204      	movs	r2, #4
 800aa16:	4908      	ldr	r1, [pc, #32]	; (800aa38 <Get_SerialNum+0x54>)
 800aa18:	68b8      	ldr	r0, [r7, #8]
 800aa1a:	f000 f80f 	bl	800aa3c <IntToUnicode>
  }
}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	1fff7a10 	.word	0x1fff7a10
 800aa2c:	1fff7a14 	.word	0x1fff7a14
 800aa30:	1fff7a18 	.word	0x1fff7a18
 800aa34:	200000e2 	.word	0x200000e2
 800aa38:	200000f2 	.word	0x200000f2

0800aa3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	4613      	mov	r3, r2
 800aa48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa4e:	2300      	movs	r3, #0
 800aa50:	75fb      	strb	r3, [r7, #23]
 800aa52:	e027      	b.n	800aaa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	0f1b      	lsrs	r3, r3, #28
 800aa58:	2b09      	cmp	r3, #9
 800aa5a:	d80b      	bhi.n	800aa74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	0f1b      	lsrs	r3, r3, #28
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	7dfb      	ldrb	r3, [r7, #23]
 800aa64:	005b      	lsls	r3, r3, #1
 800aa66:	4619      	mov	r1, r3
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	440b      	add	r3, r1
 800aa6c:	3230      	adds	r2, #48	; 0x30
 800aa6e:	b2d2      	uxtb	r2, r2
 800aa70:	701a      	strb	r2, [r3, #0]
 800aa72:	e00a      	b.n	800aa8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	0f1b      	lsrs	r3, r3, #28
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	4619      	mov	r1, r3
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	440b      	add	r3, r1
 800aa84:	3237      	adds	r2, #55	; 0x37
 800aa86:	b2d2      	uxtb	r2, r2
 800aa88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	011b      	lsls	r3, r3, #4
 800aa8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa90:	7dfb      	ldrb	r3, [r7, #23]
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	3301      	adds	r3, #1
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	4413      	add	r3, r2
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa9e:	7dfb      	ldrb	r3, [r7, #23]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	75fb      	strb	r3, [r7, #23]
 800aaa4:	7dfa      	ldrb	r2, [r7, #23]
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d3d3      	bcc.n	800aa54 <IntToUnicode+0x18>
  }
}
 800aaac:	bf00      	nop
 800aaae:	bf00      	nop
 800aab0:	371c      	adds	r7, #28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
	...

0800aabc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08a      	sub	sp, #40	; 0x28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aac4:	f107 0314 	add.w	r3, r7, #20
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	605a      	str	r2, [r3, #4]
 800aace:	609a      	str	r2, [r3, #8]
 800aad0:	60da      	str	r2, [r3, #12]
 800aad2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aadc:	d147      	bne.n	800ab6e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aade:	2300      	movs	r3, #0
 800aae0:	613b      	str	r3, [r7, #16]
 800aae2:	4b25      	ldr	r3, [pc, #148]	; (800ab78 <HAL_PCD_MspInit+0xbc>)
 800aae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae6:	4a24      	ldr	r2, [pc, #144]	; (800ab78 <HAL_PCD_MspInit+0xbc>)
 800aae8:	f043 0301 	orr.w	r3, r3, #1
 800aaec:	6313      	str	r3, [r2, #48]	; 0x30
 800aaee:	4b22      	ldr	r3, [pc, #136]	; (800ab78 <HAL_PCD_MspInit+0xbc>)
 800aaf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	613b      	str	r3, [r7, #16]
 800aaf8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aafa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aafe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab00:	2300      	movs	r3, #0
 800ab02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab04:	2300      	movs	r3, #0
 800ab06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ab08:	f107 0314 	add.w	r3, r7, #20
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	481b      	ldr	r0, [pc, #108]	; (800ab7c <HAL_PCD_MspInit+0xc0>)
 800ab10:	f7f8 fafe 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ab14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ab18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab22:	2300      	movs	r3, #0
 800ab24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab26:	230a      	movs	r3, #10
 800ab28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab2a:	f107 0314 	add.w	r3, r7, #20
 800ab2e:	4619      	mov	r1, r3
 800ab30:	4812      	ldr	r0, [pc, #72]	; (800ab7c <HAL_PCD_MspInit+0xc0>)
 800ab32:	f7f8 faed 	bl	8003110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab36:	4b10      	ldr	r3, [pc, #64]	; (800ab78 <HAL_PCD_MspInit+0xbc>)
 800ab38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab3a:	4a0f      	ldr	r2, [pc, #60]	; (800ab78 <HAL_PCD_MspInit+0xbc>)
 800ab3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab40:	6353      	str	r3, [r2, #52]	; 0x34
 800ab42:	2300      	movs	r3, #0
 800ab44:	60fb      	str	r3, [r7, #12]
 800ab46:	4b0c      	ldr	r3, [pc, #48]	; (800ab78 <HAL_PCD_MspInit+0xbc>)
 800ab48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab4a:	4a0b      	ldr	r2, [pc, #44]	; (800ab78 <HAL_PCD_MspInit+0xbc>)
 800ab4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab50:	6453      	str	r3, [r2, #68]	; 0x44
 800ab52:	4b09      	ldr	r3, [pc, #36]	; (800ab78 <HAL_PCD_MspInit+0xbc>)
 800ab54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2100      	movs	r1, #0
 800ab62:	2043      	movs	r0, #67	; 0x43
 800ab64:	f7f7 fcd7 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab68:	2043      	movs	r0, #67	; 0x43
 800ab6a:	f7f7 fcf0 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab6e:	bf00      	nop
 800ab70:	3728      	adds	r7, #40	; 0x28
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	40023800 	.word	0x40023800
 800ab7c:	40020000 	.word	0x40020000

0800ab80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ab94:	4619      	mov	r1, r3
 800ab96:	4610      	mov	r0, r2
 800ab98:	f7fe fb4b 	bl	8009232 <USBD_LL_SetupStage>
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	460b      	mov	r3, r1
 800abae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800abb6:	78fa      	ldrb	r2, [r7, #3]
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	4613      	mov	r3, r2
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	4413      	add	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	440b      	add	r3, r1
 800abc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	78fb      	ldrb	r3, [r7, #3]
 800abcc:	4619      	mov	r1, r3
 800abce:	f7fe fb85 	bl	80092dc <USBD_LL_DataOutStage>
}
 800abd2:	bf00      	nop
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	460b      	mov	r3, r1
 800abe4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800abec:	78fa      	ldrb	r2, [r7, #3]
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	4613      	mov	r3, r2
 800abf2:	00db      	lsls	r3, r3, #3
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	440b      	add	r3, r1
 800abfa:	334c      	adds	r3, #76	; 0x4c
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	78fb      	ldrb	r3, [r7, #3]
 800ac00:	4619      	mov	r1, r3
 800ac02:	f7fe fc1e 	bl	8009442 <USBD_LL_DataInStage>
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b082      	sub	sp, #8
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fe fd52 	bl	80096c6 <USBD_LL_SOF>
}
 800ac22:	bf00      	nop
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac32:	2301      	movs	r3, #1
 800ac34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d102      	bne.n	800ac44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73fb      	strb	r3, [r7, #15]
 800ac42:	e008      	b.n	800ac56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d102      	bne.n	800ac52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	73fb      	strb	r3, [r7, #15]
 800ac50:	e001      	b.n	800ac56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ac52:	f7f7 f837 	bl	8001cc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac5c:	7bfa      	ldrb	r2, [r7, #15]
 800ac5e:	4611      	mov	r1, r2
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7fe fcf2 	bl	800964a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe fc9a 	bl	80095a6 <USBD_LL_Reset>
}
 800ac72:	bf00      	nop
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fe fced 	bl	800966a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	6812      	ldr	r2, [r2, #0]
 800ac9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aca2:	f043 0301 	orr.w	r3, r3, #1
 800aca6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a1b      	ldr	r3, [r3, #32]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acb0:	4b04      	ldr	r3, [pc, #16]	; (800acc4 <HAL_PCD_SuspendCallback+0x48>)
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	4a03      	ldr	r2, [pc, #12]	; (800acc4 <HAL_PCD_SuspendCallback+0x48>)
 800acb6:	f043 0306 	orr.w	r3, r3, #6
 800acba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	e000ed00 	.word	0xe000ed00

0800acc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe fcdd 	bl	8009696 <USBD_LL_Resume>
}
 800acdc:	bf00      	nop
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	460b      	mov	r3, r1
 800acee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acf6:	78fa      	ldrb	r2, [r7, #3]
 800acf8:	4611      	mov	r1, r2
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fe fd35 	bl	800976a <USBD_LL_IsoOUTIncomplete>
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad1a:	78fa      	ldrb	r2, [r7, #3]
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe fcf1 	bl	8009706 <USBD_LL_IsoINIncomplete>
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe fd47 	bl	80097ce <USBD_LL_DevConnected>
}
 800ad40:	bf00      	nop
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fe fd44 	bl	80097e4 <USBD_LL_DevDisconnected>
}
 800ad5c:	bf00      	nop
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d13c      	bne.n	800adee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ad74:	4a20      	ldr	r2, [pc, #128]	; (800adf8 <USBD_LL_Init+0x94>)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a1e      	ldr	r2, [pc, #120]	; (800adf8 <USBD_LL_Init+0x94>)
 800ad80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad84:	4b1c      	ldr	r3, [pc, #112]	; (800adf8 <USBD_LL_Init+0x94>)
 800ad86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ad8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad8c:	4b1a      	ldr	r3, [pc, #104]	; (800adf8 <USBD_LL_Init+0x94>)
 800ad8e:	2204      	movs	r2, #4
 800ad90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad92:	4b19      	ldr	r3, [pc, #100]	; (800adf8 <USBD_LL_Init+0x94>)
 800ad94:	2202      	movs	r2, #2
 800ad96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad98:	4b17      	ldr	r3, [pc, #92]	; (800adf8 <USBD_LL_Init+0x94>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad9e:	4b16      	ldr	r3, [pc, #88]	; (800adf8 <USBD_LL_Init+0x94>)
 800ada0:	2202      	movs	r2, #2
 800ada2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ada4:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <USBD_LL_Init+0x94>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800adaa:	4b13      	ldr	r3, [pc, #76]	; (800adf8 <USBD_LL_Init+0x94>)
 800adac:	2200      	movs	r2, #0
 800adae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800adb0:	4b11      	ldr	r3, [pc, #68]	; (800adf8 <USBD_LL_Init+0x94>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800adb6:	4b10      	ldr	r3, [pc, #64]	; (800adf8 <USBD_LL_Init+0x94>)
 800adb8:	2200      	movs	r2, #0
 800adba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800adbc:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <USBD_LL_Init+0x94>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800adc2:	480d      	ldr	r0, [pc, #52]	; (800adf8 <USBD_LL_Init+0x94>)
 800adc4:	f7f8 fd9a 	bl	80038fc <HAL_PCD_Init>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800adce:	f7f6 ff79 	bl	8001cc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800add2:	2180      	movs	r1, #128	; 0x80
 800add4:	4808      	ldr	r0, [pc, #32]	; (800adf8 <USBD_LL_Init+0x94>)
 800add6:	f7f9 fff2 	bl	8004dbe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800adda:	2240      	movs	r2, #64	; 0x40
 800addc:	2100      	movs	r1, #0
 800adde:	4806      	ldr	r0, [pc, #24]	; (800adf8 <USBD_LL_Init+0x94>)
 800ade0:	f7f9 ffa6 	bl	8004d30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ade4:	2280      	movs	r2, #128	; 0x80
 800ade6:	2101      	movs	r1, #1
 800ade8:	4803      	ldr	r0, [pc, #12]	; (800adf8 <USBD_LL_Init+0x94>)
 800adea:	f7f9 ffa1 	bl	8004d30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	20001a8c 	.word	0x20001a8c

0800adfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7f8 fe8f 	bl	8003b36 <HAL_PCD_Start>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 f942 	bl	800b0a8 <USBD_Get_USB_Status>
 800ae24:	4603      	mov	r3, r0
 800ae26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	4608      	mov	r0, r1
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	461a      	mov	r2, r3
 800ae40:	4603      	mov	r3, r0
 800ae42:	70fb      	strb	r3, [r7, #3]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70bb      	strb	r3, [r7, #2]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae5a:	78bb      	ldrb	r3, [r7, #2]
 800ae5c:	883a      	ldrh	r2, [r7, #0]
 800ae5e:	78f9      	ldrb	r1, [r7, #3]
 800ae60:	f7f9 fb60 	bl	8004524 <HAL_PCD_EP_Open>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae68:	7bfb      	ldrb	r3, [r7, #15]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 f91c 	bl	800b0a8 <USBD_Get_USB_Status>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	460b      	mov	r3, r1
 800ae88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae98:	78fa      	ldrb	r2, [r7, #3]
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7f9 fba9 	bl	80045f4 <HAL_PCD_EP_Close>
 800aea2:	4603      	mov	r3, r0
 800aea4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aea6:	7bfb      	ldrb	r3, [r7, #15]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 f8fd 	bl	800b0a8 <USBD_Get_USB_Status>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aed6:	78fa      	ldrb	r2, [r7, #3]
 800aed8:	4611      	mov	r1, r2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7f9 fc81 	bl	80047e2 <HAL_PCD_EP_SetStall>
 800aee0:	4603      	mov	r3, r0
 800aee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 f8de 	bl	800b0a8 <USBD_Get_USB_Status>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	460b      	mov	r3, r1
 800af04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af14:	78fa      	ldrb	r2, [r7, #3]
 800af16:	4611      	mov	r1, r2
 800af18:	4618      	mov	r0, r3
 800af1a:	f7f9 fcc6 	bl	80048aa <HAL_PCD_EP_ClrStall>
 800af1e:	4603      	mov	r3, r0
 800af20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af22:	7bfb      	ldrb	r3, [r7, #15]
 800af24:	4618      	mov	r0, r3
 800af26:	f000 f8bf 	bl	800b0a8 <USBD_Get_USB_Status>
 800af2a:	4603      	mov	r3, r0
 800af2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af50:	2b00      	cmp	r3, #0
 800af52:	da0b      	bge.n	800af6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af54:	78fb      	ldrb	r3, [r7, #3]
 800af56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af5a:	68f9      	ldr	r1, [r7, #12]
 800af5c:	4613      	mov	r3, r2
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	4413      	add	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	440b      	add	r3, r1
 800af66:	333e      	adds	r3, #62	; 0x3e
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	e00b      	b.n	800af84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af6c:	78fb      	ldrb	r3, [r7, #3]
 800af6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af72:	68f9      	ldr	r1, [r7, #12]
 800af74:	4613      	mov	r3, r2
 800af76:	00db      	lsls	r3, r3, #3
 800af78:	4413      	add	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	440b      	add	r3, r1
 800af7e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800af82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af84:	4618      	mov	r0, r3
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	460b      	mov	r3, r1
 800af9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afaa:	78fa      	ldrb	r2, [r7, #3]
 800afac:	4611      	mov	r1, r2
 800afae:	4618      	mov	r0, r3
 800afb0:	f7f9 fa93 	bl	80044da <HAL_PCD_SetAddress>
 800afb4:	4603      	mov	r3, r0
 800afb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 f874 	bl	800b0a8 <USBD_Get_USB_Status>
 800afc0:	4603      	mov	r3, r0
 800afc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b086      	sub	sp, #24
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
 800afda:	460b      	mov	r3, r1
 800afdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800afec:	7af9      	ldrb	r1, [r7, #11]
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	f7f9 fbac 	bl	800474e <HAL_PCD_EP_Transmit>
 800aff6:	4603      	mov	r3, r0
 800aff8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 f853 	bl	800b0a8 <USBD_Get_USB_Status>
 800b002:	4603      	mov	r3, r0
 800b004:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b006:	7dbb      	ldrb	r3, [r7, #22]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	607a      	str	r2, [r7, #4]
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	460b      	mov	r3, r1
 800b01e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b02e:	7af9      	ldrb	r1, [r7, #11]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	f7f9 fb28 	bl	8004688 <HAL_PCD_EP_Receive>
 800b038:	4603      	mov	r3, r0
 800b03a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 f832 	bl	800b0a8 <USBD_Get_USB_Status>
 800b044:	4603      	mov	r3, r0
 800b046:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b048:	7dbb      	ldrb	r3, [r7, #22]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b082      	sub	sp, #8
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	460b      	mov	r3, r1
 800b05c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b064:	78fa      	ldrb	r2, [r7, #3]
 800b066:	4611      	mov	r1, r2
 800b068:	4618      	mov	r0, r3
 800b06a:	f7f9 fb58 	bl	800471e <HAL_PCD_EP_GetRxCount>
 800b06e:	4603      	mov	r3, r0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b080:	4b03      	ldr	r3, [pc, #12]	; (800b090 <USBD_static_malloc+0x18>)
}
 800b082:	4618      	mov	r0, r3
 800b084:	370c      	adds	r7, #12
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	20001f98 	.word	0x20001f98

0800b094 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]

}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0b6:	79fb      	ldrb	r3, [r7, #7]
 800b0b8:	2b03      	cmp	r3, #3
 800b0ba:	d817      	bhi.n	800b0ec <USBD_Get_USB_Status+0x44>
 800b0bc:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <USBD_Get_USB_Status+0x1c>)
 800b0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c2:	bf00      	nop
 800b0c4:	0800b0d5 	.word	0x0800b0d5
 800b0c8:	0800b0db 	.word	0x0800b0db
 800b0cc:	0800b0e1 	.word	0x0800b0e1
 800b0d0:	0800b0e7 	.word	0x0800b0e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d8:	e00b      	b.n	800b0f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b0de:	e008      	b.n	800b0f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0e4:	e005      	b.n	800b0f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ea:	e002      	b.n	800b0f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f0:	bf00      	nop
  }
  return usb_status;
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <siprintf>:
 800b100:	b40e      	push	{r1, r2, r3}
 800b102:	b500      	push	{lr}
 800b104:	b09c      	sub	sp, #112	; 0x70
 800b106:	ab1d      	add	r3, sp, #116	; 0x74
 800b108:	9002      	str	r0, [sp, #8]
 800b10a:	9006      	str	r0, [sp, #24]
 800b10c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b110:	4809      	ldr	r0, [pc, #36]	; (800b138 <siprintf+0x38>)
 800b112:	9107      	str	r1, [sp, #28]
 800b114:	9104      	str	r1, [sp, #16]
 800b116:	4909      	ldr	r1, [pc, #36]	; (800b13c <siprintf+0x3c>)
 800b118:	f853 2b04 	ldr.w	r2, [r3], #4
 800b11c:	9105      	str	r1, [sp, #20]
 800b11e:	6800      	ldr	r0, [r0, #0]
 800b120:	9301      	str	r3, [sp, #4]
 800b122:	a902      	add	r1, sp, #8
 800b124:	f000 f992 	bl	800b44c <_svfiprintf_r>
 800b128:	9b02      	ldr	r3, [sp, #8]
 800b12a:	2200      	movs	r2, #0
 800b12c:	701a      	strb	r2, [r3, #0]
 800b12e:	b01c      	add	sp, #112	; 0x70
 800b130:	f85d eb04 	ldr.w	lr, [sp], #4
 800b134:	b003      	add	sp, #12
 800b136:	4770      	bx	lr
 800b138:	20000148 	.word	0x20000148
 800b13c:	ffff0208 	.word	0xffff0208

0800b140 <memset>:
 800b140:	4402      	add	r2, r0
 800b142:	4603      	mov	r3, r0
 800b144:	4293      	cmp	r3, r2
 800b146:	d100      	bne.n	800b14a <memset+0xa>
 800b148:	4770      	bx	lr
 800b14a:	f803 1b01 	strb.w	r1, [r3], #1
 800b14e:	e7f9      	b.n	800b144 <memset+0x4>

0800b150 <__errno>:
 800b150:	4b01      	ldr	r3, [pc, #4]	; (800b158 <__errno+0x8>)
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	20000148 	.word	0x20000148

0800b15c <__libc_init_array>:
 800b15c:	b570      	push	{r4, r5, r6, lr}
 800b15e:	4d0d      	ldr	r5, [pc, #52]	; (800b194 <__libc_init_array+0x38>)
 800b160:	4c0d      	ldr	r4, [pc, #52]	; (800b198 <__libc_init_array+0x3c>)
 800b162:	1b64      	subs	r4, r4, r5
 800b164:	10a4      	asrs	r4, r4, #2
 800b166:	2600      	movs	r6, #0
 800b168:	42a6      	cmp	r6, r4
 800b16a:	d109      	bne.n	800b180 <__libc_init_array+0x24>
 800b16c:	4d0b      	ldr	r5, [pc, #44]	; (800b19c <__libc_init_array+0x40>)
 800b16e:	4c0c      	ldr	r4, [pc, #48]	; (800b1a0 <__libc_init_array+0x44>)
 800b170:	f002 f822 	bl	800d1b8 <_init>
 800b174:	1b64      	subs	r4, r4, r5
 800b176:	10a4      	asrs	r4, r4, #2
 800b178:	2600      	movs	r6, #0
 800b17a:	42a6      	cmp	r6, r4
 800b17c:	d105      	bne.n	800b18a <__libc_init_array+0x2e>
 800b17e:	bd70      	pop	{r4, r5, r6, pc}
 800b180:	f855 3b04 	ldr.w	r3, [r5], #4
 800b184:	4798      	blx	r3
 800b186:	3601      	adds	r6, #1
 800b188:	e7ee      	b.n	800b168 <__libc_init_array+0xc>
 800b18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b18e:	4798      	blx	r3
 800b190:	3601      	adds	r6, #1
 800b192:	e7f2      	b.n	800b17a <__libc_init_array+0x1e>
 800b194:	0800d4c8 	.word	0x0800d4c8
 800b198:	0800d4c8 	.word	0x0800d4c8
 800b19c:	0800d4c8 	.word	0x0800d4c8
 800b1a0:	0800d4cc 	.word	0x0800d4cc

0800b1a4 <__retarget_lock_acquire_recursive>:
 800b1a4:	4770      	bx	lr

0800b1a6 <__retarget_lock_release_recursive>:
 800b1a6:	4770      	bx	lr

0800b1a8 <_free_r>:
 800b1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1aa:	2900      	cmp	r1, #0
 800b1ac:	d044      	beq.n	800b238 <_free_r+0x90>
 800b1ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1b2:	9001      	str	r0, [sp, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f1a1 0404 	sub.w	r4, r1, #4
 800b1ba:	bfb8      	it	lt
 800b1bc:	18e4      	addlt	r4, r4, r3
 800b1be:	f000 f8df 	bl	800b380 <__malloc_lock>
 800b1c2:	4a1e      	ldr	r2, [pc, #120]	; (800b23c <_free_r+0x94>)
 800b1c4:	9801      	ldr	r0, [sp, #4]
 800b1c6:	6813      	ldr	r3, [r2, #0]
 800b1c8:	b933      	cbnz	r3, 800b1d8 <_free_r+0x30>
 800b1ca:	6063      	str	r3, [r4, #4]
 800b1cc:	6014      	str	r4, [r2, #0]
 800b1ce:	b003      	add	sp, #12
 800b1d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1d4:	f000 b8da 	b.w	800b38c <__malloc_unlock>
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	d908      	bls.n	800b1ee <_free_r+0x46>
 800b1dc:	6825      	ldr	r5, [r4, #0]
 800b1de:	1961      	adds	r1, r4, r5
 800b1e0:	428b      	cmp	r3, r1
 800b1e2:	bf01      	itttt	eq
 800b1e4:	6819      	ldreq	r1, [r3, #0]
 800b1e6:	685b      	ldreq	r3, [r3, #4]
 800b1e8:	1949      	addeq	r1, r1, r5
 800b1ea:	6021      	streq	r1, [r4, #0]
 800b1ec:	e7ed      	b.n	800b1ca <_free_r+0x22>
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	b10b      	cbz	r3, 800b1f8 <_free_r+0x50>
 800b1f4:	42a3      	cmp	r3, r4
 800b1f6:	d9fa      	bls.n	800b1ee <_free_r+0x46>
 800b1f8:	6811      	ldr	r1, [r2, #0]
 800b1fa:	1855      	adds	r5, r2, r1
 800b1fc:	42a5      	cmp	r5, r4
 800b1fe:	d10b      	bne.n	800b218 <_free_r+0x70>
 800b200:	6824      	ldr	r4, [r4, #0]
 800b202:	4421      	add	r1, r4
 800b204:	1854      	adds	r4, r2, r1
 800b206:	42a3      	cmp	r3, r4
 800b208:	6011      	str	r1, [r2, #0]
 800b20a:	d1e0      	bne.n	800b1ce <_free_r+0x26>
 800b20c:	681c      	ldr	r4, [r3, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	6053      	str	r3, [r2, #4]
 800b212:	440c      	add	r4, r1
 800b214:	6014      	str	r4, [r2, #0]
 800b216:	e7da      	b.n	800b1ce <_free_r+0x26>
 800b218:	d902      	bls.n	800b220 <_free_r+0x78>
 800b21a:	230c      	movs	r3, #12
 800b21c:	6003      	str	r3, [r0, #0]
 800b21e:	e7d6      	b.n	800b1ce <_free_r+0x26>
 800b220:	6825      	ldr	r5, [r4, #0]
 800b222:	1961      	adds	r1, r4, r5
 800b224:	428b      	cmp	r3, r1
 800b226:	bf04      	itt	eq
 800b228:	6819      	ldreq	r1, [r3, #0]
 800b22a:	685b      	ldreq	r3, [r3, #4]
 800b22c:	6063      	str	r3, [r4, #4]
 800b22e:	bf04      	itt	eq
 800b230:	1949      	addeq	r1, r1, r5
 800b232:	6021      	streq	r1, [r4, #0]
 800b234:	6054      	str	r4, [r2, #4]
 800b236:	e7ca      	b.n	800b1ce <_free_r+0x26>
 800b238:	b003      	add	sp, #12
 800b23a:	bd30      	pop	{r4, r5, pc}
 800b23c:	200022f8 	.word	0x200022f8

0800b240 <sbrk_aligned>:
 800b240:	b570      	push	{r4, r5, r6, lr}
 800b242:	4e0e      	ldr	r6, [pc, #56]	; (800b27c <sbrk_aligned+0x3c>)
 800b244:	460c      	mov	r4, r1
 800b246:	6831      	ldr	r1, [r6, #0]
 800b248:	4605      	mov	r5, r0
 800b24a:	b911      	cbnz	r1, 800b252 <sbrk_aligned+0x12>
 800b24c:	f000 fba6 	bl	800b99c <_sbrk_r>
 800b250:	6030      	str	r0, [r6, #0]
 800b252:	4621      	mov	r1, r4
 800b254:	4628      	mov	r0, r5
 800b256:	f000 fba1 	bl	800b99c <_sbrk_r>
 800b25a:	1c43      	adds	r3, r0, #1
 800b25c:	d00a      	beq.n	800b274 <sbrk_aligned+0x34>
 800b25e:	1cc4      	adds	r4, r0, #3
 800b260:	f024 0403 	bic.w	r4, r4, #3
 800b264:	42a0      	cmp	r0, r4
 800b266:	d007      	beq.n	800b278 <sbrk_aligned+0x38>
 800b268:	1a21      	subs	r1, r4, r0
 800b26a:	4628      	mov	r0, r5
 800b26c:	f000 fb96 	bl	800b99c <_sbrk_r>
 800b270:	3001      	adds	r0, #1
 800b272:	d101      	bne.n	800b278 <sbrk_aligned+0x38>
 800b274:	f04f 34ff 	mov.w	r4, #4294967295
 800b278:	4620      	mov	r0, r4
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	200022fc 	.word	0x200022fc

0800b280 <_malloc_r>:
 800b280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b284:	1ccd      	adds	r5, r1, #3
 800b286:	f025 0503 	bic.w	r5, r5, #3
 800b28a:	3508      	adds	r5, #8
 800b28c:	2d0c      	cmp	r5, #12
 800b28e:	bf38      	it	cc
 800b290:	250c      	movcc	r5, #12
 800b292:	2d00      	cmp	r5, #0
 800b294:	4607      	mov	r7, r0
 800b296:	db01      	blt.n	800b29c <_malloc_r+0x1c>
 800b298:	42a9      	cmp	r1, r5
 800b29a:	d905      	bls.n	800b2a8 <_malloc_r+0x28>
 800b29c:	230c      	movs	r3, #12
 800b29e:	603b      	str	r3, [r7, #0]
 800b2a0:	2600      	movs	r6, #0
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b37c <_malloc_r+0xfc>
 800b2ac:	f000 f868 	bl	800b380 <__malloc_lock>
 800b2b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b2b4:	461c      	mov	r4, r3
 800b2b6:	bb5c      	cbnz	r4, 800b310 <_malloc_r+0x90>
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	4638      	mov	r0, r7
 800b2bc:	f7ff ffc0 	bl	800b240 <sbrk_aligned>
 800b2c0:	1c43      	adds	r3, r0, #1
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	d155      	bne.n	800b372 <_malloc_r+0xf2>
 800b2c6:	f8d8 4000 	ldr.w	r4, [r8]
 800b2ca:	4626      	mov	r6, r4
 800b2cc:	2e00      	cmp	r6, #0
 800b2ce:	d145      	bne.n	800b35c <_malloc_r+0xdc>
 800b2d0:	2c00      	cmp	r4, #0
 800b2d2:	d048      	beq.n	800b366 <_malloc_r+0xe6>
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	4638      	mov	r0, r7
 800b2da:	eb04 0903 	add.w	r9, r4, r3
 800b2de:	f000 fb5d 	bl	800b99c <_sbrk_r>
 800b2e2:	4581      	cmp	r9, r0
 800b2e4:	d13f      	bne.n	800b366 <_malloc_r+0xe6>
 800b2e6:	6821      	ldr	r1, [r4, #0]
 800b2e8:	1a6d      	subs	r5, r5, r1
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	f7ff ffa7 	bl	800b240 <sbrk_aligned>
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	d037      	beq.n	800b366 <_malloc_r+0xe6>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	442b      	add	r3, r5
 800b2fa:	6023      	str	r3, [r4, #0]
 800b2fc:	f8d8 3000 	ldr.w	r3, [r8]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d038      	beq.n	800b376 <_malloc_r+0xf6>
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	42a2      	cmp	r2, r4
 800b308:	d12b      	bne.n	800b362 <_malloc_r+0xe2>
 800b30a:	2200      	movs	r2, #0
 800b30c:	605a      	str	r2, [r3, #4]
 800b30e:	e00f      	b.n	800b330 <_malloc_r+0xb0>
 800b310:	6822      	ldr	r2, [r4, #0]
 800b312:	1b52      	subs	r2, r2, r5
 800b314:	d41f      	bmi.n	800b356 <_malloc_r+0xd6>
 800b316:	2a0b      	cmp	r2, #11
 800b318:	d917      	bls.n	800b34a <_malloc_r+0xca>
 800b31a:	1961      	adds	r1, r4, r5
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	6025      	str	r5, [r4, #0]
 800b320:	bf18      	it	ne
 800b322:	6059      	strne	r1, [r3, #4]
 800b324:	6863      	ldr	r3, [r4, #4]
 800b326:	bf08      	it	eq
 800b328:	f8c8 1000 	streq.w	r1, [r8]
 800b32c:	5162      	str	r2, [r4, r5]
 800b32e:	604b      	str	r3, [r1, #4]
 800b330:	4638      	mov	r0, r7
 800b332:	f104 060b 	add.w	r6, r4, #11
 800b336:	f000 f829 	bl	800b38c <__malloc_unlock>
 800b33a:	f026 0607 	bic.w	r6, r6, #7
 800b33e:	1d23      	adds	r3, r4, #4
 800b340:	1af2      	subs	r2, r6, r3
 800b342:	d0ae      	beq.n	800b2a2 <_malloc_r+0x22>
 800b344:	1b9b      	subs	r3, r3, r6
 800b346:	50a3      	str	r3, [r4, r2]
 800b348:	e7ab      	b.n	800b2a2 <_malloc_r+0x22>
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	6862      	ldr	r2, [r4, #4]
 800b34e:	d1dd      	bne.n	800b30c <_malloc_r+0x8c>
 800b350:	f8c8 2000 	str.w	r2, [r8]
 800b354:	e7ec      	b.n	800b330 <_malloc_r+0xb0>
 800b356:	4623      	mov	r3, r4
 800b358:	6864      	ldr	r4, [r4, #4]
 800b35a:	e7ac      	b.n	800b2b6 <_malloc_r+0x36>
 800b35c:	4634      	mov	r4, r6
 800b35e:	6876      	ldr	r6, [r6, #4]
 800b360:	e7b4      	b.n	800b2cc <_malloc_r+0x4c>
 800b362:	4613      	mov	r3, r2
 800b364:	e7cc      	b.n	800b300 <_malloc_r+0x80>
 800b366:	230c      	movs	r3, #12
 800b368:	603b      	str	r3, [r7, #0]
 800b36a:	4638      	mov	r0, r7
 800b36c:	f000 f80e 	bl	800b38c <__malloc_unlock>
 800b370:	e797      	b.n	800b2a2 <_malloc_r+0x22>
 800b372:	6025      	str	r5, [r4, #0]
 800b374:	e7dc      	b.n	800b330 <_malloc_r+0xb0>
 800b376:	605b      	str	r3, [r3, #4]
 800b378:	deff      	udf	#255	; 0xff
 800b37a:	bf00      	nop
 800b37c:	200022f8 	.word	0x200022f8

0800b380 <__malloc_lock>:
 800b380:	4801      	ldr	r0, [pc, #4]	; (800b388 <__malloc_lock+0x8>)
 800b382:	f7ff bf0f 	b.w	800b1a4 <__retarget_lock_acquire_recursive>
 800b386:	bf00      	nop
 800b388:	200022f4 	.word	0x200022f4

0800b38c <__malloc_unlock>:
 800b38c:	4801      	ldr	r0, [pc, #4]	; (800b394 <__malloc_unlock+0x8>)
 800b38e:	f7ff bf0a 	b.w	800b1a6 <__retarget_lock_release_recursive>
 800b392:	bf00      	nop
 800b394:	200022f4 	.word	0x200022f4

0800b398 <__ssputs_r>:
 800b398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39c:	688e      	ldr	r6, [r1, #8]
 800b39e:	461f      	mov	r7, r3
 800b3a0:	42be      	cmp	r6, r7
 800b3a2:	680b      	ldr	r3, [r1, #0]
 800b3a4:	4682      	mov	sl, r0
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	4690      	mov	r8, r2
 800b3aa:	d82c      	bhi.n	800b406 <__ssputs_r+0x6e>
 800b3ac:	898a      	ldrh	r2, [r1, #12]
 800b3ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3b2:	d026      	beq.n	800b402 <__ssputs_r+0x6a>
 800b3b4:	6965      	ldr	r5, [r4, #20]
 800b3b6:	6909      	ldr	r1, [r1, #16]
 800b3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3bc:	eba3 0901 	sub.w	r9, r3, r1
 800b3c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3c4:	1c7b      	adds	r3, r7, #1
 800b3c6:	444b      	add	r3, r9
 800b3c8:	106d      	asrs	r5, r5, #1
 800b3ca:	429d      	cmp	r5, r3
 800b3cc:	bf38      	it	cc
 800b3ce:	461d      	movcc	r5, r3
 800b3d0:	0553      	lsls	r3, r2, #21
 800b3d2:	d527      	bpl.n	800b424 <__ssputs_r+0x8c>
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	f7ff ff53 	bl	800b280 <_malloc_r>
 800b3da:	4606      	mov	r6, r0
 800b3dc:	b360      	cbz	r0, 800b438 <__ssputs_r+0xa0>
 800b3de:	6921      	ldr	r1, [r4, #16]
 800b3e0:	464a      	mov	r2, r9
 800b3e2:	f000 faeb 	bl	800b9bc <memcpy>
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	6126      	str	r6, [r4, #16]
 800b3f4:	6165      	str	r5, [r4, #20]
 800b3f6:	444e      	add	r6, r9
 800b3f8:	eba5 0509 	sub.w	r5, r5, r9
 800b3fc:	6026      	str	r6, [r4, #0]
 800b3fe:	60a5      	str	r5, [r4, #8]
 800b400:	463e      	mov	r6, r7
 800b402:	42be      	cmp	r6, r7
 800b404:	d900      	bls.n	800b408 <__ssputs_r+0x70>
 800b406:	463e      	mov	r6, r7
 800b408:	6820      	ldr	r0, [r4, #0]
 800b40a:	4632      	mov	r2, r6
 800b40c:	4641      	mov	r1, r8
 800b40e:	f000 faab 	bl	800b968 <memmove>
 800b412:	68a3      	ldr	r3, [r4, #8]
 800b414:	1b9b      	subs	r3, r3, r6
 800b416:	60a3      	str	r3, [r4, #8]
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	4433      	add	r3, r6
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	2000      	movs	r0, #0
 800b420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b424:	462a      	mov	r2, r5
 800b426:	f000 fad7 	bl	800b9d8 <_realloc_r>
 800b42a:	4606      	mov	r6, r0
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d1e0      	bne.n	800b3f2 <__ssputs_r+0x5a>
 800b430:	6921      	ldr	r1, [r4, #16]
 800b432:	4650      	mov	r0, sl
 800b434:	f7ff feb8 	bl	800b1a8 <_free_r>
 800b438:	230c      	movs	r3, #12
 800b43a:	f8ca 3000 	str.w	r3, [sl]
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b444:	81a3      	strh	r3, [r4, #12]
 800b446:	f04f 30ff 	mov.w	r0, #4294967295
 800b44a:	e7e9      	b.n	800b420 <__ssputs_r+0x88>

0800b44c <_svfiprintf_r>:
 800b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b450:	4698      	mov	r8, r3
 800b452:	898b      	ldrh	r3, [r1, #12]
 800b454:	061b      	lsls	r3, r3, #24
 800b456:	b09d      	sub	sp, #116	; 0x74
 800b458:	4607      	mov	r7, r0
 800b45a:	460d      	mov	r5, r1
 800b45c:	4614      	mov	r4, r2
 800b45e:	d50e      	bpl.n	800b47e <_svfiprintf_r+0x32>
 800b460:	690b      	ldr	r3, [r1, #16]
 800b462:	b963      	cbnz	r3, 800b47e <_svfiprintf_r+0x32>
 800b464:	2140      	movs	r1, #64	; 0x40
 800b466:	f7ff ff0b 	bl	800b280 <_malloc_r>
 800b46a:	6028      	str	r0, [r5, #0]
 800b46c:	6128      	str	r0, [r5, #16]
 800b46e:	b920      	cbnz	r0, 800b47a <_svfiprintf_r+0x2e>
 800b470:	230c      	movs	r3, #12
 800b472:	603b      	str	r3, [r7, #0]
 800b474:	f04f 30ff 	mov.w	r0, #4294967295
 800b478:	e0d0      	b.n	800b61c <_svfiprintf_r+0x1d0>
 800b47a:	2340      	movs	r3, #64	; 0x40
 800b47c:	616b      	str	r3, [r5, #20]
 800b47e:	2300      	movs	r3, #0
 800b480:	9309      	str	r3, [sp, #36]	; 0x24
 800b482:	2320      	movs	r3, #32
 800b484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b488:	f8cd 800c 	str.w	r8, [sp, #12]
 800b48c:	2330      	movs	r3, #48	; 0x30
 800b48e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b634 <_svfiprintf_r+0x1e8>
 800b492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b496:	f04f 0901 	mov.w	r9, #1
 800b49a:	4623      	mov	r3, r4
 800b49c:	469a      	mov	sl, r3
 800b49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a2:	b10a      	cbz	r2, 800b4a8 <_svfiprintf_r+0x5c>
 800b4a4:	2a25      	cmp	r2, #37	; 0x25
 800b4a6:	d1f9      	bne.n	800b49c <_svfiprintf_r+0x50>
 800b4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b4ac:	d00b      	beq.n	800b4c6 <_svfiprintf_r+0x7a>
 800b4ae:	465b      	mov	r3, fp
 800b4b0:	4622      	mov	r2, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	4638      	mov	r0, r7
 800b4b6:	f7ff ff6f 	bl	800b398 <__ssputs_r>
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	f000 80a9 	beq.w	800b612 <_svfiprintf_r+0x1c6>
 800b4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4c2:	445a      	add	r2, fp
 800b4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f000 80a1 	beq.w	800b612 <_svfiprintf_r+0x1c6>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4da:	f10a 0a01 	add.w	sl, sl, #1
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	9307      	str	r3, [sp, #28]
 800b4e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4e6:	931a      	str	r3, [sp, #104]	; 0x68
 800b4e8:	4654      	mov	r4, sl
 800b4ea:	2205      	movs	r2, #5
 800b4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f0:	4850      	ldr	r0, [pc, #320]	; (800b634 <_svfiprintf_r+0x1e8>)
 800b4f2:	f7f4 fe75 	bl	80001e0 <memchr>
 800b4f6:	9a04      	ldr	r2, [sp, #16]
 800b4f8:	b9d8      	cbnz	r0, 800b532 <_svfiprintf_r+0xe6>
 800b4fa:	06d0      	lsls	r0, r2, #27
 800b4fc:	bf44      	itt	mi
 800b4fe:	2320      	movmi	r3, #32
 800b500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b504:	0711      	lsls	r1, r2, #28
 800b506:	bf44      	itt	mi
 800b508:	232b      	movmi	r3, #43	; 0x2b
 800b50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b50e:	f89a 3000 	ldrb.w	r3, [sl]
 800b512:	2b2a      	cmp	r3, #42	; 0x2a
 800b514:	d015      	beq.n	800b542 <_svfiprintf_r+0xf6>
 800b516:	9a07      	ldr	r2, [sp, #28]
 800b518:	4654      	mov	r4, sl
 800b51a:	2000      	movs	r0, #0
 800b51c:	f04f 0c0a 	mov.w	ip, #10
 800b520:	4621      	mov	r1, r4
 800b522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b526:	3b30      	subs	r3, #48	; 0x30
 800b528:	2b09      	cmp	r3, #9
 800b52a:	d94d      	bls.n	800b5c8 <_svfiprintf_r+0x17c>
 800b52c:	b1b0      	cbz	r0, 800b55c <_svfiprintf_r+0x110>
 800b52e:	9207      	str	r2, [sp, #28]
 800b530:	e014      	b.n	800b55c <_svfiprintf_r+0x110>
 800b532:	eba0 0308 	sub.w	r3, r0, r8
 800b536:	fa09 f303 	lsl.w	r3, r9, r3
 800b53a:	4313      	orrs	r3, r2
 800b53c:	9304      	str	r3, [sp, #16]
 800b53e:	46a2      	mov	sl, r4
 800b540:	e7d2      	b.n	800b4e8 <_svfiprintf_r+0x9c>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	1d19      	adds	r1, r3, #4
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	9103      	str	r1, [sp, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	bfbb      	ittet	lt
 800b54e:	425b      	neglt	r3, r3
 800b550:	f042 0202 	orrlt.w	r2, r2, #2
 800b554:	9307      	strge	r3, [sp, #28]
 800b556:	9307      	strlt	r3, [sp, #28]
 800b558:	bfb8      	it	lt
 800b55a:	9204      	strlt	r2, [sp, #16]
 800b55c:	7823      	ldrb	r3, [r4, #0]
 800b55e:	2b2e      	cmp	r3, #46	; 0x2e
 800b560:	d10c      	bne.n	800b57c <_svfiprintf_r+0x130>
 800b562:	7863      	ldrb	r3, [r4, #1]
 800b564:	2b2a      	cmp	r3, #42	; 0x2a
 800b566:	d134      	bne.n	800b5d2 <_svfiprintf_r+0x186>
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	1d1a      	adds	r2, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	9203      	str	r2, [sp, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	bfb8      	it	lt
 800b574:	f04f 33ff 	movlt.w	r3, #4294967295
 800b578:	3402      	adds	r4, #2
 800b57a:	9305      	str	r3, [sp, #20]
 800b57c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b644 <_svfiprintf_r+0x1f8>
 800b580:	7821      	ldrb	r1, [r4, #0]
 800b582:	2203      	movs	r2, #3
 800b584:	4650      	mov	r0, sl
 800b586:	f7f4 fe2b 	bl	80001e0 <memchr>
 800b58a:	b138      	cbz	r0, 800b59c <_svfiprintf_r+0x150>
 800b58c:	9b04      	ldr	r3, [sp, #16]
 800b58e:	eba0 000a 	sub.w	r0, r0, sl
 800b592:	2240      	movs	r2, #64	; 0x40
 800b594:	4082      	lsls	r2, r0
 800b596:	4313      	orrs	r3, r2
 800b598:	3401      	adds	r4, #1
 800b59a:	9304      	str	r3, [sp, #16]
 800b59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a0:	4825      	ldr	r0, [pc, #148]	; (800b638 <_svfiprintf_r+0x1ec>)
 800b5a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5a6:	2206      	movs	r2, #6
 800b5a8:	f7f4 fe1a 	bl	80001e0 <memchr>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d038      	beq.n	800b622 <_svfiprintf_r+0x1d6>
 800b5b0:	4b22      	ldr	r3, [pc, #136]	; (800b63c <_svfiprintf_r+0x1f0>)
 800b5b2:	bb1b      	cbnz	r3, 800b5fc <_svfiprintf_r+0x1b0>
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	3307      	adds	r3, #7
 800b5b8:	f023 0307 	bic.w	r3, r3, #7
 800b5bc:	3308      	adds	r3, #8
 800b5be:	9303      	str	r3, [sp, #12]
 800b5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c2:	4433      	add	r3, r6
 800b5c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c6:	e768      	b.n	800b49a <_svfiprintf_r+0x4e>
 800b5c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	e7a6      	b.n	800b520 <_svfiprintf_r+0xd4>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	3401      	adds	r4, #1
 800b5d6:	9305      	str	r3, [sp, #20]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	f04f 0c0a 	mov.w	ip, #10
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5e4:	3a30      	subs	r2, #48	; 0x30
 800b5e6:	2a09      	cmp	r2, #9
 800b5e8:	d903      	bls.n	800b5f2 <_svfiprintf_r+0x1a6>
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0c6      	beq.n	800b57c <_svfiprintf_r+0x130>
 800b5ee:	9105      	str	r1, [sp, #20]
 800b5f0:	e7c4      	b.n	800b57c <_svfiprintf_r+0x130>
 800b5f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e7f0      	b.n	800b5de <_svfiprintf_r+0x192>
 800b5fc:	ab03      	add	r3, sp, #12
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	462a      	mov	r2, r5
 800b602:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <_svfiprintf_r+0x1f4>)
 800b604:	a904      	add	r1, sp, #16
 800b606:	4638      	mov	r0, r7
 800b608:	f3af 8000 	nop.w
 800b60c:	1c42      	adds	r2, r0, #1
 800b60e:	4606      	mov	r6, r0
 800b610:	d1d6      	bne.n	800b5c0 <_svfiprintf_r+0x174>
 800b612:	89ab      	ldrh	r3, [r5, #12]
 800b614:	065b      	lsls	r3, r3, #25
 800b616:	f53f af2d 	bmi.w	800b474 <_svfiprintf_r+0x28>
 800b61a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b61c:	b01d      	add	sp, #116	; 0x74
 800b61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b622:	ab03      	add	r3, sp, #12
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	462a      	mov	r2, r5
 800b628:	4b05      	ldr	r3, [pc, #20]	; (800b640 <_svfiprintf_r+0x1f4>)
 800b62a:	a904      	add	r1, sp, #16
 800b62c:	4638      	mov	r0, r7
 800b62e:	f000 f879 	bl	800b724 <_printf_i>
 800b632:	e7eb      	b.n	800b60c <_svfiprintf_r+0x1c0>
 800b634:	0800d240 	.word	0x0800d240
 800b638:	0800d24a 	.word	0x0800d24a
 800b63c:	00000000 	.word	0x00000000
 800b640:	0800b399 	.word	0x0800b399
 800b644:	0800d246 	.word	0x0800d246

0800b648 <_printf_common>:
 800b648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b64c:	4616      	mov	r6, r2
 800b64e:	4699      	mov	r9, r3
 800b650:	688a      	ldr	r2, [r1, #8]
 800b652:	690b      	ldr	r3, [r1, #16]
 800b654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b658:	4293      	cmp	r3, r2
 800b65a:	bfb8      	it	lt
 800b65c:	4613      	movlt	r3, r2
 800b65e:	6033      	str	r3, [r6, #0]
 800b660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b664:	4607      	mov	r7, r0
 800b666:	460c      	mov	r4, r1
 800b668:	b10a      	cbz	r2, 800b66e <_printf_common+0x26>
 800b66a:	3301      	adds	r3, #1
 800b66c:	6033      	str	r3, [r6, #0]
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	0699      	lsls	r1, r3, #26
 800b672:	bf42      	ittt	mi
 800b674:	6833      	ldrmi	r3, [r6, #0]
 800b676:	3302      	addmi	r3, #2
 800b678:	6033      	strmi	r3, [r6, #0]
 800b67a:	6825      	ldr	r5, [r4, #0]
 800b67c:	f015 0506 	ands.w	r5, r5, #6
 800b680:	d106      	bne.n	800b690 <_printf_common+0x48>
 800b682:	f104 0a19 	add.w	sl, r4, #25
 800b686:	68e3      	ldr	r3, [r4, #12]
 800b688:	6832      	ldr	r2, [r6, #0]
 800b68a:	1a9b      	subs	r3, r3, r2
 800b68c:	42ab      	cmp	r3, r5
 800b68e:	dc26      	bgt.n	800b6de <_printf_common+0x96>
 800b690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b694:	1e13      	subs	r3, r2, #0
 800b696:	6822      	ldr	r2, [r4, #0]
 800b698:	bf18      	it	ne
 800b69a:	2301      	movne	r3, #1
 800b69c:	0692      	lsls	r2, r2, #26
 800b69e:	d42b      	bmi.n	800b6f8 <_printf_common+0xb0>
 800b6a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6a4:	4649      	mov	r1, r9
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	47c0      	blx	r8
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	d01e      	beq.n	800b6ec <_printf_common+0xa4>
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	6922      	ldr	r2, [r4, #16]
 800b6b2:	f003 0306 	and.w	r3, r3, #6
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	bf02      	ittt	eq
 800b6ba:	68e5      	ldreq	r5, [r4, #12]
 800b6bc:	6833      	ldreq	r3, [r6, #0]
 800b6be:	1aed      	subeq	r5, r5, r3
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	bf0c      	ite	eq
 800b6c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6c8:	2500      	movne	r5, #0
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	bfc4      	itt	gt
 800b6ce:	1a9b      	subgt	r3, r3, r2
 800b6d0:	18ed      	addgt	r5, r5, r3
 800b6d2:	2600      	movs	r6, #0
 800b6d4:	341a      	adds	r4, #26
 800b6d6:	42b5      	cmp	r5, r6
 800b6d8:	d11a      	bne.n	800b710 <_printf_common+0xc8>
 800b6da:	2000      	movs	r0, #0
 800b6dc:	e008      	b.n	800b6f0 <_printf_common+0xa8>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	4652      	mov	r2, sl
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	4638      	mov	r0, r7
 800b6e6:	47c0      	blx	r8
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d103      	bne.n	800b6f4 <_printf_common+0xac>
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f4:	3501      	adds	r5, #1
 800b6f6:	e7c6      	b.n	800b686 <_printf_common+0x3e>
 800b6f8:	18e1      	adds	r1, r4, r3
 800b6fa:	1c5a      	adds	r2, r3, #1
 800b6fc:	2030      	movs	r0, #48	; 0x30
 800b6fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b702:	4422      	add	r2, r4
 800b704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b70c:	3302      	adds	r3, #2
 800b70e:	e7c7      	b.n	800b6a0 <_printf_common+0x58>
 800b710:	2301      	movs	r3, #1
 800b712:	4622      	mov	r2, r4
 800b714:	4649      	mov	r1, r9
 800b716:	4638      	mov	r0, r7
 800b718:	47c0      	blx	r8
 800b71a:	3001      	adds	r0, #1
 800b71c:	d0e6      	beq.n	800b6ec <_printf_common+0xa4>
 800b71e:	3601      	adds	r6, #1
 800b720:	e7d9      	b.n	800b6d6 <_printf_common+0x8e>
	...

0800b724 <_printf_i>:
 800b724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b728:	7e0f      	ldrb	r7, [r1, #24]
 800b72a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b72c:	2f78      	cmp	r7, #120	; 0x78
 800b72e:	4691      	mov	r9, r2
 800b730:	4680      	mov	r8, r0
 800b732:	460c      	mov	r4, r1
 800b734:	469a      	mov	sl, r3
 800b736:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b73a:	d807      	bhi.n	800b74c <_printf_i+0x28>
 800b73c:	2f62      	cmp	r7, #98	; 0x62
 800b73e:	d80a      	bhi.n	800b756 <_printf_i+0x32>
 800b740:	2f00      	cmp	r7, #0
 800b742:	f000 80d4 	beq.w	800b8ee <_printf_i+0x1ca>
 800b746:	2f58      	cmp	r7, #88	; 0x58
 800b748:	f000 80c0 	beq.w	800b8cc <_printf_i+0x1a8>
 800b74c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b754:	e03a      	b.n	800b7cc <_printf_i+0xa8>
 800b756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b75a:	2b15      	cmp	r3, #21
 800b75c:	d8f6      	bhi.n	800b74c <_printf_i+0x28>
 800b75e:	a101      	add	r1, pc, #4	; (adr r1, 800b764 <_printf_i+0x40>)
 800b760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b764:	0800b7bd 	.word	0x0800b7bd
 800b768:	0800b7d1 	.word	0x0800b7d1
 800b76c:	0800b74d 	.word	0x0800b74d
 800b770:	0800b74d 	.word	0x0800b74d
 800b774:	0800b74d 	.word	0x0800b74d
 800b778:	0800b74d 	.word	0x0800b74d
 800b77c:	0800b7d1 	.word	0x0800b7d1
 800b780:	0800b74d 	.word	0x0800b74d
 800b784:	0800b74d 	.word	0x0800b74d
 800b788:	0800b74d 	.word	0x0800b74d
 800b78c:	0800b74d 	.word	0x0800b74d
 800b790:	0800b8d5 	.word	0x0800b8d5
 800b794:	0800b7fd 	.word	0x0800b7fd
 800b798:	0800b88f 	.word	0x0800b88f
 800b79c:	0800b74d 	.word	0x0800b74d
 800b7a0:	0800b74d 	.word	0x0800b74d
 800b7a4:	0800b8f7 	.word	0x0800b8f7
 800b7a8:	0800b74d 	.word	0x0800b74d
 800b7ac:	0800b7fd 	.word	0x0800b7fd
 800b7b0:	0800b74d 	.word	0x0800b74d
 800b7b4:	0800b74d 	.word	0x0800b74d
 800b7b8:	0800b897 	.word	0x0800b897
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	1d1a      	adds	r2, r3, #4
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	602a      	str	r2, [r5, #0]
 800b7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e09f      	b.n	800b910 <_printf_i+0x1ec>
 800b7d0:	6820      	ldr	r0, [r4, #0]
 800b7d2:	682b      	ldr	r3, [r5, #0]
 800b7d4:	0607      	lsls	r7, r0, #24
 800b7d6:	f103 0104 	add.w	r1, r3, #4
 800b7da:	6029      	str	r1, [r5, #0]
 800b7dc:	d501      	bpl.n	800b7e2 <_printf_i+0xbe>
 800b7de:	681e      	ldr	r6, [r3, #0]
 800b7e0:	e003      	b.n	800b7ea <_printf_i+0xc6>
 800b7e2:	0646      	lsls	r6, r0, #25
 800b7e4:	d5fb      	bpl.n	800b7de <_printf_i+0xba>
 800b7e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b7ea:	2e00      	cmp	r6, #0
 800b7ec:	da03      	bge.n	800b7f6 <_printf_i+0xd2>
 800b7ee:	232d      	movs	r3, #45	; 0x2d
 800b7f0:	4276      	negs	r6, r6
 800b7f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7f6:	485a      	ldr	r0, [pc, #360]	; (800b960 <_printf_i+0x23c>)
 800b7f8:	230a      	movs	r3, #10
 800b7fa:	e012      	b.n	800b822 <_printf_i+0xfe>
 800b7fc:	682b      	ldr	r3, [r5, #0]
 800b7fe:	6820      	ldr	r0, [r4, #0]
 800b800:	1d19      	adds	r1, r3, #4
 800b802:	6029      	str	r1, [r5, #0]
 800b804:	0605      	lsls	r5, r0, #24
 800b806:	d501      	bpl.n	800b80c <_printf_i+0xe8>
 800b808:	681e      	ldr	r6, [r3, #0]
 800b80a:	e002      	b.n	800b812 <_printf_i+0xee>
 800b80c:	0641      	lsls	r1, r0, #25
 800b80e:	d5fb      	bpl.n	800b808 <_printf_i+0xe4>
 800b810:	881e      	ldrh	r6, [r3, #0]
 800b812:	4853      	ldr	r0, [pc, #332]	; (800b960 <_printf_i+0x23c>)
 800b814:	2f6f      	cmp	r7, #111	; 0x6f
 800b816:	bf0c      	ite	eq
 800b818:	2308      	moveq	r3, #8
 800b81a:	230a      	movne	r3, #10
 800b81c:	2100      	movs	r1, #0
 800b81e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b822:	6865      	ldr	r5, [r4, #4]
 800b824:	60a5      	str	r5, [r4, #8]
 800b826:	2d00      	cmp	r5, #0
 800b828:	bfa2      	ittt	ge
 800b82a:	6821      	ldrge	r1, [r4, #0]
 800b82c:	f021 0104 	bicge.w	r1, r1, #4
 800b830:	6021      	strge	r1, [r4, #0]
 800b832:	b90e      	cbnz	r6, 800b838 <_printf_i+0x114>
 800b834:	2d00      	cmp	r5, #0
 800b836:	d04b      	beq.n	800b8d0 <_printf_i+0x1ac>
 800b838:	4615      	mov	r5, r2
 800b83a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b83e:	fb03 6711 	mls	r7, r3, r1, r6
 800b842:	5dc7      	ldrb	r7, [r0, r7]
 800b844:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b848:	4637      	mov	r7, r6
 800b84a:	42bb      	cmp	r3, r7
 800b84c:	460e      	mov	r6, r1
 800b84e:	d9f4      	bls.n	800b83a <_printf_i+0x116>
 800b850:	2b08      	cmp	r3, #8
 800b852:	d10b      	bne.n	800b86c <_printf_i+0x148>
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	07de      	lsls	r6, r3, #31
 800b858:	d508      	bpl.n	800b86c <_printf_i+0x148>
 800b85a:	6923      	ldr	r3, [r4, #16]
 800b85c:	6861      	ldr	r1, [r4, #4]
 800b85e:	4299      	cmp	r1, r3
 800b860:	bfde      	ittt	le
 800b862:	2330      	movle	r3, #48	; 0x30
 800b864:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b868:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b86c:	1b52      	subs	r2, r2, r5
 800b86e:	6122      	str	r2, [r4, #16]
 800b870:	f8cd a000 	str.w	sl, [sp]
 800b874:	464b      	mov	r3, r9
 800b876:	aa03      	add	r2, sp, #12
 800b878:	4621      	mov	r1, r4
 800b87a:	4640      	mov	r0, r8
 800b87c:	f7ff fee4 	bl	800b648 <_printf_common>
 800b880:	3001      	adds	r0, #1
 800b882:	d14a      	bne.n	800b91a <_printf_i+0x1f6>
 800b884:	f04f 30ff 	mov.w	r0, #4294967295
 800b888:	b004      	add	sp, #16
 800b88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	f043 0320 	orr.w	r3, r3, #32
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	4833      	ldr	r0, [pc, #204]	; (800b964 <_printf_i+0x240>)
 800b898:	2778      	movs	r7, #120	; 0x78
 800b89a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	6829      	ldr	r1, [r5, #0]
 800b8a2:	061f      	lsls	r7, r3, #24
 800b8a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8a8:	d402      	bmi.n	800b8b0 <_printf_i+0x18c>
 800b8aa:	065f      	lsls	r7, r3, #25
 800b8ac:	bf48      	it	mi
 800b8ae:	b2b6      	uxthmi	r6, r6
 800b8b0:	07df      	lsls	r7, r3, #31
 800b8b2:	bf48      	it	mi
 800b8b4:	f043 0320 	orrmi.w	r3, r3, #32
 800b8b8:	6029      	str	r1, [r5, #0]
 800b8ba:	bf48      	it	mi
 800b8bc:	6023      	strmi	r3, [r4, #0]
 800b8be:	b91e      	cbnz	r6, 800b8c8 <_printf_i+0x1a4>
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	f023 0320 	bic.w	r3, r3, #32
 800b8c6:	6023      	str	r3, [r4, #0]
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	e7a7      	b.n	800b81c <_printf_i+0xf8>
 800b8cc:	4824      	ldr	r0, [pc, #144]	; (800b960 <_printf_i+0x23c>)
 800b8ce:	e7e4      	b.n	800b89a <_printf_i+0x176>
 800b8d0:	4615      	mov	r5, r2
 800b8d2:	e7bd      	b.n	800b850 <_printf_i+0x12c>
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	6826      	ldr	r6, [r4, #0]
 800b8d8:	6961      	ldr	r1, [r4, #20]
 800b8da:	1d18      	adds	r0, r3, #4
 800b8dc:	6028      	str	r0, [r5, #0]
 800b8de:	0635      	lsls	r5, r6, #24
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	d501      	bpl.n	800b8e8 <_printf_i+0x1c4>
 800b8e4:	6019      	str	r1, [r3, #0]
 800b8e6:	e002      	b.n	800b8ee <_printf_i+0x1ca>
 800b8e8:	0670      	lsls	r0, r6, #25
 800b8ea:	d5fb      	bpl.n	800b8e4 <_printf_i+0x1c0>
 800b8ec:	8019      	strh	r1, [r3, #0]
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	6123      	str	r3, [r4, #16]
 800b8f2:	4615      	mov	r5, r2
 800b8f4:	e7bc      	b.n	800b870 <_printf_i+0x14c>
 800b8f6:	682b      	ldr	r3, [r5, #0]
 800b8f8:	1d1a      	adds	r2, r3, #4
 800b8fa:	602a      	str	r2, [r5, #0]
 800b8fc:	681d      	ldr	r5, [r3, #0]
 800b8fe:	6862      	ldr	r2, [r4, #4]
 800b900:	2100      	movs	r1, #0
 800b902:	4628      	mov	r0, r5
 800b904:	f7f4 fc6c 	bl	80001e0 <memchr>
 800b908:	b108      	cbz	r0, 800b90e <_printf_i+0x1ea>
 800b90a:	1b40      	subs	r0, r0, r5
 800b90c:	6060      	str	r0, [r4, #4]
 800b90e:	6863      	ldr	r3, [r4, #4]
 800b910:	6123      	str	r3, [r4, #16]
 800b912:	2300      	movs	r3, #0
 800b914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b918:	e7aa      	b.n	800b870 <_printf_i+0x14c>
 800b91a:	6923      	ldr	r3, [r4, #16]
 800b91c:	462a      	mov	r2, r5
 800b91e:	4649      	mov	r1, r9
 800b920:	4640      	mov	r0, r8
 800b922:	47d0      	blx	sl
 800b924:	3001      	adds	r0, #1
 800b926:	d0ad      	beq.n	800b884 <_printf_i+0x160>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	079b      	lsls	r3, r3, #30
 800b92c:	d413      	bmi.n	800b956 <_printf_i+0x232>
 800b92e:	68e0      	ldr	r0, [r4, #12]
 800b930:	9b03      	ldr	r3, [sp, #12]
 800b932:	4298      	cmp	r0, r3
 800b934:	bfb8      	it	lt
 800b936:	4618      	movlt	r0, r3
 800b938:	e7a6      	b.n	800b888 <_printf_i+0x164>
 800b93a:	2301      	movs	r3, #1
 800b93c:	4632      	mov	r2, r6
 800b93e:	4649      	mov	r1, r9
 800b940:	4640      	mov	r0, r8
 800b942:	47d0      	blx	sl
 800b944:	3001      	adds	r0, #1
 800b946:	d09d      	beq.n	800b884 <_printf_i+0x160>
 800b948:	3501      	adds	r5, #1
 800b94a:	68e3      	ldr	r3, [r4, #12]
 800b94c:	9903      	ldr	r1, [sp, #12]
 800b94e:	1a5b      	subs	r3, r3, r1
 800b950:	42ab      	cmp	r3, r5
 800b952:	dcf2      	bgt.n	800b93a <_printf_i+0x216>
 800b954:	e7eb      	b.n	800b92e <_printf_i+0x20a>
 800b956:	2500      	movs	r5, #0
 800b958:	f104 0619 	add.w	r6, r4, #25
 800b95c:	e7f5      	b.n	800b94a <_printf_i+0x226>
 800b95e:	bf00      	nop
 800b960:	0800d251 	.word	0x0800d251
 800b964:	0800d262 	.word	0x0800d262

0800b968 <memmove>:
 800b968:	4288      	cmp	r0, r1
 800b96a:	b510      	push	{r4, lr}
 800b96c:	eb01 0402 	add.w	r4, r1, r2
 800b970:	d902      	bls.n	800b978 <memmove+0x10>
 800b972:	4284      	cmp	r4, r0
 800b974:	4623      	mov	r3, r4
 800b976:	d807      	bhi.n	800b988 <memmove+0x20>
 800b978:	1e43      	subs	r3, r0, #1
 800b97a:	42a1      	cmp	r1, r4
 800b97c:	d008      	beq.n	800b990 <memmove+0x28>
 800b97e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b982:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b986:	e7f8      	b.n	800b97a <memmove+0x12>
 800b988:	4402      	add	r2, r0
 800b98a:	4601      	mov	r1, r0
 800b98c:	428a      	cmp	r2, r1
 800b98e:	d100      	bne.n	800b992 <memmove+0x2a>
 800b990:	bd10      	pop	{r4, pc}
 800b992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b99a:	e7f7      	b.n	800b98c <memmove+0x24>

0800b99c <_sbrk_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d06      	ldr	r5, [pc, #24]	; (800b9b8 <_sbrk_r+0x1c>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	602b      	str	r3, [r5, #0]
 800b9a8:	f7f6 fbd2 	bl	8002150 <_sbrk>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_sbrk_r+0x1a>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_sbrk_r+0x1a>
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	200022f0 	.word	0x200022f0

0800b9bc <memcpy>:
 800b9bc:	440a      	add	r2, r1
 800b9be:	4291      	cmp	r1, r2
 800b9c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9c4:	d100      	bne.n	800b9c8 <memcpy+0xc>
 800b9c6:	4770      	bx	lr
 800b9c8:	b510      	push	{r4, lr}
 800b9ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9d2:	4291      	cmp	r1, r2
 800b9d4:	d1f9      	bne.n	800b9ca <memcpy+0xe>
 800b9d6:	bd10      	pop	{r4, pc}

0800b9d8 <_realloc_r>:
 800b9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4614      	mov	r4, r2
 800b9e0:	460e      	mov	r6, r1
 800b9e2:	b921      	cbnz	r1, 800b9ee <_realloc_r+0x16>
 800b9e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	f7ff bc49 	b.w	800b280 <_malloc_r>
 800b9ee:	b92a      	cbnz	r2, 800b9fc <_realloc_r+0x24>
 800b9f0:	f7ff fbda 	bl	800b1a8 <_free_r>
 800b9f4:	4625      	mov	r5, r4
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9fc:	f000 f81b 	bl	800ba36 <_malloc_usable_size_r>
 800ba00:	4284      	cmp	r4, r0
 800ba02:	4607      	mov	r7, r0
 800ba04:	d802      	bhi.n	800ba0c <_realloc_r+0x34>
 800ba06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba0a:	d812      	bhi.n	800ba32 <_realloc_r+0x5a>
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	4640      	mov	r0, r8
 800ba10:	f7ff fc36 	bl	800b280 <_malloc_r>
 800ba14:	4605      	mov	r5, r0
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d0ed      	beq.n	800b9f6 <_realloc_r+0x1e>
 800ba1a:	42bc      	cmp	r4, r7
 800ba1c:	4622      	mov	r2, r4
 800ba1e:	4631      	mov	r1, r6
 800ba20:	bf28      	it	cs
 800ba22:	463a      	movcs	r2, r7
 800ba24:	f7ff ffca 	bl	800b9bc <memcpy>
 800ba28:	4631      	mov	r1, r6
 800ba2a:	4640      	mov	r0, r8
 800ba2c:	f7ff fbbc 	bl	800b1a8 <_free_r>
 800ba30:	e7e1      	b.n	800b9f6 <_realloc_r+0x1e>
 800ba32:	4635      	mov	r5, r6
 800ba34:	e7df      	b.n	800b9f6 <_realloc_r+0x1e>

0800ba36 <_malloc_usable_size_r>:
 800ba36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba3a:	1f18      	subs	r0, r3, #4
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	bfbc      	itt	lt
 800ba40:	580b      	ldrlt	r3, [r1, r0]
 800ba42:	18c0      	addlt	r0, r0, r3
 800ba44:	4770      	bx	lr

0800ba46 <atan2>:
 800ba46:	f000 baeb 	b.w	800c020 <__ieee754_atan2>

0800ba4a <sqrt>:
 800ba4a:	b538      	push	{r3, r4, r5, lr}
 800ba4c:	ed2d 8b02 	vpush	{d8}
 800ba50:	ec55 4b10 	vmov	r4, r5, d0
 800ba54:	f000 f880 	bl	800bb58 <__ieee754_sqrt>
 800ba58:	4622      	mov	r2, r4
 800ba5a:	462b      	mov	r3, r5
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	eeb0 8a40 	vmov.f32	s16, s0
 800ba64:	eef0 8a60 	vmov.f32	s17, s1
 800ba68:	f7f5 f860 	bl	8000b2c <__aeabi_dcmpun>
 800ba6c:	b990      	cbnz	r0, 800ba94 <sqrt+0x4a>
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2300      	movs	r3, #0
 800ba72:	4620      	mov	r0, r4
 800ba74:	4629      	mov	r1, r5
 800ba76:	f7f5 f831 	bl	8000adc <__aeabi_dcmplt>
 800ba7a:	b158      	cbz	r0, 800ba94 <sqrt+0x4a>
 800ba7c:	f7ff fb68 	bl	800b150 <__errno>
 800ba80:	2321      	movs	r3, #33	; 0x21
 800ba82:	6003      	str	r3, [r0, #0]
 800ba84:	2200      	movs	r2, #0
 800ba86:	2300      	movs	r3, #0
 800ba88:	4610      	mov	r0, r2
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	f7f4 fede 	bl	800084c <__aeabi_ddiv>
 800ba90:	ec41 0b18 	vmov	d8, r0, r1
 800ba94:	eeb0 0a48 	vmov.f32	s0, s16
 800ba98:	eef0 0a68 	vmov.f32	s1, s17
 800ba9c:	ecbd 8b02 	vpop	{d8}
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	0000      	movs	r0, r0
 800baa4:	0000      	movs	r0, r0
	...

0800baa8 <sin>:
 800baa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800baaa:	ec53 2b10 	vmov	r2, r3, d0
 800baae:	4828      	ldr	r0, [pc, #160]	; (800bb50 <sin+0xa8>)
 800bab0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bab4:	4281      	cmp	r1, r0
 800bab6:	dc07      	bgt.n	800bac8 <sin+0x20>
 800bab8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800bb48 <sin+0xa0>
 800babc:	2000      	movs	r0, #0
 800babe:	b005      	add	sp, #20
 800bac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bac4:	f000 b9ec 	b.w	800bea0 <__kernel_sin>
 800bac8:	4822      	ldr	r0, [pc, #136]	; (800bb54 <sin+0xac>)
 800baca:	4281      	cmp	r1, r0
 800bacc:	dd09      	ble.n	800bae2 <sin+0x3a>
 800bace:	ee10 0a10 	vmov	r0, s0
 800bad2:	4619      	mov	r1, r3
 800bad4:	f7f4 fbd8 	bl	8000288 <__aeabi_dsub>
 800bad8:	ec41 0b10 	vmov	d0, r0, r1
 800badc:	b005      	add	sp, #20
 800bade:	f85d fb04 	ldr.w	pc, [sp], #4
 800bae2:	4668      	mov	r0, sp
 800bae4:	f000 fb64 	bl	800c1b0 <__ieee754_rem_pio2>
 800bae8:	f000 0003 	and.w	r0, r0, #3
 800baec:	2801      	cmp	r0, #1
 800baee:	d00c      	beq.n	800bb0a <sin+0x62>
 800baf0:	2802      	cmp	r0, #2
 800baf2:	d011      	beq.n	800bb18 <sin+0x70>
 800baf4:	b9f0      	cbnz	r0, 800bb34 <sin+0x8c>
 800baf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bafa:	ed9d 0b00 	vldr	d0, [sp]
 800bafe:	2001      	movs	r0, #1
 800bb00:	f000 f9ce 	bl	800bea0 <__kernel_sin>
 800bb04:	ec51 0b10 	vmov	r0, r1, d0
 800bb08:	e7e6      	b.n	800bad8 <sin+0x30>
 800bb0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb0e:	ed9d 0b00 	vldr	d0, [sp]
 800bb12:	f000 f8fd 	bl	800bd10 <__kernel_cos>
 800bb16:	e7f5      	b.n	800bb04 <sin+0x5c>
 800bb18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb1c:	ed9d 0b00 	vldr	d0, [sp]
 800bb20:	2001      	movs	r0, #1
 800bb22:	f000 f9bd 	bl	800bea0 <__kernel_sin>
 800bb26:	ec53 2b10 	vmov	r2, r3, d0
 800bb2a:	ee10 0a10 	vmov	r0, s0
 800bb2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb32:	e7d1      	b.n	800bad8 <sin+0x30>
 800bb34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb38:	ed9d 0b00 	vldr	d0, [sp]
 800bb3c:	f000 f8e8 	bl	800bd10 <__kernel_cos>
 800bb40:	e7f1      	b.n	800bb26 <sin+0x7e>
 800bb42:	bf00      	nop
 800bb44:	f3af 8000 	nop.w
	...
 800bb50:	3fe921fb 	.word	0x3fe921fb
 800bb54:	7fefffff 	.word	0x7fefffff

0800bb58 <__ieee754_sqrt>:
 800bb58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	ec55 4b10 	vmov	r4, r5, d0
 800bb60:	4e67      	ldr	r6, [pc, #412]	; (800bd00 <__ieee754_sqrt+0x1a8>)
 800bb62:	43ae      	bics	r6, r5
 800bb64:	ee10 0a10 	vmov	r0, s0
 800bb68:	ee10 2a10 	vmov	r2, s0
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	462b      	mov	r3, r5
 800bb70:	d10d      	bne.n	800bb8e <__ieee754_sqrt+0x36>
 800bb72:	f7f4 fd41 	bl	80005f8 <__aeabi_dmul>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	f7f4 fb85 	bl	800028c <__adddf3>
 800bb82:	4604      	mov	r4, r0
 800bb84:	460d      	mov	r5, r1
 800bb86:	ec45 4b10 	vmov	d0, r4, r5
 800bb8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8e:	2d00      	cmp	r5, #0
 800bb90:	dc0b      	bgt.n	800bbaa <__ieee754_sqrt+0x52>
 800bb92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bb96:	4326      	orrs	r6, r4
 800bb98:	d0f5      	beq.n	800bb86 <__ieee754_sqrt+0x2e>
 800bb9a:	b135      	cbz	r5, 800bbaa <__ieee754_sqrt+0x52>
 800bb9c:	f7f4 fb74 	bl	8000288 <__aeabi_dsub>
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	f7f4 fe52 	bl	800084c <__aeabi_ddiv>
 800bba8:	e7eb      	b.n	800bb82 <__ieee754_sqrt+0x2a>
 800bbaa:	1509      	asrs	r1, r1, #20
 800bbac:	f000 808d 	beq.w	800bcca <__ieee754_sqrt+0x172>
 800bbb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbb4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800bbb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbbc:	07c9      	lsls	r1, r1, #31
 800bbbe:	bf5c      	itt	pl
 800bbc0:	005b      	lslpl	r3, r3, #1
 800bbc2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800bbc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bbca:	bf58      	it	pl
 800bbcc:	0052      	lslpl	r2, r2, #1
 800bbce:	2500      	movs	r5, #0
 800bbd0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bbd4:	1076      	asrs	r6, r6, #1
 800bbd6:	0052      	lsls	r2, r2, #1
 800bbd8:	f04f 0e16 	mov.w	lr, #22
 800bbdc:	46ac      	mov	ip, r5
 800bbde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbe2:	eb0c 0001 	add.w	r0, ip, r1
 800bbe6:	4298      	cmp	r0, r3
 800bbe8:	bfde      	ittt	le
 800bbea:	1a1b      	suble	r3, r3, r0
 800bbec:	eb00 0c01 	addle.w	ip, r0, r1
 800bbf0:	186d      	addle	r5, r5, r1
 800bbf2:	005b      	lsls	r3, r3, #1
 800bbf4:	f1be 0e01 	subs.w	lr, lr, #1
 800bbf8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bbfc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bc00:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bc04:	d1ed      	bne.n	800bbe2 <__ieee754_sqrt+0x8a>
 800bc06:	4674      	mov	r4, lr
 800bc08:	2720      	movs	r7, #32
 800bc0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bc0e:	4563      	cmp	r3, ip
 800bc10:	eb01 000e 	add.w	r0, r1, lr
 800bc14:	dc02      	bgt.n	800bc1c <__ieee754_sqrt+0xc4>
 800bc16:	d113      	bne.n	800bc40 <__ieee754_sqrt+0xe8>
 800bc18:	4290      	cmp	r0, r2
 800bc1a:	d811      	bhi.n	800bc40 <__ieee754_sqrt+0xe8>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	eb00 0e01 	add.w	lr, r0, r1
 800bc22:	da57      	bge.n	800bcd4 <__ieee754_sqrt+0x17c>
 800bc24:	f1be 0f00 	cmp.w	lr, #0
 800bc28:	db54      	blt.n	800bcd4 <__ieee754_sqrt+0x17c>
 800bc2a:	f10c 0801 	add.w	r8, ip, #1
 800bc2e:	eba3 030c 	sub.w	r3, r3, ip
 800bc32:	4290      	cmp	r0, r2
 800bc34:	bf88      	it	hi
 800bc36:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bc3a:	1a12      	subs	r2, r2, r0
 800bc3c:	440c      	add	r4, r1
 800bc3e:	46c4      	mov	ip, r8
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	3f01      	subs	r7, #1
 800bc44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bc48:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bc4c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bc50:	d1dd      	bne.n	800bc0e <__ieee754_sqrt+0xb6>
 800bc52:	4313      	orrs	r3, r2
 800bc54:	d01b      	beq.n	800bc8e <__ieee754_sqrt+0x136>
 800bc56:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bd04 <__ieee754_sqrt+0x1ac>
 800bc5a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bd08 <__ieee754_sqrt+0x1b0>
 800bc5e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bc62:	e9db 2300 	ldrd	r2, r3, [fp]
 800bc66:	f7f4 fb0f 	bl	8000288 <__aeabi_dsub>
 800bc6a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4640      	mov	r0, r8
 800bc74:	4649      	mov	r1, r9
 800bc76:	f7f4 ff3b 	bl	8000af0 <__aeabi_dcmple>
 800bc7a:	b140      	cbz	r0, 800bc8e <__ieee754_sqrt+0x136>
 800bc7c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bc80:	e9da 0100 	ldrd	r0, r1, [sl]
 800bc84:	e9db 2300 	ldrd	r2, r3, [fp]
 800bc88:	d126      	bne.n	800bcd8 <__ieee754_sqrt+0x180>
 800bc8a:	3501      	adds	r5, #1
 800bc8c:	463c      	mov	r4, r7
 800bc8e:	106a      	asrs	r2, r5, #1
 800bc90:	0863      	lsrs	r3, r4, #1
 800bc92:	07e9      	lsls	r1, r5, #31
 800bc94:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bc98:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bc9c:	bf48      	it	mi
 800bc9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bca2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800bca6:	461c      	mov	r4, r3
 800bca8:	e76d      	b.n	800bb86 <__ieee754_sqrt+0x2e>
 800bcaa:	0ad3      	lsrs	r3, r2, #11
 800bcac:	3815      	subs	r0, #21
 800bcae:	0552      	lsls	r2, r2, #21
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d0fa      	beq.n	800bcaa <__ieee754_sqrt+0x152>
 800bcb4:	02dc      	lsls	r4, r3, #11
 800bcb6:	d50a      	bpl.n	800bcce <__ieee754_sqrt+0x176>
 800bcb8:	f1c1 0420 	rsb	r4, r1, #32
 800bcbc:	fa22 f404 	lsr.w	r4, r2, r4
 800bcc0:	1e4d      	subs	r5, r1, #1
 800bcc2:	408a      	lsls	r2, r1
 800bcc4:	4323      	orrs	r3, r4
 800bcc6:	1b41      	subs	r1, r0, r5
 800bcc8:	e772      	b.n	800bbb0 <__ieee754_sqrt+0x58>
 800bcca:	4608      	mov	r0, r1
 800bccc:	e7f0      	b.n	800bcb0 <__ieee754_sqrt+0x158>
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	3101      	adds	r1, #1
 800bcd2:	e7ef      	b.n	800bcb4 <__ieee754_sqrt+0x15c>
 800bcd4:	46e0      	mov	r8, ip
 800bcd6:	e7aa      	b.n	800bc2e <__ieee754_sqrt+0xd6>
 800bcd8:	f7f4 fad8 	bl	800028c <__adddf3>
 800bcdc:	e9da 8900 	ldrd	r8, r9, [sl]
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4640      	mov	r0, r8
 800bce6:	4649      	mov	r1, r9
 800bce8:	f7f4 fef8 	bl	8000adc <__aeabi_dcmplt>
 800bcec:	b120      	cbz	r0, 800bcf8 <__ieee754_sqrt+0x1a0>
 800bcee:	1ca0      	adds	r0, r4, #2
 800bcf0:	bf08      	it	eq
 800bcf2:	3501      	addeq	r5, #1
 800bcf4:	3402      	adds	r4, #2
 800bcf6:	e7ca      	b.n	800bc8e <__ieee754_sqrt+0x136>
 800bcf8:	3401      	adds	r4, #1
 800bcfa:	f024 0401 	bic.w	r4, r4, #1
 800bcfe:	e7c6      	b.n	800bc8e <__ieee754_sqrt+0x136>
 800bd00:	7ff00000 	.word	0x7ff00000
 800bd04:	20000150 	.word	0x20000150
 800bd08:	20000158 	.word	0x20000158
 800bd0c:	00000000 	.word	0x00000000

0800bd10 <__kernel_cos>:
 800bd10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	ec57 6b10 	vmov	r6, r7, d0
 800bd18:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bd1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bd20:	ed8d 1b00 	vstr	d1, [sp]
 800bd24:	da07      	bge.n	800bd36 <__kernel_cos+0x26>
 800bd26:	ee10 0a10 	vmov	r0, s0
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 ff14 	bl	8000b58 <__aeabi_d2iz>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	f000 8088 	beq.w	800be46 <__kernel_cos+0x136>
 800bd36:	4632      	mov	r2, r6
 800bd38:	463b      	mov	r3, r7
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	f7f4 fc5b 	bl	80005f8 <__aeabi_dmul>
 800bd42:	4b51      	ldr	r3, [pc, #324]	; (800be88 <__kernel_cos+0x178>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	4604      	mov	r4, r0
 800bd48:	460d      	mov	r5, r1
 800bd4a:	f7f4 fc55 	bl	80005f8 <__aeabi_dmul>
 800bd4e:	a340      	add	r3, pc, #256	; (adr r3, 800be50 <__kernel_cos+0x140>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	4682      	mov	sl, r0
 800bd56:	468b      	mov	fp, r1
 800bd58:	4620      	mov	r0, r4
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	f7f4 fc4c 	bl	80005f8 <__aeabi_dmul>
 800bd60:	a33d      	add	r3, pc, #244	; (adr r3, 800be58 <__kernel_cos+0x148>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 fa91 	bl	800028c <__adddf3>
 800bd6a:	4622      	mov	r2, r4
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	f7f4 fc43 	bl	80005f8 <__aeabi_dmul>
 800bd72:	a33b      	add	r3, pc, #236	; (adr r3, 800be60 <__kernel_cos+0x150>)
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f7f4 fa86 	bl	8000288 <__aeabi_dsub>
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	462b      	mov	r3, r5
 800bd80:	f7f4 fc3a 	bl	80005f8 <__aeabi_dmul>
 800bd84:	a338      	add	r3, pc, #224	; (adr r3, 800be68 <__kernel_cos+0x158>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f7f4 fa7f 	bl	800028c <__adddf3>
 800bd8e:	4622      	mov	r2, r4
 800bd90:	462b      	mov	r3, r5
 800bd92:	f7f4 fc31 	bl	80005f8 <__aeabi_dmul>
 800bd96:	a336      	add	r3, pc, #216	; (adr r3, 800be70 <__kernel_cos+0x160>)
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	f7f4 fa74 	bl	8000288 <__aeabi_dsub>
 800bda0:	4622      	mov	r2, r4
 800bda2:	462b      	mov	r3, r5
 800bda4:	f7f4 fc28 	bl	80005f8 <__aeabi_dmul>
 800bda8:	a333      	add	r3, pc, #204	; (adr r3, 800be78 <__kernel_cos+0x168>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f7f4 fa6d 	bl	800028c <__adddf3>
 800bdb2:	4622      	mov	r2, r4
 800bdb4:	462b      	mov	r3, r5
 800bdb6:	f7f4 fc1f 	bl	80005f8 <__aeabi_dmul>
 800bdba:	4622      	mov	r2, r4
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	f7f4 fc1b 	bl	80005f8 <__aeabi_dmul>
 800bdc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	460d      	mov	r5, r1
 800bdca:	4630      	mov	r0, r6
 800bdcc:	4639      	mov	r1, r7
 800bdce:	f7f4 fc13 	bl	80005f8 <__aeabi_dmul>
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f7f4 fa55 	bl	8000288 <__aeabi_dsub>
 800bdde:	4b2b      	ldr	r3, [pc, #172]	; (800be8c <__kernel_cos+0x17c>)
 800bde0:	4598      	cmp	r8, r3
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	dc10      	bgt.n	800be0a <__kernel_cos+0xfa>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4650      	mov	r0, sl
 800bdee:	4659      	mov	r1, fp
 800bdf0:	f7f4 fa4a 	bl	8000288 <__aeabi_dsub>
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	4926      	ldr	r1, [pc, #152]	; (800be90 <__kernel_cos+0x180>)
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	f7f4 fa44 	bl	8000288 <__aeabi_dsub>
 800be00:	ec41 0b10 	vmov	d0, r0, r1
 800be04:	b003      	add	sp, #12
 800be06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0a:	4b22      	ldr	r3, [pc, #136]	; (800be94 <__kernel_cos+0x184>)
 800be0c:	4920      	ldr	r1, [pc, #128]	; (800be90 <__kernel_cos+0x180>)
 800be0e:	4598      	cmp	r8, r3
 800be10:	bfcc      	ite	gt
 800be12:	4d21      	ldrgt	r5, [pc, #132]	; (800be98 <__kernel_cos+0x188>)
 800be14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800be18:	2400      	movs	r4, #0
 800be1a:	4622      	mov	r2, r4
 800be1c:	462b      	mov	r3, r5
 800be1e:	2000      	movs	r0, #0
 800be20:	f7f4 fa32 	bl	8000288 <__aeabi_dsub>
 800be24:	4622      	mov	r2, r4
 800be26:	4680      	mov	r8, r0
 800be28:	4689      	mov	r9, r1
 800be2a:	462b      	mov	r3, r5
 800be2c:	4650      	mov	r0, sl
 800be2e:	4659      	mov	r1, fp
 800be30:	f7f4 fa2a 	bl	8000288 <__aeabi_dsub>
 800be34:	4632      	mov	r2, r6
 800be36:	463b      	mov	r3, r7
 800be38:	f7f4 fa26 	bl	8000288 <__aeabi_dsub>
 800be3c:	4602      	mov	r2, r0
 800be3e:	460b      	mov	r3, r1
 800be40:	4640      	mov	r0, r8
 800be42:	4649      	mov	r1, r9
 800be44:	e7da      	b.n	800bdfc <__kernel_cos+0xec>
 800be46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800be80 <__kernel_cos+0x170>
 800be4a:	e7db      	b.n	800be04 <__kernel_cos+0xf4>
 800be4c:	f3af 8000 	nop.w
 800be50:	be8838d4 	.word	0xbe8838d4
 800be54:	bda8fae9 	.word	0xbda8fae9
 800be58:	bdb4b1c4 	.word	0xbdb4b1c4
 800be5c:	3e21ee9e 	.word	0x3e21ee9e
 800be60:	809c52ad 	.word	0x809c52ad
 800be64:	3e927e4f 	.word	0x3e927e4f
 800be68:	19cb1590 	.word	0x19cb1590
 800be6c:	3efa01a0 	.word	0x3efa01a0
 800be70:	16c15177 	.word	0x16c15177
 800be74:	3f56c16c 	.word	0x3f56c16c
 800be78:	5555554c 	.word	0x5555554c
 800be7c:	3fa55555 	.word	0x3fa55555
 800be80:	00000000 	.word	0x00000000
 800be84:	3ff00000 	.word	0x3ff00000
 800be88:	3fe00000 	.word	0x3fe00000
 800be8c:	3fd33332 	.word	0x3fd33332
 800be90:	3ff00000 	.word	0x3ff00000
 800be94:	3fe90000 	.word	0x3fe90000
 800be98:	3fd20000 	.word	0x3fd20000
 800be9c:	00000000 	.word	0x00000000

0800bea0 <__kernel_sin>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	ed2d 8b04 	vpush	{d8-d9}
 800bea8:	eeb0 8a41 	vmov.f32	s16, s2
 800beac:	eef0 8a61 	vmov.f32	s17, s3
 800beb0:	ec55 4b10 	vmov	r4, r5, d0
 800beb4:	b083      	sub	sp, #12
 800beb6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800beba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bebe:	9001      	str	r0, [sp, #4]
 800bec0:	da06      	bge.n	800bed0 <__kernel_sin+0x30>
 800bec2:	ee10 0a10 	vmov	r0, s0
 800bec6:	4629      	mov	r1, r5
 800bec8:	f7f4 fe46 	bl	8000b58 <__aeabi_d2iz>
 800becc:	2800      	cmp	r0, #0
 800bece:	d051      	beq.n	800bf74 <__kernel_sin+0xd4>
 800bed0:	4622      	mov	r2, r4
 800bed2:	462b      	mov	r3, r5
 800bed4:	4620      	mov	r0, r4
 800bed6:	4629      	mov	r1, r5
 800bed8:	f7f4 fb8e 	bl	80005f8 <__aeabi_dmul>
 800bedc:	4682      	mov	sl, r0
 800bede:	468b      	mov	fp, r1
 800bee0:	4602      	mov	r2, r0
 800bee2:	460b      	mov	r3, r1
 800bee4:	4620      	mov	r0, r4
 800bee6:	4629      	mov	r1, r5
 800bee8:	f7f4 fb86 	bl	80005f8 <__aeabi_dmul>
 800beec:	a341      	add	r3, pc, #260	; (adr r3, 800bff4 <__kernel_sin+0x154>)
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	4680      	mov	r8, r0
 800bef4:	4689      	mov	r9, r1
 800bef6:	4650      	mov	r0, sl
 800bef8:	4659      	mov	r1, fp
 800befa:	f7f4 fb7d 	bl	80005f8 <__aeabi_dmul>
 800befe:	a33f      	add	r3, pc, #252	; (adr r3, 800bffc <__kernel_sin+0x15c>)
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	f7f4 f9c0 	bl	8000288 <__aeabi_dsub>
 800bf08:	4652      	mov	r2, sl
 800bf0a:	465b      	mov	r3, fp
 800bf0c:	f7f4 fb74 	bl	80005f8 <__aeabi_dmul>
 800bf10:	a33c      	add	r3, pc, #240	; (adr r3, 800c004 <__kernel_sin+0x164>)
 800bf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf16:	f7f4 f9b9 	bl	800028c <__adddf3>
 800bf1a:	4652      	mov	r2, sl
 800bf1c:	465b      	mov	r3, fp
 800bf1e:	f7f4 fb6b 	bl	80005f8 <__aeabi_dmul>
 800bf22:	a33a      	add	r3, pc, #232	; (adr r3, 800c00c <__kernel_sin+0x16c>)
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	f7f4 f9ae 	bl	8000288 <__aeabi_dsub>
 800bf2c:	4652      	mov	r2, sl
 800bf2e:	465b      	mov	r3, fp
 800bf30:	f7f4 fb62 	bl	80005f8 <__aeabi_dmul>
 800bf34:	a337      	add	r3, pc, #220	; (adr r3, 800c014 <__kernel_sin+0x174>)
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	f7f4 f9a7 	bl	800028c <__adddf3>
 800bf3e:	9b01      	ldr	r3, [sp, #4]
 800bf40:	4606      	mov	r6, r0
 800bf42:	460f      	mov	r7, r1
 800bf44:	b9eb      	cbnz	r3, 800bf82 <__kernel_sin+0xe2>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4650      	mov	r0, sl
 800bf4c:	4659      	mov	r1, fp
 800bf4e:	f7f4 fb53 	bl	80005f8 <__aeabi_dmul>
 800bf52:	a325      	add	r3, pc, #148	; (adr r3, 800bfe8 <__kernel_sin+0x148>)
 800bf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf58:	f7f4 f996 	bl	8000288 <__aeabi_dsub>
 800bf5c:	4642      	mov	r2, r8
 800bf5e:	464b      	mov	r3, r9
 800bf60:	f7f4 fb4a 	bl	80005f8 <__aeabi_dmul>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4620      	mov	r0, r4
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	f7f4 f98e 	bl	800028c <__adddf3>
 800bf70:	4604      	mov	r4, r0
 800bf72:	460d      	mov	r5, r1
 800bf74:	ec45 4b10 	vmov	d0, r4, r5
 800bf78:	b003      	add	sp, #12
 800bf7a:	ecbd 8b04 	vpop	{d8-d9}
 800bf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf82:	4b1b      	ldr	r3, [pc, #108]	; (800bff0 <__kernel_sin+0x150>)
 800bf84:	ec51 0b18 	vmov	r0, r1, d8
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f7f4 fb35 	bl	80005f8 <__aeabi_dmul>
 800bf8e:	4632      	mov	r2, r6
 800bf90:	ec41 0b19 	vmov	d9, r0, r1
 800bf94:	463b      	mov	r3, r7
 800bf96:	4640      	mov	r0, r8
 800bf98:	4649      	mov	r1, r9
 800bf9a:	f7f4 fb2d 	bl	80005f8 <__aeabi_dmul>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	ec51 0b19 	vmov	r0, r1, d9
 800bfa6:	f7f4 f96f 	bl	8000288 <__aeabi_dsub>
 800bfaa:	4652      	mov	r2, sl
 800bfac:	465b      	mov	r3, fp
 800bfae:	f7f4 fb23 	bl	80005f8 <__aeabi_dmul>
 800bfb2:	ec53 2b18 	vmov	r2, r3, d8
 800bfb6:	f7f4 f967 	bl	8000288 <__aeabi_dsub>
 800bfba:	a30b      	add	r3, pc, #44	; (adr r3, 800bfe8 <__kernel_sin+0x148>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	460f      	mov	r7, r1
 800bfc4:	4640      	mov	r0, r8
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	f7f4 fb16 	bl	80005f8 <__aeabi_dmul>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	f7f4 f95a 	bl	800028c <__adddf3>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4620      	mov	r0, r4
 800bfde:	4629      	mov	r1, r5
 800bfe0:	f7f4 f952 	bl	8000288 <__aeabi_dsub>
 800bfe4:	e7c4      	b.n	800bf70 <__kernel_sin+0xd0>
 800bfe6:	bf00      	nop
 800bfe8:	55555549 	.word	0x55555549
 800bfec:	3fc55555 	.word	0x3fc55555
 800bff0:	3fe00000 	.word	0x3fe00000
 800bff4:	5acfd57c 	.word	0x5acfd57c
 800bff8:	3de5d93a 	.word	0x3de5d93a
 800bffc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c000:	3e5ae5e6 	.word	0x3e5ae5e6
 800c004:	57b1fe7d 	.word	0x57b1fe7d
 800c008:	3ec71de3 	.word	0x3ec71de3
 800c00c:	19c161d5 	.word	0x19c161d5
 800c010:	3f2a01a0 	.word	0x3f2a01a0
 800c014:	1110f8a6 	.word	0x1110f8a6
 800c018:	3f811111 	.word	0x3f811111
 800c01c:	00000000 	.word	0x00000000

0800c020 <__ieee754_atan2>:
 800c020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c024:	ec57 6b11 	vmov	r6, r7, d1
 800c028:	4273      	negs	r3, r6
 800c02a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800c1a8 <__ieee754_atan2+0x188>
 800c02e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c032:	4333      	orrs	r3, r6
 800c034:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c038:	4543      	cmp	r3, r8
 800c03a:	ec51 0b10 	vmov	r0, r1, d0
 800c03e:	ee11 5a10 	vmov	r5, s2
 800c042:	d80a      	bhi.n	800c05a <__ieee754_atan2+0x3a>
 800c044:	4244      	negs	r4, r0
 800c046:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c04a:	4304      	orrs	r4, r0
 800c04c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c050:	4544      	cmp	r4, r8
 800c052:	ee10 9a10 	vmov	r9, s0
 800c056:	468e      	mov	lr, r1
 800c058:	d907      	bls.n	800c06a <__ieee754_atan2+0x4a>
 800c05a:	4632      	mov	r2, r6
 800c05c:	463b      	mov	r3, r7
 800c05e:	f7f4 f915 	bl	800028c <__adddf3>
 800c062:	ec41 0b10 	vmov	d0, r0, r1
 800c066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c06a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c06e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c072:	4334      	orrs	r4, r6
 800c074:	d103      	bne.n	800c07e <__ieee754_atan2+0x5e>
 800c076:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c07a:	f000 baa1 	b.w	800c5c0 <atan>
 800c07e:	17bc      	asrs	r4, r7, #30
 800c080:	f004 0402 	and.w	r4, r4, #2
 800c084:	ea53 0909 	orrs.w	r9, r3, r9
 800c088:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c08c:	d107      	bne.n	800c09e <__ieee754_atan2+0x7e>
 800c08e:	2c02      	cmp	r4, #2
 800c090:	d05f      	beq.n	800c152 <__ieee754_atan2+0x132>
 800c092:	2c03      	cmp	r4, #3
 800c094:	d1e5      	bne.n	800c062 <__ieee754_atan2+0x42>
 800c096:	a140      	add	r1, pc, #256	; (adr r1, 800c198 <__ieee754_atan2+0x178>)
 800c098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c09c:	e7e1      	b.n	800c062 <__ieee754_atan2+0x42>
 800c09e:	4315      	orrs	r5, r2
 800c0a0:	d106      	bne.n	800c0b0 <__ieee754_atan2+0x90>
 800c0a2:	f1be 0f00 	cmp.w	lr, #0
 800c0a6:	da5f      	bge.n	800c168 <__ieee754_atan2+0x148>
 800c0a8:	a13d      	add	r1, pc, #244	; (adr r1, 800c1a0 <__ieee754_atan2+0x180>)
 800c0aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0ae:	e7d8      	b.n	800c062 <__ieee754_atan2+0x42>
 800c0b0:	4542      	cmp	r2, r8
 800c0b2:	d10f      	bne.n	800c0d4 <__ieee754_atan2+0xb4>
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c0ba:	d107      	bne.n	800c0cc <__ieee754_atan2+0xac>
 800c0bc:	2c02      	cmp	r4, #2
 800c0be:	d84c      	bhi.n	800c15a <__ieee754_atan2+0x13a>
 800c0c0:	4b33      	ldr	r3, [pc, #204]	; (800c190 <__ieee754_atan2+0x170>)
 800c0c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0ca:	e7ca      	b.n	800c062 <__ieee754_atan2+0x42>
 800c0cc:	2c02      	cmp	r4, #2
 800c0ce:	d848      	bhi.n	800c162 <__ieee754_atan2+0x142>
 800c0d0:	4b30      	ldr	r3, [pc, #192]	; (800c194 <__ieee754_atan2+0x174>)
 800c0d2:	e7f6      	b.n	800c0c2 <__ieee754_atan2+0xa2>
 800c0d4:	4543      	cmp	r3, r8
 800c0d6:	d0e4      	beq.n	800c0a2 <__ieee754_atan2+0x82>
 800c0d8:	1a9b      	subs	r3, r3, r2
 800c0da:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c0de:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c0e2:	da1e      	bge.n	800c122 <__ieee754_atan2+0x102>
 800c0e4:	2f00      	cmp	r7, #0
 800c0e6:	da01      	bge.n	800c0ec <__ieee754_atan2+0xcc>
 800c0e8:	323c      	adds	r2, #60	; 0x3c
 800c0ea:	db1e      	blt.n	800c12a <__ieee754_atan2+0x10a>
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	463b      	mov	r3, r7
 800c0f0:	f7f4 fbac 	bl	800084c <__aeabi_ddiv>
 800c0f4:	ec41 0b10 	vmov	d0, r0, r1
 800c0f8:	f000 fc02 	bl	800c900 <fabs>
 800c0fc:	f000 fa60 	bl	800c5c0 <atan>
 800c100:	ec51 0b10 	vmov	r0, r1, d0
 800c104:	2c01      	cmp	r4, #1
 800c106:	d013      	beq.n	800c130 <__ieee754_atan2+0x110>
 800c108:	2c02      	cmp	r4, #2
 800c10a:	d015      	beq.n	800c138 <__ieee754_atan2+0x118>
 800c10c:	2c00      	cmp	r4, #0
 800c10e:	d0a8      	beq.n	800c062 <__ieee754_atan2+0x42>
 800c110:	a317      	add	r3, pc, #92	; (adr r3, 800c170 <__ieee754_atan2+0x150>)
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	f7f4 f8b7 	bl	8000288 <__aeabi_dsub>
 800c11a:	a317      	add	r3, pc, #92	; (adr r3, 800c178 <__ieee754_atan2+0x158>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	e014      	b.n	800c14c <__ieee754_atan2+0x12c>
 800c122:	a117      	add	r1, pc, #92	; (adr r1, 800c180 <__ieee754_atan2+0x160>)
 800c124:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c128:	e7ec      	b.n	800c104 <__ieee754_atan2+0xe4>
 800c12a:	2000      	movs	r0, #0
 800c12c:	2100      	movs	r1, #0
 800c12e:	e7e9      	b.n	800c104 <__ieee754_atan2+0xe4>
 800c130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c134:	4619      	mov	r1, r3
 800c136:	e794      	b.n	800c062 <__ieee754_atan2+0x42>
 800c138:	a30d      	add	r3, pc, #52	; (adr r3, 800c170 <__ieee754_atan2+0x150>)
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	f7f4 f8a3 	bl	8000288 <__aeabi_dsub>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	a10c      	add	r1, pc, #48	; (adr r1, 800c178 <__ieee754_atan2+0x158>)
 800c148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c14c:	f7f4 f89c 	bl	8000288 <__aeabi_dsub>
 800c150:	e787      	b.n	800c062 <__ieee754_atan2+0x42>
 800c152:	a109      	add	r1, pc, #36	; (adr r1, 800c178 <__ieee754_atan2+0x158>)
 800c154:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c158:	e783      	b.n	800c062 <__ieee754_atan2+0x42>
 800c15a:	a10b      	add	r1, pc, #44	; (adr r1, 800c188 <__ieee754_atan2+0x168>)
 800c15c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c160:	e77f      	b.n	800c062 <__ieee754_atan2+0x42>
 800c162:	2000      	movs	r0, #0
 800c164:	2100      	movs	r1, #0
 800c166:	e77c      	b.n	800c062 <__ieee754_atan2+0x42>
 800c168:	a105      	add	r1, pc, #20	; (adr r1, 800c180 <__ieee754_atan2+0x160>)
 800c16a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c16e:	e778      	b.n	800c062 <__ieee754_atan2+0x42>
 800c170:	33145c07 	.word	0x33145c07
 800c174:	3ca1a626 	.word	0x3ca1a626
 800c178:	54442d18 	.word	0x54442d18
 800c17c:	400921fb 	.word	0x400921fb
 800c180:	54442d18 	.word	0x54442d18
 800c184:	3ff921fb 	.word	0x3ff921fb
 800c188:	54442d18 	.word	0x54442d18
 800c18c:	3fe921fb 	.word	0x3fe921fb
 800c190:	0800d278 	.word	0x0800d278
 800c194:	0800d290 	.word	0x0800d290
 800c198:	54442d18 	.word	0x54442d18
 800c19c:	c00921fb 	.word	0xc00921fb
 800c1a0:	54442d18 	.word	0x54442d18
 800c1a4:	bff921fb 	.word	0xbff921fb
 800c1a8:	7ff00000 	.word	0x7ff00000
 800c1ac:	00000000 	.word	0x00000000

0800c1b0 <__ieee754_rem_pio2>:
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	ed2d 8b02 	vpush	{d8}
 800c1b8:	ec55 4b10 	vmov	r4, r5, d0
 800c1bc:	4bca      	ldr	r3, [pc, #808]	; (800c4e8 <__ieee754_rem_pio2+0x338>)
 800c1be:	b08b      	sub	sp, #44	; 0x2c
 800c1c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c1c4:	4598      	cmp	r8, r3
 800c1c6:	4682      	mov	sl, r0
 800c1c8:	9502      	str	r5, [sp, #8]
 800c1ca:	dc08      	bgt.n	800c1de <__ieee754_rem_pio2+0x2e>
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	ed80 0b00 	vstr	d0, [r0]
 800c1d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c1d8:	f04f 0b00 	mov.w	fp, #0
 800c1dc:	e028      	b.n	800c230 <__ieee754_rem_pio2+0x80>
 800c1de:	4bc3      	ldr	r3, [pc, #780]	; (800c4ec <__ieee754_rem_pio2+0x33c>)
 800c1e0:	4598      	cmp	r8, r3
 800c1e2:	dc78      	bgt.n	800c2d6 <__ieee754_rem_pio2+0x126>
 800c1e4:	9b02      	ldr	r3, [sp, #8]
 800c1e6:	4ec2      	ldr	r6, [pc, #776]	; (800c4f0 <__ieee754_rem_pio2+0x340>)
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	ee10 0a10 	vmov	r0, s0
 800c1ee:	a3b0      	add	r3, pc, #704	; (adr r3, 800c4b0 <__ieee754_rem_pio2+0x300>)
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	dd39      	ble.n	800c26c <__ieee754_rem_pio2+0xbc>
 800c1f8:	f7f4 f846 	bl	8000288 <__aeabi_dsub>
 800c1fc:	45b0      	cmp	r8, r6
 800c1fe:	4604      	mov	r4, r0
 800c200:	460d      	mov	r5, r1
 800c202:	d01b      	beq.n	800c23c <__ieee754_rem_pio2+0x8c>
 800c204:	a3ac      	add	r3, pc, #688	; (adr r3, 800c4b8 <__ieee754_rem_pio2+0x308>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f7f4 f83d 	bl	8000288 <__aeabi_dsub>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	e9ca 2300 	strd	r2, r3, [sl]
 800c216:	4620      	mov	r0, r4
 800c218:	4629      	mov	r1, r5
 800c21a:	f7f4 f835 	bl	8000288 <__aeabi_dsub>
 800c21e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c4b8 <__ieee754_rem_pio2+0x308>)
 800c220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c224:	f7f4 f830 	bl	8000288 <__aeabi_dsub>
 800c228:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c22c:	f04f 0b01 	mov.w	fp, #1
 800c230:	4658      	mov	r0, fp
 800c232:	b00b      	add	sp, #44	; 0x2c
 800c234:	ecbd 8b02 	vpop	{d8}
 800c238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c4c0 <__ieee754_rem_pio2+0x310>)
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	f7f4 f821 	bl	8000288 <__aeabi_dsub>
 800c246:	a3a0      	add	r3, pc, #640	; (adr r3, 800c4c8 <__ieee754_rem_pio2+0x318>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	4604      	mov	r4, r0
 800c24e:	460d      	mov	r5, r1
 800c250:	f7f4 f81a 	bl	8000288 <__aeabi_dsub>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	e9ca 2300 	strd	r2, r3, [sl]
 800c25c:	4620      	mov	r0, r4
 800c25e:	4629      	mov	r1, r5
 800c260:	f7f4 f812 	bl	8000288 <__aeabi_dsub>
 800c264:	a398      	add	r3, pc, #608	; (adr r3, 800c4c8 <__ieee754_rem_pio2+0x318>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	e7db      	b.n	800c224 <__ieee754_rem_pio2+0x74>
 800c26c:	f7f4 f80e 	bl	800028c <__adddf3>
 800c270:	45b0      	cmp	r8, r6
 800c272:	4604      	mov	r4, r0
 800c274:	460d      	mov	r5, r1
 800c276:	d016      	beq.n	800c2a6 <__ieee754_rem_pio2+0xf6>
 800c278:	a38f      	add	r3, pc, #572	; (adr r3, 800c4b8 <__ieee754_rem_pio2+0x308>)
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f7f4 f805 	bl	800028c <__adddf3>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	e9ca 2300 	strd	r2, r3, [sl]
 800c28a:	4620      	mov	r0, r4
 800c28c:	4629      	mov	r1, r5
 800c28e:	f7f3 fffb 	bl	8000288 <__aeabi_dsub>
 800c292:	a389      	add	r3, pc, #548	; (adr r3, 800c4b8 <__ieee754_rem_pio2+0x308>)
 800c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c298:	f7f3 fff8 	bl	800028c <__adddf3>
 800c29c:	f04f 3bff 	mov.w	fp, #4294967295
 800c2a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c2a4:	e7c4      	b.n	800c230 <__ieee754_rem_pio2+0x80>
 800c2a6:	a386      	add	r3, pc, #536	; (adr r3, 800c4c0 <__ieee754_rem_pio2+0x310>)
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	f7f3 ffee 	bl	800028c <__adddf3>
 800c2b0:	a385      	add	r3, pc, #532	; (adr r3, 800c4c8 <__ieee754_rem_pio2+0x318>)
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	460d      	mov	r5, r1
 800c2ba:	f7f3 ffe7 	bl	800028c <__adddf3>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	e9ca 2300 	strd	r2, r3, [sl]
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	f7f3 ffdd 	bl	8000288 <__aeabi_dsub>
 800c2ce:	a37e      	add	r3, pc, #504	; (adr r3, 800c4c8 <__ieee754_rem_pio2+0x318>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	e7e0      	b.n	800c298 <__ieee754_rem_pio2+0xe8>
 800c2d6:	4b87      	ldr	r3, [pc, #540]	; (800c4f4 <__ieee754_rem_pio2+0x344>)
 800c2d8:	4598      	cmp	r8, r3
 800c2da:	f300 80d8 	bgt.w	800c48e <__ieee754_rem_pio2+0x2de>
 800c2de:	f000 fb0f 	bl	800c900 <fabs>
 800c2e2:	ec55 4b10 	vmov	r4, r5, d0
 800c2e6:	ee10 0a10 	vmov	r0, s0
 800c2ea:	a379      	add	r3, pc, #484	; (adr r3, 800c4d0 <__ieee754_rem_pio2+0x320>)
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7f4 f981 	bl	80005f8 <__aeabi_dmul>
 800c2f6:	4b80      	ldr	r3, [pc, #512]	; (800c4f8 <__ieee754_rem_pio2+0x348>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f7f3 ffc7 	bl	800028c <__adddf3>
 800c2fe:	f7f4 fc2b 	bl	8000b58 <__aeabi_d2iz>
 800c302:	4683      	mov	fp, r0
 800c304:	f7f4 f90e 	bl	8000524 <__aeabi_i2d>
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	ec43 2b18 	vmov	d8, r2, r3
 800c310:	a367      	add	r3, pc, #412	; (adr r3, 800c4b0 <__ieee754_rem_pio2+0x300>)
 800c312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c316:	f7f4 f96f 	bl	80005f8 <__aeabi_dmul>
 800c31a:	4602      	mov	r2, r0
 800c31c:	460b      	mov	r3, r1
 800c31e:	4620      	mov	r0, r4
 800c320:	4629      	mov	r1, r5
 800c322:	f7f3 ffb1 	bl	8000288 <__aeabi_dsub>
 800c326:	a364      	add	r3, pc, #400	; (adr r3, 800c4b8 <__ieee754_rem_pio2+0x308>)
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	4606      	mov	r6, r0
 800c32e:	460f      	mov	r7, r1
 800c330:	ec51 0b18 	vmov	r0, r1, d8
 800c334:	f7f4 f960 	bl	80005f8 <__aeabi_dmul>
 800c338:	f1bb 0f1f 	cmp.w	fp, #31
 800c33c:	4604      	mov	r4, r0
 800c33e:	460d      	mov	r5, r1
 800c340:	dc0d      	bgt.n	800c35e <__ieee754_rem_pio2+0x1ae>
 800c342:	4b6e      	ldr	r3, [pc, #440]	; (800c4fc <__ieee754_rem_pio2+0x34c>)
 800c344:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c34c:	4543      	cmp	r3, r8
 800c34e:	d006      	beq.n	800c35e <__ieee754_rem_pio2+0x1ae>
 800c350:	4622      	mov	r2, r4
 800c352:	462b      	mov	r3, r5
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f7f3 ff96 	bl	8000288 <__aeabi_dsub>
 800c35c:	e00e      	b.n	800c37c <__ieee754_rem_pio2+0x1cc>
 800c35e:	462b      	mov	r3, r5
 800c360:	4622      	mov	r2, r4
 800c362:	4630      	mov	r0, r6
 800c364:	4639      	mov	r1, r7
 800c366:	f7f3 ff8f 	bl	8000288 <__aeabi_dsub>
 800c36a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c36e:	9303      	str	r3, [sp, #12]
 800c370:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c374:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c378:	2b10      	cmp	r3, #16
 800c37a:	dc02      	bgt.n	800c382 <__ieee754_rem_pio2+0x1d2>
 800c37c:	e9ca 0100 	strd	r0, r1, [sl]
 800c380:	e039      	b.n	800c3f6 <__ieee754_rem_pio2+0x246>
 800c382:	a34f      	add	r3, pc, #316	; (adr r3, 800c4c0 <__ieee754_rem_pio2+0x310>)
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	ec51 0b18 	vmov	r0, r1, d8
 800c38c:	f7f4 f934 	bl	80005f8 <__aeabi_dmul>
 800c390:	4604      	mov	r4, r0
 800c392:	460d      	mov	r5, r1
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	4630      	mov	r0, r6
 800c39a:	4639      	mov	r1, r7
 800c39c:	f7f3 ff74 	bl	8000288 <__aeabi_dsub>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	4680      	mov	r8, r0
 800c3a6:	4689      	mov	r9, r1
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	f7f3 ff6c 	bl	8000288 <__aeabi_dsub>
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	462b      	mov	r3, r5
 800c3b4:	f7f3 ff68 	bl	8000288 <__aeabi_dsub>
 800c3b8:	a343      	add	r3, pc, #268	; (adr r3, 800c4c8 <__ieee754_rem_pio2+0x318>)
 800c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3be:	4604      	mov	r4, r0
 800c3c0:	460d      	mov	r5, r1
 800c3c2:	ec51 0b18 	vmov	r0, r1, d8
 800c3c6:	f7f4 f917 	bl	80005f8 <__aeabi_dmul>
 800c3ca:	4622      	mov	r2, r4
 800c3cc:	462b      	mov	r3, r5
 800c3ce:	f7f3 ff5b 	bl	8000288 <__aeabi_dsub>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	460d      	mov	r5, r1
 800c3da:	4640      	mov	r0, r8
 800c3dc:	4649      	mov	r1, r9
 800c3de:	f7f3 ff53 	bl	8000288 <__aeabi_dsub>
 800c3e2:	9a03      	ldr	r2, [sp, #12]
 800c3e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	2b31      	cmp	r3, #49	; 0x31
 800c3ec:	dc24      	bgt.n	800c438 <__ieee754_rem_pio2+0x288>
 800c3ee:	e9ca 0100 	strd	r0, r1, [sl]
 800c3f2:	4646      	mov	r6, r8
 800c3f4:	464f      	mov	r7, r9
 800c3f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	4642      	mov	r2, r8
 800c3fe:	464b      	mov	r3, r9
 800c400:	4639      	mov	r1, r7
 800c402:	f7f3 ff41 	bl	8000288 <__aeabi_dsub>
 800c406:	462b      	mov	r3, r5
 800c408:	4622      	mov	r2, r4
 800c40a:	f7f3 ff3d 	bl	8000288 <__aeabi_dsub>
 800c40e:	9b02      	ldr	r3, [sp, #8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c416:	f6bf af0b 	bge.w	800c230 <__ieee754_rem_pio2+0x80>
 800c41a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c41e:	f8ca 3004 	str.w	r3, [sl, #4]
 800c422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c426:	f8ca 8000 	str.w	r8, [sl]
 800c42a:	f8ca 0008 	str.w	r0, [sl, #8]
 800c42e:	f8ca 300c 	str.w	r3, [sl, #12]
 800c432:	f1cb 0b00 	rsb	fp, fp, #0
 800c436:	e6fb      	b.n	800c230 <__ieee754_rem_pio2+0x80>
 800c438:	a327      	add	r3, pc, #156	; (adr r3, 800c4d8 <__ieee754_rem_pio2+0x328>)
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	ec51 0b18 	vmov	r0, r1, d8
 800c442:	f7f4 f8d9 	bl	80005f8 <__aeabi_dmul>
 800c446:	4604      	mov	r4, r0
 800c448:	460d      	mov	r5, r1
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	4640      	mov	r0, r8
 800c450:	4649      	mov	r1, r9
 800c452:	f7f3 ff19 	bl	8000288 <__aeabi_dsub>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	4606      	mov	r6, r0
 800c45c:	460f      	mov	r7, r1
 800c45e:	4640      	mov	r0, r8
 800c460:	4649      	mov	r1, r9
 800c462:	f7f3 ff11 	bl	8000288 <__aeabi_dsub>
 800c466:	4622      	mov	r2, r4
 800c468:	462b      	mov	r3, r5
 800c46a:	f7f3 ff0d 	bl	8000288 <__aeabi_dsub>
 800c46e:	a31c      	add	r3, pc, #112	; (adr r3, 800c4e0 <__ieee754_rem_pio2+0x330>)
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	4604      	mov	r4, r0
 800c476:	460d      	mov	r5, r1
 800c478:	ec51 0b18 	vmov	r0, r1, d8
 800c47c:	f7f4 f8bc 	bl	80005f8 <__aeabi_dmul>
 800c480:	4622      	mov	r2, r4
 800c482:	462b      	mov	r3, r5
 800c484:	f7f3 ff00 	bl	8000288 <__aeabi_dsub>
 800c488:	4604      	mov	r4, r0
 800c48a:	460d      	mov	r5, r1
 800c48c:	e760      	b.n	800c350 <__ieee754_rem_pio2+0x1a0>
 800c48e:	4b1c      	ldr	r3, [pc, #112]	; (800c500 <__ieee754_rem_pio2+0x350>)
 800c490:	4598      	cmp	r8, r3
 800c492:	dd37      	ble.n	800c504 <__ieee754_rem_pio2+0x354>
 800c494:	ee10 2a10 	vmov	r2, s0
 800c498:	462b      	mov	r3, r5
 800c49a:	4620      	mov	r0, r4
 800c49c:	4629      	mov	r1, r5
 800c49e:	f7f3 fef3 	bl	8000288 <__aeabi_dsub>
 800c4a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c4a6:	e9ca 0100 	strd	r0, r1, [sl]
 800c4aa:	e695      	b.n	800c1d8 <__ieee754_rem_pio2+0x28>
 800c4ac:	f3af 8000 	nop.w
 800c4b0:	54400000 	.word	0x54400000
 800c4b4:	3ff921fb 	.word	0x3ff921fb
 800c4b8:	1a626331 	.word	0x1a626331
 800c4bc:	3dd0b461 	.word	0x3dd0b461
 800c4c0:	1a600000 	.word	0x1a600000
 800c4c4:	3dd0b461 	.word	0x3dd0b461
 800c4c8:	2e037073 	.word	0x2e037073
 800c4cc:	3ba3198a 	.word	0x3ba3198a
 800c4d0:	6dc9c883 	.word	0x6dc9c883
 800c4d4:	3fe45f30 	.word	0x3fe45f30
 800c4d8:	2e000000 	.word	0x2e000000
 800c4dc:	3ba3198a 	.word	0x3ba3198a
 800c4e0:	252049c1 	.word	0x252049c1
 800c4e4:	397b839a 	.word	0x397b839a
 800c4e8:	3fe921fb 	.word	0x3fe921fb
 800c4ec:	4002d97b 	.word	0x4002d97b
 800c4f0:	3ff921fb 	.word	0x3ff921fb
 800c4f4:	413921fb 	.word	0x413921fb
 800c4f8:	3fe00000 	.word	0x3fe00000
 800c4fc:	0800d2a8 	.word	0x0800d2a8
 800c500:	7fefffff 	.word	0x7fefffff
 800c504:	ea4f 5628 	mov.w	r6, r8, asr #20
 800c508:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800c50c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800c510:	4620      	mov	r0, r4
 800c512:	460d      	mov	r5, r1
 800c514:	f7f4 fb20 	bl	8000b58 <__aeabi_d2iz>
 800c518:	f7f4 f804 	bl	8000524 <__aeabi_i2d>
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	4620      	mov	r0, r4
 800c522:	4629      	mov	r1, r5
 800c524:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c528:	f7f3 feae 	bl	8000288 <__aeabi_dsub>
 800c52c:	4b21      	ldr	r3, [pc, #132]	; (800c5b4 <__ieee754_rem_pio2+0x404>)
 800c52e:	2200      	movs	r2, #0
 800c530:	f7f4 f862 	bl	80005f8 <__aeabi_dmul>
 800c534:	460d      	mov	r5, r1
 800c536:	4604      	mov	r4, r0
 800c538:	f7f4 fb0e 	bl	8000b58 <__aeabi_d2iz>
 800c53c:	f7f3 fff2 	bl	8000524 <__aeabi_i2d>
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4620      	mov	r0, r4
 800c546:	4629      	mov	r1, r5
 800c548:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c54c:	f7f3 fe9c 	bl	8000288 <__aeabi_dsub>
 800c550:	4b18      	ldr	r3, [pc, #96]	; (800c5b4 <__ieee754_rem_pio2+0x404>)
 800c552:	2200      	movs	r2, #0
 800c554:	f7f4 f850 	bl	80005f8 <__aeabi_dmul>
 800c558:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c55c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c560:	2703      	movs	r7, #3
 800c562:	2400      	movs	r4, #0
 800c564:	2500      	movs	r5, #0
 800c566:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800c56a:	4622      	mov	r2, r4
 800c56c:	462b      	mov	r3, r5
 800c56e:	46b9      	mov	r9, r7
 800c570:	3f01      	subs	r7, #1
 800c572:	f7f4 faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c576:	2800      	cmp	r0, #0
 800c578:	d1f5      	bne.n	800c566 <__ieee754_rem_pio2+0x3b6>
 800c57a:	4b0f      	ldr	r3, [pc, #60]	; (800c5b8 <__ieee754_rem_pio2+0x408>)
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	2302      	movs	r3, #2
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	4632      	mov	r2, r6
 800c584:	464b      	mov	r3, r9
 800c586:	4651      	mov	r1, sl
 800c588:	a804      	add	r0, sp, #16
 800c58a:	f000 f9c5 	bl	800c918 <__kernel_rem_pio2>
 800c58e:	9b02      	ldr	r3, [sp, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	4683      	mov	fp, r0
 800c594:	f6bf ae4c 	bge.w	800c230 <__ieee754_rem_pio2+0x80>
 800c598:	e9da 2100 	ldrd	r2, r1, [sl]
 800c59c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5a0:	e9ca 2300 	strd	r2, r3, [sl]
 800c5a4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c5a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5ac:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c5b0:	e73f      	b.n	800c432 <__ieee754_rem_pio2+0x282>
 800c5b2:	bf00      	nop
 800c5b4:	41700000 	.word	0x41700000
 800c5b8:	0800d328 	.word	0x0800d328
 800c5bc:	00000000 	.word	0x00000000

0800c5c0 <atan>:
 800c5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c4:	ec55 4b10 	vmov	r4, r5, d0
 800c5c8:	4bc3      	ldr	r3, [pc, #780]	; (800c8d8 <atan+0x318>)
 800c5ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c5ce:	429e      	cmp	r6, r3
 800c5d0:	46ab      	mov	fp, r5
 800c5d2:	dd18      	ble.n	800c606 <atan+0x46>
 800c5d4:	4bc1      	ldr	r3, [pc, #772]	; (800c8dc <atan+0x31c>)
 800c5d6:	429e      	cmp	r6, r3
 800c5d8:	dc01      	bgt.n	800c5de <atan+0x1e>
 800c5da:	d109      	bne.n	800c5f0 <atan+0x30>
 800c5dc:	b144      	cbz	r4, 800c5f0 <atan+0x30>
 800c5de:	4622      	mov	r2, r4
 800c5e0:	462b      	mov	r3, r5
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	f7f3 fe51 	bl	800028c <__adddf3>
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	460d      	mov	r5, r1
 800c5ee:	e006      	b.n	800c5fe <atan+0x3e>
 800c5f0:	f1bb 0f00 	cmp.w	fp, #0
 800c5f4:	f300 8131 	bgt.w	800c85a <atan+0x29a>
 800c5f8:	a59b      	add	r5, pc, #620	; (adr r5, 800c868 <atan+0x2a8>)
 800c5fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c5fe:	ec45 4b10 	vmov	d0, r4, r5
 800c602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c606:	4bb6      	ldr	r3, [pc, #728]	; (800c8e0 <atan+0x320>)
 800c608:	429e      	cmp	r6, r3
 800c60a:	dc14      	bgt.n	800c636 <atan+0x76>
 800c60c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c610:	429e      	cmp	r6, r3
 800c612:	dc0d      	bgt.n	800c630 <atan+0x70>
 800c614:	a396      	add	r3, pc, #600	; (adr r3, 800c870 <atan+0x2b0>)
 800c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61a:	ee10 0a10 	vmov	r0, s0
 800c61e:	4629      	mov	r1, r5
 800c620:	f7f3 fe34 	bl	800028c <__adddf3>
 800c624:	4baf      	ldr	r3, [pc, #700]	; (800c8e4 <atan+0x324>)
 800c626:	2200      	movs	r2, #0
 800c628:	f7f4 fa76 	bl	8000b18 <__aeabi_dcmpgt>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d1e6      	bne.n	800c5fe <atan+0x3e>
 800c630:	f04f 3aff 	mov.w	sl, #4294967295
 800c634:	e02b      	b.n	800c68e <atan+0xce>
 800c636:	f000 f963 	bl	800c900 <fabs>
 800c63a:	4bab      	ldr	r3, [pc, #684]	; (800c8e8 <atan+0x328>)
 800c63c:	429e      	cmp	r6, r3
 800c63e:	ec55 4b10 	vmov	r4, r5, d0
 800c642:	f300 80bf 	bgt.w	800c7c4 <atan+0x204>
 800c646:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c64a:	429e      	cmp	r6, r3
 800c64c:	f300 80a0 	bgt.w	800c790 <atan+0x1d0>
 800c650:	ee10 2a10 	vmov	r2, s0
 800c654:	ee10 0a10 	vmov	r0, s0
 800c658:	462b      	mov	r3, r5
 800c65a:	4629      	mov	r1, r5
 800c65c:	f7f3 fe16 	bl	800028c <__adddf3>
 800c660:	4ba0      	ldr	r3, [pc, #640]	; (800c8e4 <atan+0x324>)
 800c662:	2200      	movs	r2, #0
 800c664:	f7f3 fe10 	bl	8000288 <__aeabi_dsub>
 800c668:	2200      	movs	r2, #0
 800c66a:	4606      	mov	r6, r0
 800c66c:	460f      	mov	r7, r1
 800c66e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c672:	4620      	mov	r0, r4
 800c674:	4629      	mov	r1, r5
 800c676:	f7f3 fe09 	bl	800028c <__adddf3>
 800c67a:	4602      	mov	r2, r0
 800c67c:	460b      	mov	r3, r1
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	f7f4 f8e3 	bl	800084c <__aeabi_ddiv>
 800c686:	f04f 0a00 	mov.w	sl, #0
 800c68a:	4604      	mov	r4, r0
 800c68c:	460d      	mov	r5, r1
 800c68e:	4622      	mov	r2, r4
 800c690:	462b      	mov	r3, r5
 800c692:	4620      	mov	r0, r4
 800c694:	4629      	mov	r1, r5
 800c696:	f7f3 ffaf 	bl	80005f8 <__aeabi_dmul>
 800c69a:	4602      	mov	r2, r0
 800c69c:	460b      	mov	r3, r1
 800c69e:	4680      	mov	r8, r0
 800c6a0:	4689      	mov	r9, r1
 800c6a2:	f7f3 ffa9 	bl	80005f8 <__aeabi_dmul>
 800c6a6:	a374      	add	r3, pc, #464	; (adr r3, 800c878 <atan+0x2b8>)
 800c6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	460f      	mov	r7, r1
 800c6b0:	f7f3 ffa2 	bl	80005f8 <__aeabi_dmul>
 800c6b4:	a372      	add	r3, pc, #456	; (adr r3, 800c880 <atan+0x2c0>)
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	f7f3 fde7 	bl	800028c <__adddf3>
 800c6be:	4632      	mov	r2, r6
 800c6c0:	463b      	mov	r3, r7
 800c6c2:	f7f3 ff99 	bl	80005f8 <__aeabi_dmul>
 800c6c6:	a370      	add	r3, pc, #448	; (adr r3, 800c888 <atan+0x2c8>)
 800c6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6cc:	f7f3 fdde 	bl	800028c <__adddf3>
 800c6d0:	4632      	mov	r2, r6
 800c6d2:	463b      	mov	r3, r7
 800c6d4:	f7f3 ff90 	bl	80005f8 <__aeabi_dmul>
 800c6d8:	a36d      	add	r3, pc, #436	; (adr r3, 800c890 <atan+0x2d0>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f7f3 fdd5 	bl	800028c <__adddf3>
 800c6e2:	4632      	mov	r2, r6
 800c6e4:	463b      	mov	r3, r7
 800c6e6:	f7f3 ff87 	bl	80005f8 <__aeabi_dmul>
 800c6ea:	a36b      	add	r3, pc, #428	; (adr r3, 800c898 <atan+0x2d8>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f7f3 fdcc 	bl	800028c <__adddf3>
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	463b      	mov	r3, r7
 800c6f8:	f7f3 ff7e 	bl	80005f8 <__aeabi_dmul>
 800c6fc:	a368      	add	r3, pc, #416	; (adr r3, 800c8a0 <atan+0x2e0>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f7f3 fdc3 	bl	800028c <__adddf3>
 800c706:	4642      	mov	r2, r8
 800c708:	464b      	mov	r3, r9
 800c70a:	f7f3 ff75 	bl	80005f8 <__aeabi_dmul>
 800c70e:	a366      	add	r3, pc, #408	; (adr r3, 800c8a8 <atan+0x2e8>)
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	4680      	mov	r8, r0
 800c716:	4689      	mov	r9, r1
 800c718:	4630      	mov	r0, r6
 800c71a:	4639      	mov	r1, r7
 800c71c:	f7f3 ff6c 	bl	80005f8 <__aeabi_dmul>
 800c720:	a363      	add	r3, pc, #396	; (adr r3, 800c8b0 <atan+0x2f0>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7f3 fdaf 	bl	8000288 <__aeabi_dsub>
 800c72a:	4632      	mov	r2, r6
 800c72c:	463b      	mov	r3, r7
 800c72e:	f7f3 ff63 	bl	80005f8 <__aeabi_dmul>
 800c732:	a361      	add	r3, pc, #388	; (adr r3, 800c8b8 <atan+0x2f8>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f7f3 fda6 	bl	8000288 <__aeabi_dsub>
 800c73c:	4632      	mov	r2, r6
 800c73e:	463b      	mov	r3, r7
 800c740:	f7f3 ff5a 	bl	80005f8 <__aeabi_dmul>
 800c744:	a35e      	add	r3, pc, #376	; (adr r3, 800c8c0 <atan+0x300>)
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	f7f3 fd9d 	bl	8000288 <__aeabi_dsub>
 800c74e:	4632      	mov	r2, r6
 800c750:	463b      	mov	r3, r7
 800c752:	f7f3 ff51 	bl	80005f8 <__aeabi_dmul>
 800c756:	a35c      	add	r3, pc, #368	; (adr r3, 800c8c8 <atan+0x308>)
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f7f3 fd94 	bl	8000288 <__aeabi_dsub>
 800c760:	4632      	mov	r2, r6
 800c762:	463b      	mov	r3, r7
 800c764:	f7f3 ff48 	bl	80005f8 <__aeabi_dmul>
 800c768:	4602      	mov	r2, r0
 800c76a:	460b      	mov	r3, r1
 800c76c:	4640      	mov	r0, r8
 800c76e:	4649      	mov	r1, r9
 800c770:	f7f3 fd8c 	bl	800028c <__adddf3>
 800c774:	4622      	mov	r2, r4
 800c776:	462b      	mov	r3, r5
 800c778:	f7f3 ff3e 	bl	80005f8 <__aeabi_dmul>
 800c77c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	d14b      	bne.n	800c81e <atan+0x25e>
 800c786:	4620      	mov	r0, r4
 800c788:	4629      	mov	r1, r5
 800c78a:	f7f3 fd7d 	bl	8000288 <__aeabi_dsub>
 800c78e:	e72c      	b.n	800c5ea <atan+0x2a>
 800c790:	ee10 0a10 	vmov	r0, s0
 800c794:	4b53      	ldr	r3, [pc, #332]	; (800c8e4 <atan+0x324>)
 800c796:	2200      	movs	r2, #0
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fd75 	bl	8000288 <__aeabi_dsub>
 800c79e:	4b51      	ldr	r3, [pc, #324]	; (800c8e4 <atan+0x324>)
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	460f      	mov	r7, r1
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	f7f3 fd6f 	bl	800028c <__adddf3>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	4639      	mov	r1, r7
 800c7b6:	f7f4 f849 	bl	800084c <__aeabi_ddiv>
 800c7ba:	f04f 0a01 	mov.w	sl, #1
 800c7be:	4604      	mov	r4, r0
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	e764      	b.n	800c68e <atan+0xce>
 800c7c4:	4b49      	ldr	r3, [pc, #292]	; (800c8ec <atan+0x32c>)
 800c7c6:	429e      	cmp	r6, r3
 800c7c8:	da1d      	bge.n	800c806 <atan+0x246>
 800c7ca:	ee10 0a10 	vmov	r0, s0
 800c7ce:	4b48      	ldr	r3, [pc, #288]	; (800c8f0 <atan+0x330>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	f7f3 fd58 	bl	8000288 <__aeabi_dsub>
 800c7d8:	4b45      	ldr	r3, [pc, #276]	; (800c8f0 <atan+0x330>)
 800c7da:	4606      	mov	r6, r0
 800c7dc:	460f      	mov	r7, r1
 800c7de:	2200      	movs	r2, #0
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	f7f3 ff08 	bl	80005f8 <__aeabi_dmul>
 800c7e8:	4b3e      	ldr	r3, [pc, #248]	; (800c8e4 <atan+0x324>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f7f3 fd4e 	bl	800028c <__adddf3>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	f7f4 f828 	bl	800084c <__aeabi_ddiv>
 800c7fc:	f04f 0a02 	mov.w	sl, #2
 800c800:	4604      	mov	r4, r0
 800c802:	460d      	mov	r5, r1
 800c804:	e743      	b.n	800c68e <atan+0xce>
 800c806:	462b      	mov	r3, r5
 800c808:	ee10 2a10 	vmov	r2, s0
 800c80c:	4939      	ldr	r1, [pc, #228]	; (800c8f4 <atan+0x334>)
 800c80e:	2000      	movs	r0, #0
 800c810:	f7f4 f81c 	bl	800084c <__aeabi_ddiv>
 800c814:	f04f 0a03 	mov.w	sl, #3
 800c818:	4604      	mov	r4, r0
 800c81a:	460d      	mov	r5, r1
 800c81c:	e737      	b.n	800c68e <atan+0xce>
 800c81e:	4b36      	ldr	r3, [pc, #216]	; (800c8f8 <atan+0x338>)
 800c820:	4e36      	ldr	r6, [pc, #216]	; (800c8fc <atan+0x33c>)
 800c822:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	f7f3 fd2d 	bl	8000288 <__aeabi_dsub>
 800c82e:	4622      	mov	r2, r4
 800c830:	462b      	mov	r3, r5
 800c832:	f7f3 fd29 	bl	8000288 <__aeabi_dsub>
 800c836:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c842:	f7f3 fd21 	bl	8000288 <__aeabi_dsub>
 800c846:	f1bb 0f00 	cmp.w	fp, #0
 800c84a:	4604      	mov	r4, r0
 800c84c:	460d      	mov	r5, r1
 800c84e:	f6bf aed6 	bge.w	800c5fe <atan+0x3e>
 800c852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c856:	461d      	mov	r5, r3
 800c858:	e6d1      	b.n	800c5fe <atan+0x3e>
 800c85a:	a51d      	add	r5, pc, #116	; (adr r5, 800c8d0 <atan+0x310>)
 800c85c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c860:	e6cd      	b.n	800c5fe <atan+0x3e>
 800c862:	bf00      	nop
 800c864:	f3af 8000 	nop.w
 800c868:	54442d18 	.word	0x54442d18
 800c86c:	bff921fb 	.word	0xbff921fb
 800c870:	8800759c 	.word	0x8800759c
 800c874:	7e37e43c 	.word	0x7e37e43c
 800c878:	e322da11 	.word	0xe322da11
 800c87c:	3f90ad3a 	.word	0x3f90ad3a
 800c880:	24760deb 	.word	0x24760deb
 800c884:	3fa97b4b 	.word	0x3fa97b4b
 800c888:	a0d03d51 	.word	0xa0d03d51
 800c88c:	3fb10d66 	.word	0x3fb10d66
 800c890:	c54c206e 	.word	0xc54c206e
 800c894:	3fb745cd 	.word	0x3fb745cd
 800c898:	920083ff 	.word	0x920083ff
 800c89c:	3fc24924 	.word	0x3fc24924
 800c8a0:	5555550d 	.word	0x5555550d
 800c8a4:	3fd55555 	.word	0x3fd55555
 800c8a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c8ac:	bfa2b444 	.word	0xbfa2b444
 800c8b0:	52defd9a 	.word	0x52defd9a
 800c8b4:	3fadde2d 	.word	0x3fadde2d
 800c8b8:	af749a6d 	.word	0xaf749a6d
 800c8bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c8c0:	fe231671 	.word	0xfe231671
 800c8c4:	3fbc71c6 	.word	0x3fbc71c6
 800c8c8:	9998ebc4 	.word	0x9998ebc4
 800c8cc:	3fc99999 	.word	0x3fc99999
 800c8d0:	54442d18 	.word	0x54442d18
 800c8d4:	3ff921fb 	.word	0x3ff921fb
 800c8d8:	440fffff 	.word	0x440fffff
 800c8dc:	7ff00000 	.word	0x7ff00000
 800c8e0:	3fdbffff 	.word	0x3fdbffff
 800c8e4:	3ff00000 	.word	0x3ff00000
 800c8e8:	3ff2ffff 	.word	0x3ff2ffff
 800c8ec:	40038000 	.word	0x40038000
 800c8f0:	3ff80000 	.word	0x3ff80000
 800c8f4:	bff00000 	.word	0xbff00000
 800c8f8:	0800d450 	.word	0x0800d450
 800c8fc:	0800d430 	.word	0x0800d430

0800c900 <fabs>:
 800c900:	ec51 0b10 	vmov	r0, r1, d0
 800c904:	ee10 2a10 	vmov	r2, s0
 800c908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c90c:	ec43 2b10 	vmov	d0, r2, r3
 800c910:	4770      	bx	lr
 800c912:	0000      	movs	r0, r0
 800c914:	0000      	movs	r0, r0
	...

0800c918 <__kernel_rem_pio2>:
 800c918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91c:	ed2d 8b02 	vpush	{d8}
 800c920:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c924:	f112 0f14 	cmn.w	r2, #20
 800c928:	9306      	str	r3, [sp, #24]
 800c92a:	9104      	str	r1, [sp, #16]
 800c92c:	4bc2      	ldr	r3, [pc, #776]	; (800cc38 <__kernel_rem_pio2+0x320>)
 800c92e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c930:	9009      	str	r0, [sp, #36]	; 0x24
 800c932:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	9b06      	ldr	r3, [sp, #24]
 800c93a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c93e:	bfa8      	it	ge
 800c940:	1ed4      	subge	r4, r2, #3
 800c942:	9305      	str	r3, [sp, #20]
 800c944:	bfb2      	itee	lt
 800c946:	2400      	movlt	r4, #0
 800c948:	2318      	movge	r3, #24
 800c94a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c94e:	f06f 0317 	mvn.w	r3, #23
 800c952:	fb04 3303 	mla	r3, r4, r3, r3
 800c956:	eb03 0a02 	add.w	sl, r3, r2
 800c95a:	9b00      	ldr	r3, [sp, #0]
 800c95c:	9a05      	ldr	r2, [sp, #20]
 800c95e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800cc28 <__kernel_rem_pio2+0x310>
 800c962:	eb03 0802 	add.w	r8, r3, r2
 800c966:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c968:	1aa7      	subs	r7, r4, r2
 800c96a:	ae20      	add	r6, sp, #128	; 0x80
 800c96c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c970:	2500      	movs	r5, #0
 800c972:	4545      	cmp	r5, r8
 800c974:	dd13      	ble.n	800c99e <__kernel_rem_pio2+0x86>
 800c976:	9b06      	ldr	r3, [sp, #24]
 800c978:	aa20      	add	r2, sp, #128	; 0x80
 800c97a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c97e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c982:	f04f 0800 	mov.w	r8, #0
 800c986:	9b00      	ldr	r3, [sp, #0]
 800c988:	4598      	cmp	r8, r3
 800c98a:	dc31      	bgt.n	800c9f0 <__kernel_rem_pio2+0xd8>
 800c98c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800cc28 <__kernel_rem_pio2+0x310>
 800c990:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c994:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c998:	462f      	mov	r7, r5
 800c99a:	2600      	movs	r6, #0
 800c99c:	e01b      	b.n	800c9d6 <__kernel_rem_pio2+0xbe>
 800c99e:	42ef      	cmn	r7, r5
 800c9a0:	d407      	bmi.n	800c9b2 <__kernel_rem_pio2+0x9a>
 800c9a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c9a6:	f7f3 fdbd 	bl	8000524 <__aeabi_i2d>
 800c9aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c9ae:	3501      	adds	r5, #1
 800c9b0:	e7df      	b.n	800c972 <__kernel_rem_pio2+0x5a>
 800c9b2:	ec51 0b18 	vmov	r0, r1, d8
 800c9b6:	e7f8      	b.n	800c9aa <__kernel_rem_pio2+0x92>
 800c9b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c9c0:	f7f3 fe1a 	bl	80005f8 <__aeabi_dmul>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9cc:	f7f3 fc5e 	bl	800028c <__adddf3>
 800c9d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9d4:	3601      	adds	r6, #1
 800c9d6:	9b05      	ldr	r3, [sp, #20]
 800c9d8:	429e      	cmp	r6, r3
 800c9da:	f1a7 0708 	sub.w	r7, r7, #8
 800c9de:	ddeb      	ble.n	800c9b8 <__kernel_rem_pio2+0xa0>
 800c9e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9e4:	f108 0801 	add.w	r8, r8, #1
 800c9e8:	ecab 7b02 	vstmia	fp!, {d7}
 800c9ec:	3508      	adds	r5, #8
 800c9ee:	e7ca      	b.n	800c986 <__kernel_rem_pio2+0x6e>
 800c9f0:	9b00      	ldr	r3, [sp, #0]
 800c9f2:	aa0c      	add	r2, sp, #48	; 0x30
 800c9f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c9fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ca00:	9c00      	ldr	r4, [sp, #0]
 800ca02:	930a      	str	r3, [sp, #40]	; 0x28
 800ca04:	00e3      	lsls	r3, r4, #3
 800ca06:	9308      	str	r3, [sp, #32]
 800ca08:	ab98      	add	r3, sp, #608	; 0x260
 800ca0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca0e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ca12:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ca16:	ab70      	add	r3, sp, #448	; 0x1c0
 800ca18:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ca1c:	46c3      	mov	fp, r8
 800ca1e:	46a1      	mov	r9, r4
 800ca20:	f1b9 0f00 	cmp.w	r9, #0
 800ca24:	f1a5 0508 	sub.w	r5, r5, #8
 800ca28:	dc77      	bgt.n	800cb1a <__kernel_rem_pio2+0x202>
 800ca2a:	ec47 6b10 	vmov	d0, r6, r7
 800ca2e:	4650      	mov	r0, sl
 800ca30:	f000 fac2 	bl	800cfb8 <scalbn>
 800ca34:	ec57 6b10 	vmov	r6, r7, d0
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ca3e:	ee10 0a10 	vmov	r0, s0
 800ca42:	4639      	mov	r1, r7
 800ca44:	f7f3 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ca48:	ec41 0b10 	vmov	d0, r0, r1
 800ca4c:	f000 fb34 	bl	800d0b8 <floor>
 800ca50:	4b7a      	ldr	r3, [pc, #488]	; (800cc3c <__kernel_rem_pio2+0x324>)
 800ca52:	ec51 0b10 	vmov	r0, r1, d0
 800ca56:	2200      	movs	r2, #0
 800ca58:	f7f3 fdce 	bl	80005f8 <__aeabi_dmul>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	460b      	mov	r3, r1
 800ca60:	4630      	mov	r0, r6
 800ca62:	4639      	mov	r1, r7
 800ca64:	f7f3 fc10 	bl	8000288 <__aeabi_dsub>
 800ca68:	460f      	mov	r7, r1
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	f7f4 f874 	bl	8000b58 <__aeabi_d2iz>
 800ca70:	9002      	str	r0, [sp, #8]
 800ca72:	f7f3 fd57 	bl	8000524 <__aeabi_i2d>
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	4639      	mov	r1, r7
 800ca7e:	f7f3 fc03 	bl	8000288 <__aeabi_dsub>
 800ca82:	f1ba 0f00 	cmp.w	sl, #0
 800ca86:	4606      	mov	r6, r0
 800ca88:	460f      	mov	r7, r1
 800ca8a:	dd6d      	ble.n	800cb68 <__kernel_rem_pio2+0x250>
 800ca8c:	1e61      	subs	r1, r4, #1
 800ca8e:	ab0c      	add	r3, sp, #48	; 0x30
 800ca90:	9d02      	ldr	r5, [sp, #8]
 800ca92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca96:	f1ca 0018 	rsb	r0, sl, #24
 800ca9a:	fa43 f200 	asr.w	r2, r3, r0
 800ca9e:	4415      	add	r5, r2
 800caa0:	4082      	lsls	r2, r0
 800caa2:	1a9b      	subs	r3, r3, r2
 800caa4:	aa0c      	add	r2, sp, #48	; 0x30
 800caa6:	9502      	str	r5, [sp, #8]
 800caa8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800caac:	f1ca 0217 	rsb	r2, sl, #23
 800cab0:	fa43 fb02 	asr.w	fp, r3, r2
 800cab4:	f1bb 0f00 	cmp.w	fp, #0
 800cab8:	dd65      	ble.n	800cb86 <__kernel_rem_pio2+0x26e>
 800caba:	9b02      	ldr	r3, [sp, #8]
 800cabc:	2200      	movs	r2, #0
 800cabe:	3301      	adds	r3, #1
 800cac0:	9302      	str	r3, [sp, #8]
 800cac2:	4615      	mov	r5, r2
 800cac4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cac8:	4294      	cmp	r4, r2
 800caca:	f300 809f 	bgt.w	800cc0c <__kernel_rem_pio2+0x2f4>
 800cace:	f1ba 0f00 	cmp.w	sl, #0
 800cad2:	dd07      	ble.n	800cae4 <__kernel_rem_pio2+0x1cc>
 800cad4:	f1ba 0f01 	cmp.w	sl, #1
 800cad8:	f000 80c1 	beq.w	800cc5e <__kernel_rem_pio2+0x346>
 800cadc:	f1ba 0f02 	cmp.w	sl, #2
 800cae0:	f000 80c7 	beq.w	800cc72 <__kernel_rem_pio2+0x35a>
 800cae4:	f1bb 0f02 	cmp.w	fp, #2
 800cae8:	d14d      	bne.n	800cb86 <__kernel_rem_pio2+0x26e>
 800caea:	4632      	mov	r2, r6
 800caec:	463b      	mov	r3, r7
 800caee:	4954      	ldr	r1, [pc, #336]	; (800cc40 <__kernel_rem_pio2+0x328>)
 800caf0:	2000      	movs	r0, #0
 800caf2:	f7f3 fbc9 	bl	8000288 <__aeabi_dsub>
 800caf6:	4606      	mov	r6, r0
 800caf8:	460f      	mov	r7, r1
 800cafa:	2d00      	cmp	r5, #0
 800cafc:	d043      	beq.n	800cb86 <__kernel_rem_pio2+0x26e>
 800cafe:	4650      	mov	r0, sl
 800cb00:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800cc30 <__kernel_rem_pio2+0x318>
 800cb04:	f000 fa58 	bl	800cfb8 <scalbn>
 800cb08:	4630      	mov	r0, r6
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	ec53 2b10 	vmov	r2, r3, d0
 800cb10:	f7f3 fbba 	bl	8000288 <__aeabi_dsub>
 800cb14:	4606      	mov	r6, r0
 800cb16:	460f      	mov	r7, r1
 800cb18:	e035      	b.n	800cb86 <__kernel_rem_pio2+0x26e>
 800cb1a:	4b4a      	ldr	r3, [pc, #296]	; (800cc44 <__kernel_rem_pio2+0x32c>)
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	4630      	mov	r0, r6
 800cb20:	4639      	mov	r1, r7
 800cb22:	f7f3 fd69 	bl	80005f8 <__aeabi_dmul>
 800cb26:	f7f4 f817 	bl	8000b58 <__aeabi_d2iz>
 800cb2a:	f7f3 fcfb 	bl	8000524 <__aeabi_i2d>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	ec43 2b18 	vmov	d8, r2, r3
 800cb36:	4b44      	ldr	r3, [pc, #272]	; (800cc48 <__kernel_rem_pio2+0x330>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f7f3 fd5d 	bl	80005f8 <__aeabi_dmul>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	4630      	mov	r0, r6
 800cb44:	4639      	mov	r1, r7
 800cb46:	f7f3 fb9f 	bl	8000288 <__aeabi_dsub>
 800cb4a:	f7f4 f805 	bl	8000b58 <__aeabi_d2iz>
 800cb4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb52:	f84b 0b04 	str.w	r0, [fp], #4
 800cb56:	ec51 0b18 	vmov	r0, r1, d8
 800cb5a:	f7f3 fb97 	bl	800028c <__adddf3>
 800cb5e:	f109 39ff 	add.w	r9, r9, #4294967295
 800cb62:	4606      	mov	r6, r0
 800cb64:	460f      	mov	r7, r1
 800cb66:	e75b      	b.n	800ca20 <__kernel_rem_pio2+0x108>
 800cb68:	d106      	bne.n	800cb78 <__kernel_rem_pio2+0x260>
 800cb6a:	1e63      	subs	r3, r4, #1
 800cb6c:	aa0c      	add	r2, sp, #48	; 0x30
 800cb6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb72:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800cb76:	e79d      	b.n	800cab4 <__kernel_rem_pio2+0x19c>
 800cb78:	4b34      	ldr	r3, [pc, #208]	; (800cc4c <__kernel_rem_pio2+0x334>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f7f3 ffc2 	bl	8000b04 <__aeabi_dcmpge>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d140      	bne.n	800cc06 <__kernel_rem_pio2+0x2ee>
 800cb84:	4683      	mov	fp, r0
 800cb86:	2200      	movs	r2, #0
 800cb88:	2300      	movs	r3, #0
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	4639      	mov	r1, r7
 800cb8e:	f7f3 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb92:	2800      	cmp	r0, #0
 800cb94:	f000 80c1 	beq.w	800cd1a <__kernel_rem_pio2+0x402>
 800cb98:	1e65      	subs	r5, r4, #1
 800cb9a:	462b      	mov	r3, r5
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	9900      	ldr	r1, [sp, #0]
 800cba0:	428b      	cmp	r3, r1
 800cba2:	da6d      	bge.n	800cc80 <__kernel_rem_pio2+0x368>
 800cba4:	2a00      	cmp	r2, #0
 800cba6:	f000 808a 	beq.w	800ccbe <__kernel_rem_pio2+0x3a6>
 800cbaa:	ab0c      	add	r3, sp, #48	; 0x30
 800cbac:	f1aa 0a18 	sub.w	sl, sl, #24
 800cbb0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 80ae 	beq.w	800cd16 <__kernel_rem_pio2+0x3fe>
 800cbba:	4650      	mov	r0, sl
 800cbbc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800cc30 <__kernel_rem_pio2+0x318>
 800cbc0:	f000 f9fa 	bl	800cfb8 <scalbn>
 800cbc4:	1c6b      	adds	r3, r5, #1
 800cbc6:	00da      	lsls	r2, r3, #3
 800cbc8:	9205      	str	r2, [sp, #20]
 800cbca:	ec57 6b10 	vmov	r6, r7, d0
 800cbce:	aa70      	add	r2, sp, #448	; 0x1c0
 800cbd0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800cc44 <__kernel_rem_pio2+0x32c>
 800cbd4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800cbd8:	462c      	mov	r4, r5
 800cbda:	f04f 0800 	mov.w	r8, #0
 800cbde:	2c00      	cmp	r4, #0
 800cbe0:	f280 80d4 	bge.w	800cd8c <__kernel_rem_pio2+0x474>
 800cbe4:	462c      	mov	r4, r5
 800cbe6:	2c00      	cmp	r4, #0
 800cbe8:	f2c0 8102 	blt.w	800cdf0 <__kernel_rem_pio2+0x4d8>
 800cbec:	4b18      	ldr	r3, [pc, #96]	; (800cc50 <__kernel_rem_pio2+0x338>)
 800cbee:	461e      	mov	r6, r3
 800cbf0:	ab70      	add	r3, sp, #448	; 0x1c0
 800cbf2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800cbf6:	1b2b      	subs	r3, r5, r4
 800cbf8:	f04f 0900 	mov.w	r9, #0
 800cbfc:	f04f 0a00 	mov.w	sl, #0
 800cc00:	2700      	movs	r7, #0
 800cc02:	9306      	str	r3, [sp, #24]
 800cc04:	e0e6      	b.n	800cdd4 <__kernel_rem_pio2+0x4bc>
 800cc06:	f04f 0b02 	mov.w	fp, #2
 800cc0a:	e756      	b.n	800caba <__kernel_rem_pio2+0x1a2>
 800cc0c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc10:	bb05      	cbnz	r5, 800cc54 <__kernel_rem_pio2+0x33c>
 800cc12:	b123      	cbz	r3, 800cc1e <__kernel_rem_pio2+0x306>
 800cc14:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cc18:	f8c8 3000 	str.w	r3, [r8]
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	3201      	adds	r2, #1
 800cc20:	f108 0804 	add.w	r8, r8, #4
 800cc24:	461d      	mov	r5, r3
 800cc26:	e74f      	b.n	800cac8 <__kernel_rem_pio2+0x1b0>
	...
 800cc34:	3ff00000 	.word	0x3ff00000
 800cc38:	0800d4b0 	.word	0x0800d4b0
 800cc3c:	40200000 	.word	0x40200000
 800cc40:	3ff00000 	.word	0x3ff00000
 800cc44:	3e700000 	.word	0x3e700000
 800cc48:	41700000 	.word	0x41700000
 800cc4c:	3fe00000 	.word	0x3fe00000
 800cc50:	0800d470 	.word	0x0800d470
 800cc54:	1acb      	subs	r3, r1, r3
 800cc56:	f8c8 3000 	str.w	r3, [r8]
 800cc5a:	462b      	mov	r3, r5
 800cc5c:	e7df      	b.n	800cc1e <__kernel_rem_pio2+0x306>
 800cc5e:	1e62      	subs	r2, r4, #1
 800cc60:	ab0c      	add	r3, sp, #48	; 0x30
 800cc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cc6a:	a90c      	add	r1, sp, #48	; 0x30
 800cc6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cc70:	e738      	b.n	800cae4 <__kernel_rem_pio2+0x1cc>
 800cc72:	1e62      	subs	r2, r4, #1
 800cc74:	ab0c      	add	r3, sp, #48	; 0x30
 800cc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc7a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cc7e:	e7f4      	b.n	800cc6a <__kernel_rem_pio2+0x352>
 800cc80:	a90c      	add	r1, sp, #48	; 0x30
 800cc82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	430a      	orrs	r2, r1
 800cc8a:	e788      	b.n	800cb9e <__kernel_rem_pio2+0x286>
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cc92:	2900      	cmp	r1, #0
 800cc94:	d0fa      	beq.n	800cc8c <__kernel_rem_pio2+0x374>
 800cc96:	9a08      	ldr	r2, [sp, #32]
 800cc98:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800cc9c:	446a      	add	r2, sp
 800cc9e:	3a98      	subs	r2, #152	; 0x98
 800cca0:	9208      	str	r2, [sp, #32]
 800cca2:	9a06      	ldr	r2, [sp, #24]
 800cca4:	a920      	add	r1, sp, #128	; 0x80
 800cca6:	18a2      	adds	r2, r4, r2
 800cca8:	18e3      	adds	r3, r4, r3
 800ccaa:	f104 0801 	add.w	r8, r4, #1
 800ccae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ccb2:	9302      	str	r3, [sp, #8]
 800ccb4:	9b02      	ldr	r3, [sp, #8]
 800ccb6:	4543      	cmp	r3, r8
 800ccb8:	da04      	bge.n	800ccc4 <__kernel_rem_pio2+0x3ac>
 800ccba:	461c      	mov	r4, r3
 800ccbc:	e6a2      	b.n	800ca04 <__kernel_rem_pio2+0xec>
 800ccbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e7e4      	b.n	800cc8e <__kernel_rem_pio2+0x376>
 800ccc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccc6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ccca:	f7f3 fc2b 	bl	8000524 <__aeabi_i2d>
 800ccce:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ccd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd4:	46ab      	mov	fp, r5
 800ccd6:	461c      	mov	r4, r3
 800ccd8:	f04f 0900 	mov.w	r9, #0
 800ccdc:	2600      	movs	r6, #0
 800ccde:	2700      	movs	r7, #0
 800cce0:	9b05      	ldr	r3, [sp, #20]
 800cce2:	4599      	cmp	r9, r3
 800cce4:	dd06      	ble.n	800ccf4 <__kernel_rem_pio2+0x3dc>
 800cce6:	9b08      	ldr	r3, [sp, #32]
 800cce8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ccec:	f108 0801 	add.w	r8, r8, #1
 800ccf0:	9308      	str	r3, [sp, #32]
 800ccf2:	e7df      	b.n	800ccb4 <__kernel_rem_pio2+0x39c>
 800ccf4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ccf8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ccfc:	f7f3 fc7c 	bl	80005f8 <__aeabi_dmul>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4630      	mov	r0, r6
 800cd06:	4639      	mov	r1, r7
 800cd08:	f7f3 fac0 	bl	800028c <__adddf3>
 800cd0c:	f109 0901 	add.w	r9, r9, #1
 800cd10:	4606      	mov	r6, r0
 800cd12:	460f      	mov	r7, r1
 800cd14:	e7e4      	b.n	800cce0 <__kernel_rem_pio2+0x3c8>
 800cd16:	3d01      	subs	r5, #1
 800cd18:	e747      	b.n	800cbaa <__kernel_rem_pio2+0x292>
 800cd1a:	ec47 6b10 	vmov	d0, r6, r7
 800cd1e:	f1ca 0000 	rsb	r0, sl, #0
 800cd22:	f000 f949 	bl	800cfb8 <scalbn>
 800cd26:	ec57 6b10 	vmov	r6, r7, d0
 800cd2a:	4ba0      	ldr	r3, [pc, #640]	; (800cfac <__kernel_rem_pio2+0x694>)
 800cd2c:	ee10 0a10 	vmov	r0, s0
 800cd30:	2200      	movs	r2, #0
 800cd32:	4639      	mov	r1, r7
 800cd34:	f7f3 fee6 	bl	8000b04 <__aeabi_dcmpge>
 800cd38:	b1f8      	cbz	r0, 800cd7a <__kernel_rem_pio2+0x462>
 800cd3a:	4b9d      	ldr	r3, [pc, #628]	; (800cfb0 <__kernel_rem_pio2+0x698>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	4630      	mov	r0, r6
 800cd40:	4639      	mov	r1, r7
 800cd42:	f7f3 fc59 	bl	80005f8 <__aeabi_dmul>
 800cd46:	f7f3 ff07 	bl	8000b58 <__aeabi_d2iz>
 800cd4a:	4680      	mov	r8, r0
 800cd4c:	f7f3 fbea 	bl	8000524 <__aeabi_i2d>
 800cd50:	4b96      	ldr	r3, [pc, #600]	; (800cfac <__kernel_rem_pio2+0x694>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	f7f3 fc50 	bl	80005f8 <__aeabi_dmul>
 800cd58:	460b      	mov	r3, r1
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	4630      	mov	r0, r6
 800cd60:	f7f3 fa92 	bl	8000288 <__aeabi_dsub>
 800cd64:	f7f3 fef8 	bl	8000b58 <__aeabi_d2iz>
 800cd68:	1c65      	adds	r5, r4, #1
 800cd6a:	ab0c      	add	r3, sp, #48	; 0x30
 800cd6c:	f10a 0a18 	add.w	sl, sl, #24
 800cd70:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cd74:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cd78:	e71f      	b.n	800cbba <__kernel_rem_pio2+0x2a2>
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	4639      	mov	r1, r7
 800cd7e:	f7f3 feeb 	bl	8000b58 <__aeabi_d2iz>
 800cd82:	ab0c      	add	r3, sp, #48	; 0x30
 800cd84:	4625      	mov	r5, r4
 800cd86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cd8a:	e716      	b.n	800cbba <__kernel_rem_pio2+0x2a2>
 800cd8c:	ab0c      	add	r3, sp, #48	; 0x30
 800cd8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cd92:	f7f3 fbc7 	bl	8000524 <__aeabi_i2d>
 800cd96:	4632      	mov	r2, r6
 800cd98:	463b      	mov	r3, r7
 800cd9a:	f7f3 fc2d 	bl	80005f8 <__aeabi_dmul>
 800cd9e:	4642      	mov	r2, r8
 800cda0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800cda4:	464b      	mov	r3, r9
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	f7f3 fc25 	bl	80005f8 <__aeabi_dmul>
 800cdae:	3c01      	subs	r4, #1
 800cdb0:	4606      	mov	r6, r0
 800cdb2:	460f      	mov	r7, r1
 800cdb4:	e713      	b.n	800cbde <__kernel_rem_pio2+0x2c6>
 800cdb6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800cdba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800cdbe:	f7f3 fc1b 	bl	80005f8 <__aeabi_dmul>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4648      	mov	r0, r9
 800cdc8:	4651      	mov	r1, sl
 800cdca:	f7f3 fa5f 	bl	800028c <__adddf3>
 800cdce:	3701      	adds	r7, #1
 800cdd0:	4681      	mov	r9, r0
 800cdd2:	468a      	mov	sl, r1
 800cdd4:	9b00      	ldr	r3, [sp, #0]
 800cdd6:	429f      	cmp	r7, r3
 800cdd8:	dc02      	bgt.n	800cde0 <__kernel_rem_pio2+0x4c8>
 800cdda:	9b06      	ldr	r3, [sp, #24]
 800cddc:	429f      	cmp	r7, r3
 800cdde:	ddea      	ble.n	800cdb6 <__kernel_rem_pio2+0x49e>
 800cde0:	9a06      	ldr	r2, [sp, #24]
 800cde2:	ab48      	add	r3, sp, #288	; 0x120
 800cde4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800cde8:	e9c6 9a00 	strd	r9, sl, [r6]
 800cdec:	3c01      	subs	r4, #1
 800cdee:	e6fa      	b.n	800cbe6 <__kernel_rem_pio2+0x2ce>
 800cdf0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	dc0b      	bgt.n	800ce0e <__kernel_rem_pio2+0x4f6>
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	dc39      	bgt.n	800ce6e <__kernel_rem_pio2+0x556>
 800cdfa:	d05d      	beq.n	800ceb8 <__kernel_rem_pio2+0x5a0>
 800cdfc:	9b02      	ldr	r3, [sp, #8]
 800cdfe:	f003 0007 	and.w	r0, r3, #7
 800ce02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ce06:	ecbd 8b02 	vpop	{d8}
 800ce0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ce10:	2b03      	cmp	r3, #3
 800ce12:	d1f3      	bne.n	800cdfc <__kernel_rem_pio2+0x4e4>
 800ce14:	9b05      	ldr	r3, [sp, #20]
 800ce16:	9500      	str	r5, [sp, #0]
 800ce18:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ce1c:	eb0d 0403 	add.w	r4, sp, r3
 800ce20:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ce24:	46a2      	mov	sl, r4
 800ce26:	9b00      	ldr	r3, [sp, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f1aa 0a08 	sub.w	sl, sl, #8
 800ce2e:	dc69      	bgt.n	800cf04 <__kernel_rem_pio2+0x5ec>
 800ce30:	46aa      	mov	sl, r5
 800ce32:	f1ba 0f01 	cmp.w	sl, #1
 800ce36:	f1a4 0408 	sub.w	r4, r4, #8
 800ce3a:	f300 8083 	bgt.w	800cf44 <__kernel_rem_pio2+0x62c>
 800ce3e:	9c05      	ldr	r4, [sp, #20]
 800ce40:	ab48      	add	r3, sp, #288	; 0x120
 800ce42:	441c      	add	r4, r3
 800ce44:	2000      	movs	r0, #0
 800ce46:	2100      	movs	r1, #0
 800ce48:	2d01      	cmp	r5, #1
 800ce4a:	f300 809a 	bgt.w	800cf82 <__kernel_rem_pio2+0x66a>
 800ce4e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ce52:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ce56:	f1bb 0f00 	cmp.w	fp, #0
 800ce5a:	f040 8098 	bne.w	800cf8e <__kernel_rem_pio2+0x676>
 800ce5e:	9b04      	ldr	r3, [sp, #16]
 800ce60:	e9c3 7800 	strd	r7, r8, [r3]
 800ce64:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ce68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ce6c:	e7c6      	b.n	800cdfc <__kernel_rem_pio2+0x4e4>
 800ce6e:	9e05      	ldr	r6, [sp, #20]
 800ce70:	ab48      	add	r3, sp, #288	; 0x120
 800ce72:	441e      	add	r6, r3
 800ce74:	462c      	mov	r4, r5
 800ce76:	2000      	movs	r0, #0
 800ce78:	2100      	movs	r1, #0
 800ce7a:	2c00      	cmp	r4, #0
 800ce7c:	da33      	bge.n	800cee6 <__kernel_rem_pio2+0x5ce>
 800ce7e:	f1bb 0f00 	cmp.w	fp, #0
 800ce82:	d036      	beq.n	800cef2 <__kernel_rem_pio2+0x5da>
 800ce84:	4602      	mov	r2, r0
 800ce86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce8a:	9c04      	ldr	r4, [sp, #16]
 800ce8c:	e9c4 2300 	strd	r2, r3, [r4]
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ce98:	f7f3 f9f6 	bl	8000288 <__aeabi_dsub>
 800ce9c:	ae4a      	add	r6, sp, #296	; 0x128
 800ce9e:	2401      	movs	r4, #1
 800cea0:	42a5      	cmp	r5, r4
 800cea2:	da29      	bge.n	800cef8 <__kernel_rem_pio2+0x5e0>
 800cea4:	f1bb 0f00 	cmp.w	fp, #0
 800cea8:	d002      	beq.n	800ceb0 <__kernel_rem_pio2+0x598>
 800ceaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ceae:	4619      	mov	r1, r3
 800ceb0:	9b04      	ldr	r3, [sp, #16]
 800ceb2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ceb6:	e7a1      	b.n	800cdfc <__kernel_rem_pio2+0x4e4>
 800ceb8:	9c05      	ldr	r4, [sp, #20]
 800ceba:	ab48      	add	r3, sp, #288	; 0x120
 800cebc:	441c      	add	r4, r3
 800cebe:	2000      	movs	r0, #0
 800cec0:	2100      	movs	r1, #0
 800cec2:	2d00      	cmp	r5, #0
 800cec4:	da09      	bge.n	800ceda <__kernel_rem_pio2+0x5c2>
 800cec6:	f1bb 0f00 	cmp.w	fp, #0
 800ceca:	d002      	beq.n	800ced2 <__kernel_rem_pio2+0x5ba>
 800cecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ced0:	4619      	mov	r1, r3
 800ced2:	9b04      	ldr	r3, [sp, #16]
 800ced4:	e9c3 0100 	strd	r0, r1, [r3]
 800ced8:	e790      	b.n	800cdfc <__kernel_rem_pio2+0x4e4>
 800ceda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cede:	f7f3 f9d5 	bl	800028c <__adddf3>
 800cee2:	3d01      	subs	r5, #1
 800cee4:	e7ed      	b.n	800cec2 <__kernel_rem_pio2+0x5aa>
 800cee6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ceea:	f7f3 f9cf 	bl	800028c <__adddf3>
 800ceee:	3c01      	subs	r4, #1
 800cef0:	e7c3      	b.n	800ce7a <__kernel_rem_pio2+0x562>
 800cef2:	4602      	mov	r2, r0
 800cef4:	460b      	mov	r3, r1
 800cef6:	e7c8      	b.n	800ce8a <__kernel_rem_pio2+0x572>
 800cef8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cefc:	f7f3 f9c6 	bl	800028c <__adddf3>
 800cf00:	3401      	adds	r4, #1
 800cf02:	e7cd      	b.n	800cea0 <__kernel_rem_pio2+0x588>
 800cf04:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf08:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800cf0c:	9b00      	ldr	r3, [sp, #0]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	4632      	mov	r2, r6
 800cf14:	463b      	mov	r3, r7
 800cf16:	4640      	mov	r0, r8
 800cf18:	4649      	mov	r1, r9
 800cf1a:	f7f3 f9b7 	bl	800028c <__adddf3>
 800cf1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4640      	mov	r0, r8
 800cf28:	4649      	mov	r1, r9
 800cf2a:	f7f3 f9ad 	bl	8000288 <__aeabi_dsub>
 800cf2e:	4632      	mov	r2, r6
 800cf30:	463b      	mov	r3, r7
 800cf32:	f7f3 f9ab 	bl	800028c <__adddf3>
 800cf36:	ed9d 7b06 	vldr	d7, [sp, #24]
 800cf3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf3e:	ed8a 7b00 	vstr	d7, [sl]
 800cf42:	e770      	b.n	800ce26 <__kernel_rem_pio2+0x50e>
 800cf44:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cf48:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	4632      	mov	r2, r6
 800cf50:	463b      	mov	r3, r7
 800cf52:	4649      	mov	r1, r9
 800cf54:	f7f3 f99a 	bl	800028c <__adddf3>
 800cf58:	e9cd 0100 	strd	r0, r1, [sp]
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	4640      	mov	r0, r8
 800cf62:	4649      	mov	r1, r9
 800cf64:	f7f3 f990 	bl	8000288 <__aeabi_dsub>
 800cf68:	4632      	mov	r2, r6
 800cf6a:	463b      	mov	r3, r7
 800cf6c:	f7f3 f98e 	bl	800028c <__adddf3>
 800cf70:	ed9d 7b00 	vldr	d7, [sp]
 800cf74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cf78:	ed84 7b00 	vstr	d7, [r4]
 800cf7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf80:	e757      	b.n	800ce32 <__kernel_rem_pio2+0x51a>
 800cf82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cf86:	f7f3 f981 	bl	800028c <__adddf3>
 800cf8a:	3d01      	subs	r5, #1
 800cf8c:	e75c      	b.n	800ce48 <__kernel_rem_pio2+0x530>
 800cf8e:	9b04      	ldr	r3, [sp, #16]
 800cf90:	9a04      	ldr	r2, [sp, #16]
 800cf92:	601f      	str	r7, [r3, #0]
 800cf94:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800cf98:	605c      	str	r4, [r3, #4]
 800cf9a:	609d      	str	r5, [r3, #8]
 800cf9c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cfa0:	60d3      	str	r3, [r2, #12]
 800cfa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfa6:	6110      	str	r0, [r2, #16]
 800cfa8:	6153      	str	r3, [r2, #20]
 800cfaa:	e727      	b.n	800cdfc <__kernel_rem_pio2+0x4e4>
 800cfac:	41700000 	.word	0x41700000
 800cfb0:	3e700000 	.word	0x3e700000
 800cfb4:	00000000 	.word	0x00000000

0800cfb8 <scalbn>:
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	ec55 4b10 	vmov	r4, r5, d0
 800cfbe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	462b      	mov	r3, r5
 800cfc6:	b999      	cbnz	r1, 800cff0 <scalbn+0x38>
 800cfc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cfcc:	4323      	orrs	r3, r4
 800cfce:	d03f      	beq.n	800d050 <scalbn+0x98>
 800cfd0:	4b35      	ldr	r3, [pc, #212]	; (800d0a8 <scalbn+0xf0>)
 800cfd2:	4629      	mov	r1, r5
 800cfd4:	ee10 0a10 	vmov	r0, s0
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f7f3 fb0d 	bl	80005f8 <__aeabi_dmul>
 800cfde:	4b33      	ldr	r3, [pc, #204]	; (800d0ac <scalbn+0xf4>)
 800cfe0:	429e      	cmp	r6, r3
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	460d      	mov	r5, r1
 800cfe6:	da10      	bge.n	800d00a <scalbn+0x52>
 800cfe8:	a327      	add	r3, pc, #156	; (adr r3, 800d088 <scalbn+0xd0>)
 800cfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfee:	e01f      	b.n	800d030 <scalbn+0x78>
 800cff0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cff4:	4291      	cmp	r1, r2
 800cff6:	d10c      	bne.n	800d012 <scalbn+0x5a>
 800cff8:	ee10 2a10 	vmov	r2, s0
 800cffc:	4620      	mov	r0, r4
 800cffe:	4629      	mov	r1, r5
 800d000:	f7f3 f944 	bl	800028c <__adddf3>
 800d004:	4604      	mov	r4, r0
 800d006:	460d      	mov	r5, r1
 800d008:	e022      	b.n	800d050 <scalbn+0x98>
 800d00a:	460b      	mov	r3, r1
 800d00c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d010:	3936      	subs	r1, #54	; 0x36
 800d012:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d016:	4296      	cmp	r6, r2
 800d018:	dd0d      	ble.n	800d036 <scalbn+0x7e>
 800d01a:	2d00      	cmp	r5, #0
 800d01c:	a11c      	add	r1, pc, #112	; (adr r1, 800d090 <scalbn+0xd8>)
 800d01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d022:	da02      	bge.n	800d02a <scalbn+0x72>
 800d024:	a11c      	add	r1, pc, #112	; (adr r1, 800d098 <scalbn+0xe0>)
 800d026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d02a:	a319      	add	r3, pc, #100	; (adr r3, 800d090 <scalbn+0xd8>)
 800d02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d030:	f7f3 fae2 	bl	80005f8 <__aeabi_dmul>
 800d034:	e7e6      	b.n	800d004 <scalbn+0x4c>
 800d036:	1872      	adds	r2, r6, r1
 800d038:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d03c:	428a      	cmp	r2, r1
 800d03e:	dcec      	bgt.n	800d01a <scalbn+0x62>
 800d040:	2a00      	cmp	r2, #0
 800d042:	dd08      	ble.n	800d056 <scalbn+0x9e>
 800d044:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d048:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d04c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d050:	ec45 4b10 	vmov	d0, r4, r5
 800d054:	bd70      	pop	{r4, r5, r6, pc}
 800d056:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d05a:	da08      	bge.n	800d06e <scalbn+0xb6>
 800d05c:	2d00      	cmp	r5, #0
 800d05e:	a10a      	add	r1, pc, #40	; (adr r1, 800d088 <scalbn+0xd0>)
 800d060:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d064:	dac0      	bge.n	800cfe8 <scalbn+0x30>
 800d066:	a10e      	add	r1, pc, #56	; (adr r1, 800d0a0 <scalbn+0xe8>)
 800d068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d06c:	e7bc      	b.n	800cfe8 <scalbn+0x30>
 800d06e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d072:	3236      	adds	r2, #54	; 0x36
 800d074:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d078:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d07c:	4620      	mov	r0, r4
 800d07e:	4b0c      	ldr	r3, [pc, #48]	; (800d0b0 <scalbn+0xf8>)
 800d080:	2200      	movs	r2, #0
 800d082:	e7d5      	b.n	800d030 <scalbn+0x78>
 800d084:	f3af 8000 	nop.w
 800d088:	c2f8f359 	.word	0xc2f8f359
 800d08c:	01a56e1f 	.word	0x01a56e1f
 800d090:	8800759c 	.word	0x8800759c
 800d094:	7e37e43c 	.word	0x7e37e43c
 800d098:	8800759c 	.word	0x8800759c
 800d09c:	fe37e43c 	.word	0xfe37e43c
 800d0a0:	c2f8f359 	.word	0xc2f8f359
 800d0a4:	81a56e1f 	.word	0x81a56e1f
 800d0a8:	43500000 	.word	0x43500000
 800d0ac:	ffff3cb0 	.word	0xffff3cb0
 800d0b0:	3c900000 	.word	0x3c900000
 800d0b4:	00000000 	.word	0x00000000

0800d0b8 <floor>:
 800d0b8:	ec51 0b10 	vmov	r0, r1, d0
 800d0bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d0c8:	2e13      	cmp	r6, #19
 800d0ca:	ee10 5a10 	vmov	r5, s0
 800d0ce:	ee10 8a10 	vmov	r8, s0
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	dc31      	bgt.n	800d13a <floor+0x82>
 800d0d6:	2e00      	cmp	r6, #0
 800d0d8:	da14      	bge.n	800d104 <floor+0x4c>
 800d0da:	a333      	add	r3, pc, #204	; (adr r3, 800d1a8 <floor+0xf0>)
 800d0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e0:	f7f3 f8d4 	bl	800028c <__adddf3>
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	f7f3 fd16 	bl	8000b18 <__aeabi_dcmpgt>
 800d0ec:	b138      	cbz	r0, 800d0fe <floor+0x46>
 800d0ee:	2c00      	cmp	r4, #0
 800d0f0:	da53      	bge.n	800d19a <floor+0xe2>
 800d0f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d0f6:	4325      	orrs	r5, r4
 800d0f8:	d052      	beq.n	800d1a0 <floor+0xe8>
 800d0fa:	4c2d      	ldr	r4, [pc, #180]	; (800d1b0 <floor+0xf8>)
 800d0fc:	2500      	movs	r5, #0
 800d0fe:	4621      	mov	r1, r4
 800d100:	4628      	mov	r0, r5
 800d102:	e024      	b.n	800d14e <floor+0x96>
 800d104:	4f2b      	ldr	r7, [pc, #172]	; (800d1b4 <floor+0xfc>)
 800d106:	4137      	asrs	r7, r6
 800d108:	ea01 0307 	and.w	r3, r1, r7
 800d10c:	4303      	orrs	r3, r0
 800d10e:	d01e      	beq.n	800d14e <floor+0x96>
 800d110:	a325      	add	r3, pc, #148	; (adr r3, 800d1a8 <floor+0xf0>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f7f3 f8b9 	bl	800028c <__adddf3>
 800d11a:	2200      	movs	r2, #0
 800d11c:	2300      	movs	r3, #0
 800d11e:	f7f3 fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 800d122:	2800      	cmp	r0, #0
 800d124:	d0eb      	beq.n	800d0fe <floor+0x46>
 800d126:	2c00      	cmp	r4, #0
 800d128:	bfbe      	ittt	lt
 800d12a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d12e:	4133      	asrlt	r3, r6
 800d130:	18e4      	addlt	r4, r4, r3
 800d132:	ea24 0407 	bic.w	r4, r4, r7
 800d136:	2500      	movs	r5, #0
 800d138:	e7e1      	b.n	800d0fe <floor+0x46>
 800d13a:	2e33      	cmp	r6, #51	; 0x33
 800d13c:	dd0b      	ble.n	800d156 <floor+0x9e>
 800d13e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d142:	d104      	bne.n	800d14e <floor+0x96>
 800d144:	ee10 2a10 	vmov	r2, s0
 800d148:	460b      	mov	r3, r1
 800d14a:	f7f3 f89f 	bl	800028c <__adddf3>
 800d14e:	ec41 0b10 	vmov	d0, r0, r1
 800d152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d156:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d15a:	f04f 37ff 	mov.w	r7, #4294967295
 800d15e:	40df      	lsrs	r7, r3
 800d160:	4238      	tst	r0, r7
 800d162:	d0f4      	beq.n	800d14e <floor+0x96>
 800d164:	a310      	add	r3, pc, #64	; (adr r3, 800d1a8 <floor+0xf0>)
 800d166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16a:	f7f3 f88f 	bl	800028c <__adddf3>
 800d16e:	2200      	movs	r2, #0
 800d170:	2300      	movs	r3, #0
 800d172:	f7f3 fcd1 	bl	8000b18 <__aeabi_dcmpgt>
 800d176:	2800      	cmp	r0, #0
 800d178:	d0c1      	beq.n	800d0fe <floor+0x46>
 800d17a:	2c00      	cmp	r4, #0
 800d17c:	da0a      	bge.n	800d194 <floor+0xdc>
 800d17e:	2e14      	cmp	r6, #20
 800d180:	d101      	bne.n	800d186 <floor+0xce>
 800d182:	3401      	adds	r4, #1
 800d184:	e006      	b.n	800d194 <floor+0xdc>
 800d186:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d18a:	2301      	movs	r3, #1
 800d18c:	40b3      	lsls	r3, r6
 800d18e:	441d      	add	r5, r3
 800d190:	45a8      	cmp	r8, r5
 800d192:	d8f6      	bhi.n	800d182 <floor+0xca>
 800d194:	ea25 0507 	bic.w	r5, r5, r7
 800d198:	e7b1      	b.n	800d0fe <floor+0x46>
 800d19a:	2500      	movs	r5, #0
 800d19c:	462c      	mov	r4, r5
 800d19e:	e7ae      	b.n	800d0fe <floor+0x46>
 800d1a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d1a4:	e7ab      	b.n	800d0fe <floor+0x46>
 800d1a6:	bf00      	nop
 800d1a8:	8800759c 	.word	0x8800759c
 800d1ac:	7e37e43c 	.word	0x7e37e43c
 800d1b0:	bff00000 	.word	0xbff00000
 800d1b4:	000fffff 	.word	0x000fffff

0800d1b8 <_init>:
 800d1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ba:	bf00      	nop
 800d1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1be:	bc08      	pop	{r3}
 800d1c0:	469e      	mov	lr, r3
 800d1c2:	4770      	bx	lr

0800d1c4 <_fini>:
 800d1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c6:	bf00      	nop
 800d1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ca:	bc08      	pop	{r3}
 800d1cc:	469e      	mov	lr, r3
 800d1ce:	4770      	bx	lr
